<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:google | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/google/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2016-11-20T18:26:00+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android In-app-billing 接入- 问题总结]]></title>
    <link href="http://www.newtomato.me/blog/2016/08/31/android-in-app-billing-jie-ru-wen-ti-zong-jie"/>
    <updated>2016-08-31T16:28:48+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/08/31/android-in-app-billing-jie-ru-wen-ti-zong-jie</id>
    <content type="html"><![CDATA[<h2 id="section">准备过程</h2>
<p>接入Google支付之前，你要预先准备如下几件事情。</p>

<ol>
  <li>准备一个google开发者账号，绑定信用卡，在花费20美金。否则进入不了Google Play Developer Console。</li>
  <li>接下来，如果你身在大陆地区，那就你要学会翻墙。同时找一个没被阉割的android手机，这比较难，那就在已有的手机里面安装Google play store和Google Play Service。百度出来的不靠谱，因此最好能够先翻墙，然后google搜索上面两个安装包，安装即可。Android上的翻墙软件，推荐影梭，<a href="http://gjsq.me/1438224">GreenVPN</a>,<a href="http://itxs.co/s/14ff19gw">土行孙</a>。翻墙就祝各位好运了。<br />
<!--more--></li>
  <li>文档准备，看到全是英文Google支付接入文档，不少同学估计会头疼，此处刚好有一份<a href="http://www.baijingapp.com/question/6745">中文流程图</a>，大家可以参考借鉴一下，但最好还是能够通读一下他的开发文档。通过文档大概了解google支付的基本流程和几个概念。<strong>从文档中，我们可以看出Google支付和其他平台的支付最不一样的地方，那就是他需要先上传APK到后台，做成Alpha或者beta测试。然后把我们的小伙伴添加到测试名单中才能够发起支付。如果不发布应用，是无法测试的。PS：发布一个应用，不是瞬间完成的事情，至少等上2个小时，我创建了2个应用做测试，一个等了2个小时，一个等了一晚上。应用通过了，我们接下来才能测试。</strong>可是如果按照上述要求，我们如果修改了应用，是不是还要上传到后台呢？答案是不用，只要是下载过一次测试应用，接下来，我们只需要用相同的签名再次打包，直接覆盖安装到自己手机上即可测试。</li>
  <li>参考如下资料：
    <ol>
      <li><a href="http://leenjewel.github.io/blog/2014/11/21/google-play-in-app-billing-cai-guo-de-na-xie-keng/">Google Play In-app Billing 踩过的那些坑</a></li>
      <li><a href="http://www.jianshu.com/p/cff0f2333db6">Google In-app Billing 支付接入小结</a></li>
    </ol>
  </li>
  <li>下载Android Studio,尽早地熟悉使用它。google提供的Example就是这种工具做的工程。</li>
</ol>

<p>看到这里，基本工作是OK了。<br />
现在假设我们已经通过了成功创建了商品，发布了Alpha测试应用。测试支付，可以先将google的Example工程先做一下修改，然后打包扔上去就可以了。我们需要做的事情有<br />
## 打包<br />
1. 将申请应用的base64publicKey替换成自己的。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-08-31-14726312121126.jpg" alt="" /><br />
2. 修改包名。原先是com.example换成你们想要的就行。然后清理工程重新编译。<br />
3. 修改配置文件中的包名和applicationId。<br />
其他保持不变，直接签名打包。提交上去等待审核通过吧。提交要提交到Alpha测试那里。而不是Production.</p>

<h2 id="section-1">测试购买</h2>
<p>接下来，讲讲怎么测试。<br />
开发者创建一个Google group或者google plus的社区，将测试同学的google邮箱添加进来。<br />
应用发布之后，会出现一个测试连接。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-08-31-14726296504218.jpg" alt="-w=400" /><br />
将这个链接发给测试同学。此时他们打开这个链接才能成为有效的Tester。而不是加入到社区就可以了。<br />
然后在此链接的页面上有一个下载链接，此时就能够下载测试应用了。<br />
下载完成之后，接下来，我们开始测试支付。<br />
问题才刚刚开始哦！</p>

<ol>
  <li>
    <p>此版本的应用未配置通过Google Play结算。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-08-31-Screenshot_2016-08-30-15-04-45.jpeg" alt="-w200" /><br />
解决方法：检查版本号和Google Play上设置的是否一致。检查签名等。Google那边基本认为这个应用不是一个有效的测试应用。</p>
  </li>
  <li>
    <p>需要验证身份，您需要登录自己的Google账户。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-08-31-Screenshot_2016-08-31-15-55-46.jpeg" alt="-w200" /><br />
解决方法：打开手机设置-&gt;账户-&gt;删除Google账户。然后在应用管理中，找到Google Play Store，Google Play Service分别清理缓存数据。然后在打开Google Play商店。此时要求你账户登录。重新登录一遍。在杀死我们的测试应用，重新登录游戏。测试一下。这套方法能成功最好，如果不行，请换一个google账号再试一下。<br />
或者检查一下购买的商品Id在配置中是否一样。</p>
  </li>
  <li>
    <p>无法购买您要买的商品<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-08-31-Screenshot_2016-08-30-16-48-47.jpeg" alt="-w200" /><br />
解决方法：1. 检查是否自己的账号是不是测试账号，一定要是测试账号，不是开发者账号。怎么成为Tester，上面已经说过了。2. 商品的Id是否配置的正确。</p>
  </li>
</ol>

<p>遇到的所有的坑，总结下来就是：<br />
<strong>提交的包名，版本号，商品号，public key，签名等一定要和Google Play上面一致。<br />
Google Play Store是否正常，可以自己上去下载一个其他应用测试一下，如果这个应用能够打开支付，那么Google支付就是正常的。<br />
开发者账号和测试者账号要分开，猜想是Google Play服务后面有一些缓存的问题。</strong></p>

<p>运气好的话，一遍就能通过，如果不好，那就两遍。祝你好运吧。我花费了2天时间，才跑通了一个测试支付。希望你能比我运气好一些。不必这么痛苦。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocos2dx 增加Google移动广告]]></title>
    <link href="http://www.newtomato.me/blog/2016/07/18/zheng-he-google-ads"/>
    <updated>2016-07-18T22:13:43+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/07/18/zheng-he-google-ads</id>
    <content type="html"><![CDATA[<p>Google 提供一套广告的SDK，方便开发者将自己在自己应用中植入广告。国内不少的厂家也在做这样的SDK，比较有名的就是触控下面的AnySDK。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-07-18-any.jpeg" alt="any" /></p>

<p>但是AnySDK是一个大而全的东西，而我们只需要广告接入这一小块儿的东西。同时，我们的cocos2dx的版本是2.2.6，相对于触控的3.18，已经有很大差别。</p>

<p>于是我们需要自己在重新造一遍轮子，幸运的是网上有不少这样的材料。</p>

<ol>
  <li>Firebase提供的文档刚好有与cocos2x相关的资料，<a href="https://firebase.google.com/docs/admob/android/games?hl=zh-cn">移步至此</a>,</li>
  <li>还有热心的同学贴出了更详细的步骤<a href="http://www.cnblogs.com/qianyuming/p/5023018.html">cocos2dx-3.9 集成admob</a>。</li>
  <li>
    <p><a href="https://firebase.google.com/docs/admob/ios/quick-start?hl=zh-cn">入门基础指导</a><br />
<!--more--><br />
参考了上面的资料，我还是遇到了不少问题。</p>
  </li>
  <li>
    <p>首当其冲的就是<strong>安装CocoaPods</strong> ，可以参考下面两篇文章。</p>

    <ol>
      <li><a href="http://blog.csdn.net/wuquan0625/article/details/47401235">pod install速度慢的终极解决方案</a>。</li>
      <li><a href="http://www.cnblogs.com/qianyuming/p/5012578.html">cocoapod安装过程中的幺蛾子</a></li>
    </ol>
  </li>
  <li>一定要下载最新的googlemobilesdk版本，<a href="https://firebase.google.com/docs/admob/ios/download?hl=zh-cn">地址在此处</a>,我当前用的是v7.9.0。</li>
  <li>我们的项目不仅仅会依赖上面的<code>GoogleMobileAds.framework</code>，还依赖一下的framework，请在target-&gt; build phase -&gt; frameworks中找出来。此处我也是被坑到了，总是提示类似<code>"_OBJC_CLASS_$_SFSafariViewController", referenced from: "_CMTimeMakeWithSeconds", referenced from: l3880 in GoogleMobileAds(flat-arm64)"</code>这样的错误，究其原因就是没有找到对应的framework。</li>
</ol>

<pre><code>CoreMideia.framework,SafariServices.framework,
CoreBluetooth.framework,MessageUI.framework,
AdSupport.framework,EventKit.framework,EventKitUI.framework,
AudioToolbox.framework,MediaPlayer.framework,
StoreKit.framework,SystemConfiguration.framework,
CoreTelephony.framework,CoreGraphics.framework,
AVFoundation.framework
</code></pre>

<ol>
  <li>clean-&gt;build project</li>
  <li>在模拟器上运行，Google Ads会自动加载测试的广告。但是如果要在真机上测试，需要打开真机上关闭广告跟踪的功能。在手机的设置-&gt;隐私-&gt;广告里面。关闭即可。</li>
  <li>运行项目从输出控制台先拿到测试设备号。然后填写到下面的位置。再次运行。</li>
</ol>

<pre><code>GADRequest *request = [GADRequest request];
request.testDevices = @[@"测试设备号"];
</code></pre>
<ol>
  <li>设备上测试，还要考虑装一个VPN。</li>
  <li>如果首次没有显示出来，并且控制台也没有报错，估计就是网络响应慢导致的问题。可以多次尝试即可。</li>
  <li>Google 提供了一个example工程。<a href="git@github.com:googleads/googleads-mobile-ios-examples.git">地址</a>,可以先调通这个工程，那么整合到cocos2dx中也就不是什么事儿了！</li>
</ol>

<p>上述是我花费了大半天的时间，踩了不少坑，才将这套流程走通。并且仅仅是展示了Banner广告。<br />
先看一下效果吧。接下来的计划就是调通控制广告播时长的接口。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-07-18-IMG_0511.png" alt="IMG_0511" /></p>

]]></content>
  </entry>
  
</feed>
