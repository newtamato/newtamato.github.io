<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:unity | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/unity/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2019-01-06T14:03:21+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[xlua笔记-协程]]></title>
    <link href="http://www.newtomato.me/blog/2018/06/13/xlua-1"/>
    <updated>2018-06-13T19:00:07+08:00</updated>
    <id>http://www.newtomato.me/blog/2018/06/13/xlua-1</id>
    <content type="html"><![CDATA[<p>xlua的源码在github上有，我今天主要想把他关于协程的函数梳理一下。借此巩固自己的知识，增强记忆。<br />
先上源码：</p>

<pre><code>local function async_to_sync(async_func, callback_pos)
    return function(...)
        local _co = coroutine.running() or error ('this function must be run in coroutine')
        local rets
        local waiting = false
        local function cb_func(...)
            if waiting then
                assert(coroutine.resume(_co, ...))
            else
                rets = {...}
            end
        end
        local params = {...}
        table.insert(params, callback_pos or (#params + 1), cb_func)
        async_func(unpack(params))
        if rets == nil then
            waiting = true
            rets = {coroutine.yield()}
        end
        
        return unpack(rets)
    end
end

local function coroutine_call(func)
    return function(...)
        local co = coroutine.create(func)
        assert(coroutine.resume(co, ...))
    end
end

</code></pre>

<p>阅读xlua代码的时候，看到这段关于lua和c#协程合作实现一种异步转化同步的代码，太佩服作者巧妙的心思和对协程深刻的理解。</p>

<!--more-->

<h2 id="section">协程</h2>

<p>lua的协程函数不多，coroutine.create,coroutine.resume,coroutine,yield差不多是常用的接口了。C#的协程也很简单，C#中只要函数返回迭代器IEnumerator类型，就可以被StartCoroutine()调用。</p>

<p>那协程是什么呢？或者说我们怎么看待它？首先明确一点，他不是线程，仍然是在主线程中运行的。<br />
协程可以看成将这样，有一段逻辑执行到某一个行，突然收到一个信号（yield）然后执行逻辑挂起。此时去执行别的逻辑。直到收到满足解锁上次挂起的条件，上次没执行完的逻辑继续执行。<br />
在lua中，这个条件是开发者主动调用一次<code>coroutine.resume(co)</code>,在c#中，就是<code>YieldInstruction</code>对象主动结束，比如WaitForSeconds(2).<br />
C#中协程的实现可以看成是状态机。知道是状态机之后，我才对协程有了清晰的认识。</p>

<p>例如如下一段伪代码：</p>

<pre><code>IEnumerator doAction(){
	xxx-1
	yield return WaitForSeconds(2);
	xxx-2
	yield return new WWW(url);
	xxx-3
}
</code></pre>

<p>此时CIL会对上述代码转化成一个类结构，运行时就是一个对象。这个对象有5个状态，yield之前是一个状态，yield是一个状态。<br />
当xxx-1执行结束，就会触发下一个状态等待2s，等待2s结束，又会触发新的状态xxx-2，一直到最后。</p>

<p>这样理解起来是不是简单了？</p>

<p>比较特别的一点是是：lua中<code>yield</code>会有返回结果，就是开发者再次唤醒协程，调用<code>coroutine.resume(co，param)</code>，此时传递的<code>param</code>最终又会传递给<code>yield</code>成为他的返回结果。</p>

<h2 id="section-1">进入正题</h2>

<p>接下来，我们来分析一下最开始提到的两个函数。<code>coroutine_call</code>是创建一个lua协程。相对比较复杂的<code>async_to_sync</code>函数最终又返回了一个新的函数，我们暂时称之为<code>async_to_sync2号</code>。他第一个参数<code>async_func</code>是<strong>关键函数</strong>。他将<code>async_to_sync2号</code>的参数<code>...</code>和一个闭包函数<code>cb_func</code>做成自己的参数。接下来，根据<code>rets</code>是否为nil决定是否要挂起协程。rets为nil，协程被挂起，最终<code>cb_func</code>被调用之后，他又会唤起协程。并且将结果返回给<code>yield</code>，<code>rets</code>被填充了数据。如果rets存在数据，则直接将rets返回。</p>

<p>这么说，大家是否理顺了？好像应该在加点例子。好在xlua中这样的例子特别多。我们就以他的充值示例来做说明。</p>

<p>文件是<code>async_test.lua.txt</code>,摘录代码如下：</p>

<pre><code>-------------------------async_recharge-----------------------------
local function async_recharge(num, cb) --模拟的异步充值
    print('requst server...')
    cb(true, num)
    print (debug.traceback())
end

local recharge = util.async_to_sync(async_recharge)
-------------------------async_recharge end----------------------------
local buy = function()
    message_box.alert("您余额不足，请充值！", "余额提醒")
	if message_box.confirm("确认充值10元吗？", "确认框") then
		local r1, r2 = recharge(10)
		print('recharge result:', r1, r2)
		message_box.alert("充值成功！", "提示")
	else
	    print('cancel')
	    message_box.alert("取消充值！", "提示")
	end
	print('recharge finished')
end
--将按钮监听点击事件，绑定buy方法
CS.UnityEngine.GameObject.Find("Button"):GetComponent("Button").onClick:AddListener(util.coroutine_call(buy))
</code></pre>

<p><code>message_box.alert</code>和<code>message_box.confirm</code>的实现也是采用这种方式实现的。代码如下：</p>

<pre><code>local sync_alert = util.async_to_sync(CS.MessageBox.ShowAlertBox)
local sync_confirm = util.async_to_sync(CS.MessageBox.ShowConfirmBox) 

--构造alert和confirm函数
return {
    alert = function(message, title)
		 sync_alert(message, title)
    end;
	
	confirm = function(message, title)
		local ret = sync_confirm(message, title)
		return ret == true
    end;
 }
</code></pre>

<p><code>message_box.alert</code>通过<code>sync_alert</code>（此时的sync_alert就是上面提到的async_to_sync2号）将<strong>message, title以及sync_alert函数体内的匿名函数cb_func封装起来传递给CS.MessageBox.ShowAlertBox</strong>。而我们到c#那里去看，发现他确实是三个参数，第三个参数就是点击按钮需要的回调。一旦我们点击了按钮，就触发了<code>cb_func</code>，于是协程被唤醒。下面的逻辑开始继续执行。</p>

<p>下面的<code>recharge函数</code>刚好就没有使用到协程，<code>recharge = util.async_to_sync(async_recharge)</code>，<strong>他的关键函数是async_recharge，recharge将自己的参数和自身闭包函数cb_func传递给async_recharge</strong>，而<code>async_recharge(num,cb)</code>在lua侧就执行了。waiting还是false，rets填充了true,num并且返回。</p>

<p>现在大家理解了这个函数了吗?</p>

<p>在来看看lua协程和c#协程一起处理的事情。比如等待三秒，在继续逻辑。单纯地在c#侧就很简单了。在lua侧怎么做呢?</p>

<p>刚好xlua中也有这样的代码：</p>

<pre><code>[LuaCallCSharp]
public class Coroutine_Runner : MonoBehaviour{
public void YieldAndCallback(object to_yield, Action callback)
{
    StartCoroutine(CoBody(to_yield, callback));
}
private IEnumerator CoBody(object to_yield, Action callback)
{
    if (to_yield is IEnumerator)
        yield return StartCoroutine((IEnumerator)to_yield);
    else
        yield return to_yield;
    callback();
}
}
</code></pre>

<pre><code>local function async_yield_return(to_yield, cb)
    cs_coroutine_runner:YieldAndCallback(to_yield, cb)
end

yield_return = util.async_to_sync(async_yield_return)`
yield_return(CS.UnityEngine.WaitForSeconds(3))

</code></pre>

<p>cs_coroutine_runner就是Coroutine_Runner，在运行时传给了lua。因为需要用它调用c#的协程。<strong>yield_return将自己的参数Wait3和内部的cb_func传递给了async_yield_return</strong>，async_yield_return调用了c#对象的协程，协程执行结束，就会回调cb。于是lua侧的协程也就结束了。</p>

<p>看了这几个例子，大家看明白了么？</p>

<h2 id="section-2">总结</h2>

<p>我们先得各自了解lua的协程和c#的协程都是怎么工作的。才能看明白xlua中的那段代码。虽然一直用，却从未仔细深入的了解别人的代码，真是惭愧。建议大家有空多阅读一下别人的代码，尤其是那些优秀的代码，总有异想不到的收获。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity Shader基础函数：TRANSFORM_TEX]]></title>
    <link href="http://www.newtomato.me/blog/2018/02/11/unity-transform-tex"/>
    <updated>2018-02-11T00:30:09+08:00</updated>
    <id>http://www.newtomato.me/blog/2018/02/11/unity-transform-tex</id>
    <content type="html"><![CDATA[<p>我们知道在unity中tiling和offset是用来设置纹理的重复，也就是俗称的贴瓷砖。<br />
只要我们将tiling设置为（2，2）那么效果如下：<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2018-02-07-15180039093865.jpg" alt="=w300" /></p>

<p>此时，对这个GameObject添加shader，正确读取具体的uv坐标就要用到<code>TRANSFORM_TEX</code>函数。<br />
（如果纹理的tiling=1，offset=1的情况下，可以不使用这个函数）</p>

<pre><code>#define TRANSFORM_TEX(tex,name) (tex.xy * name##_ST.xy + name##_ST.zw)
</code></pre>

<p>语法问题，不是我们的重点。大家可以自行搜索。<br />
这个函数的意思就是对<strong>texture的uv坐标进行一个缩放操作和位移操作</strong>。<br />
那么<code>tex.xy</code>作为关键的参数，他的范围是多少，这个公式操作之后，生成的uv范围又是多少？</p>

<!--more-->

<p>在Shader中通过对顶点函数的修改：</p>

<pre><code>v2f vert(a2v v) {
	v2f o;
	o.pos = UnityObjectToClipPos(v.vertex);
	
	o.worldNormal = UnityObjectToWorldNormal(v.normal);
	
	o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;

	//o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);
	//无论外面的tiling和offset怎么修改，这里一直就是v.texcoord
	o.uv = v.texcoord;
	
	return o;
}
</code></pre>

<p>此时发现，外面的渲染并没有出问题。表现就是tiling(1,1),offset(0,0)的样子。因此可以得知，<code>v.texcoord</code>的u，v范围均是（0，1）<br />
那么通过公式可以推算，如果tiling是（2，2）,计算出来的uv的范围就是（0，2），如此超过了纹理的坐标范围，拿不到纹理才对，怎么实现的贴图？</p>

<p>如果你和我有同样的困惑，那么希望我的回答能让你茅塞顿开！</p>

<p>答案就是纹理设置了贴图方式，这种方式使用opengl的<code>glTexParameteri</code>函数进行设置。(只看opengl，D3D原理相似)</p>

<pre><code>glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
</code></pre>

<p>如果纹理坐标超过（0，1）范围，则开始从头开始寻址。也就是说原先纹理坐标是(0，0.5),此时经过放大2倍，变成（0，1），那么重新开始读取纹理的（0，0）位置。<br />
至此重复贴出的效果就实现了。</p>

<p>另外在unity中纹理贴图方式是在如下位置设置的：<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2018-02-07-15180058478883.jpg" alt="=w300" /></p>

<p>如果你把Wrap Mode设置为<code>Clamp</code>，纹理寻址找不到直接就不显示了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么控制镜头跟随人物移动]]></title>
    <link href="http://www.newtomato.me/blog/2017/05/14/kong-zhi-jing-tou-gen-sui"/>
    <updated>2017-05-14T17:48:56+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/05/14/kong-zhi-jing-tou-gen-sui</id>
    <content type="html"><![CDATA[<p>在第三人称射击游戏中，镜头是跟随英雄的移动而移动的。这是如何实现的呢？<br />
我们从简入手，开始说一下怎么控制镜头的移动。<br />
这算是很基础的unity入门了。但是我却没有给我朋友讲清楚。丢人哦！<br />
<img src="http://wx2.sinaimg.cn/mw690/805c3d47ly1fevq3bkj1mg206y06y4ql.gif" alt="" /></p>

<h2 id="section">开始入手</h2>

<p>镜头移动是需要控制镜头的位置随着英雄的位置变动而变动。<br />
因此有下面的代码：<br />
<!--more--><br />
<code>
public class SimpleFollower : MonoBehaviour {
	public Transform target;
	void Update () {
		transform.position = target.position;
	}
}
</code></p>

<p>target就是英雄，把这个组件拖到英雄身上。移动英雄。看看效果。<br />
是不是发现镜头嵌在了英雄身上，英雄的position的中心点在身体重心上，这是镜头也在这。因为出现嵌入感。所以应该增加一个偏移量offset。</p>

<p>一般我们在场景中先设置好镜头和英雄的偏移。在代码中可以计算得到。</p>

<pre><code>private Vector3 _deltaPosition；
void Start () {
	_deltaPosition = transform.position - target.position;
}
</code></pre>

<p>英雄在移动中需要将这个偏移量也一并计算在内。<br />
<code>
transform.position = target.position + _deltaPosition;
</code></p>

<p>此时运行unity，镜头跟随没问题了。但是还有个问题就是此时玩家如果左右移动，镜头就又出现问题了。我们需要镜头一直在人身后做跟随。即使人物左右移动，镜头也要左右移动才更好。<br />
因此代码还需要优化。就是增加旋转的考虑。</p>

<p>假设我们只考虑玩家左右渲染，即围绕Y轴的旋转。</p>

<pre><code>float yAngle = target.rotation.eulerAngles.y;
Quaternion quat = Quaternion.Euler (0, yAngle, 0);
transform.position = target.position + _deltaPosition * quat;
</code></pre>

<p>这样运行之后，镜头确实随着移动，但是表现不够自然。因此就需要用到Lerp函数。</p>

<pre><code>transform.position = Vector3.Lerp(transform.position,target.position + _deltaPosition * quat,Time.deltaTime);
</code></pre>

<p>同样的上面计算的旋转角度也可以使用Lerp函数。</p>

<pre><code>float yAngle = Mathf.Lerp (transform.rotation.eulerAngles.y,target.rotation.eulerAngles.y,Time.deltaTime * damping);
Quaternion quat = Quaternion.Euler (0, yAngle, 0);

transform.position = Vector3.Lerp(transform.position,target.position + _deltaPosition * quat,Time.deltaTime);

</code></pre>

<h2 id="section-1">可选阅读</h2>

<p>在FPS游戏中，有输入设备可控制英雄的移动，例如手柄，键盘等。我们这里使用鼠标控制英雄的旋转。</p>

<pre><code>_horizontalRotation += Mathf.Clamp(Input.GetAxis("Mouse X"), -1, 1)* rotateSpeed * Time.deltaTime;
_horizontalRotation = Mathf.Clamp (_horizontalRotation, -90, 90);
target.transform.rotation = Quaternion.Euler (0, _horizontalRotation, 0);
</code></pre>

<p>此处_horizontalRotation用于记录英雄的旋转角度。这里做了个限制，英雄旋转不能超过左转90度和右转90度。<br />
rotateSpeed是旋转速度。每秒钟旋转多少。<br />
通过Quaternion.Euler计算一个旋转四元数，用来控制英雄的旋转。</p>

<h2 id="section-2">结语</h2>
<p>上面旋转用到了矩阵和向量的乘法运算。将一个坐标转换到另一个坐标。其他的都是通过Lerp和Clamp对数据进行处理。</p>

<p>总体来说，为了达到那种顺畅的动作，需要增加其他Vector3的转换以及fieldOfView来增加动感。如有兴趣大家可以把Unity官方的镜头跟随代码打开看看。</p>

]]></content>
  </entry>
  
</feed>
