<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:项目管理 | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/xiang-mu-guan-li/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-05-23T16:40:24+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[项目进度的几点想法]]></title>
    <link href="http://www.newtomato.me/blog/2016/02/25/xiang-mu-jin-du-de-ji-dian-xiang-fa"/>
    <updated>2016-02-25T12:26:58+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/02/25/xiang-mu-jin-du-de-ji-dian-xiang-fa</id>
    <content type="html"><![CDATA[<p>将项目从0做到1说简单也简单，说复杂也复杂。这里面的变量不多，但是每一个变化都会影响很多东西。<br />
我将这个过程总结成一个公式，</p>

<blockquote>
  <p>（需求沟通+进度控制+执行操作）X n = 期望的产品</p>
</blockquote>

<p>所谓的n，就是n次迭代。<br />
<!--more--><br />
产品做得怎么样就看我们怎么控制这几个变量。你想团队都能理解在这里做什么，做到那种细致的程度，那么多和他们沟通，每一个环节的负责人不仅仅知道自己做的，还要了解其他环节的负责的东西，比如简单的来说，就是程序需要知道自己做的功能有哪些，还要知道美术方面需要提供什么资源过来，测试环节做了多少，是否有必要跟进。<br />
沟通是最费劲的也是最基础的事情，把一件事传达给其他人，除有详尽的文档之外，还要需要面对面的将需求说明一番，在scrum中这个环节称之为kick off。此时需求的实施方如果有任何问题都是可以直接问。前期对功能尽量有一个完善的考虑。整理出一份甘特图，这就为后面的<strong>进度控制</strong>开始做准备。</p>

<p>需求讲解的明白清楚，就能够划分的细致到位。方便与施工方开始分配时间。<br />
时间对于一个项目来说，就是金钱。越早把demo做出来，就能越早的发现问题改善问题。一拖再拖的习惯势必增加项目失败的风险。有了甘特图，我们就能知道项目进行到了哪一步，有什么现在阻碍了我们。但是总有意外。比如在开发过程中必然还会遇到其他没有周全的地方，或者需求方想要临时增加需求。这些额外插入进来的问题，分大小和严重程度，与需求方沟通，在保证一个功能完整的情况下，可以将锦上添花的细节，甚至某些优化体验的功能降级处理。保证不要影响项目的进度。</p>

<p>在流程规范，做事严谨的大公司看来上面的事情似乎是顺利成章的。但是在小公司，创业公司。我们往往对需求方提过来的需求没有能力说<strong>不</strong>，只是一味的接受，在已经计划好的时间内增加新的需求。进而为了达到deadline的时间，只好加班通宵来解决问题。（这只是我经历的公司的一些问题，不代表其他公司也是这样的）</p>

<p>无论是什么样的公司，需求沟通之后，总是要制定计划。进而开始<strong>执行开发</strong>。各部门分工协作，将需求分块，指定owner。美术按照程序的要求出资源。程序就如同泥瓦工一般把各个资源用代码粘合起来，联调测试，在交付测试同学。这里面也有很多的规范，比如美术提交资源的命名规范，使用的工具，和资源有效性的测试。程序的代码管理，code reviewer等。</p>

<p>如此一个周期下来，一个功能就能够完成，甚至也可以做好一个demo。就看需要重复多少次n。</p>

<p>上面的步骤如此简单。但是执行起来我们往往会迷失在其中，辨不清方向。</p>

<p>问题很多事是出现沟通上面的。尤其是一对多的情况下。美术程序测试都对需求有不同的理解，更糟糕的是，需求提出方并没有将自己的改正需求通知给所有负责人，而是只告诉某一方，而其他人还在按照以前的需求闷头继续做。做完发现不对，可是时间成本已经浪费掉了！真是要了命的变化！而我们总是在犯这样的错误。<br />
再者，每个人都希望能做成好的优秀的完美的产品，因此需求方会提出很多东西，不仅要一个完整的功能还有不少细节。他们说这样可以提升用户体验！或者开发这边做出许多不在需求列表上的功能，他们可能解释说，他们觉得这样很好，玩家用户需要这样的功能。还有美术部分，想到很炫酷的东西，坚持一定要这么做！或者这么说大家会认为这样也是正确的，每个人都对项目有自己的想法，是好的。但是仔细想想，这就是一种迷失，对于一个从0到1的初期demo来说，为什么不能一切从简，从重呢？只要枝干，去掉旁支杂叶！甚至是一个功能，一个活动。都是可以先做出来一个大概的样子，然后再去替换资源也好，优化界面也罢，改善体验都可。</p>

<p><strong>不识庐山真面目，只缘身在此山中！</strong></p>

<p>只有被需求虐过无数遍，踏过无数的坑，熬过无数的夜，我们才懂得如何做找到一个项目的脉搏。祝各位也在坑中受虐的同学们能及早认清问题所在，争吵和指责都是没有意义的，只会消耗大家的心情，只有让事情按照一定的规律动起来，朝着目标的方向进行着，我们才能自信的掌握节奏，不会被工作所累。</p>

<p><strong>PS:做事不要只闷头看自己的那方寸之间的事情，要把眼光放得远一些。</strong></p>

]]></content>
  </entry>
  
</feed>
