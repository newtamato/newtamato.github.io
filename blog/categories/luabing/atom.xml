<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:luabing | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/luabing/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-11-12T15:10:28+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何为第三方c++库导出luabinding (Part One)]]></title>
    <link href="http://www.newtomato.me/blog/2017/07/02/ru-he-wei-di-san-fang-c-plus-plus-ku-dao-chu-luabinding"/>
    <updated>2017-07-02T20:26:16+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/07/02/ru-he-wei-di-san-fang-c-plus-plus-ku-dao-chu-luabinding</id>
    <content type="html"><![CDATA[<p>上一篇文章讲到怎么使用<code>liquidfunc</code>,本章节讲述怎么将liquidfun通过luabinding的方式导出给lua使用。</p>

<p>cocos2dx在早期2.x时代，是通过tolua++和pkg的方式，导出成luabinding。现在已经是 3.x版本了，cocos2dx改进了这种导出方式，我们只需要增加一个.ini的配置文件就可以了。</p>

<p>两种方式各有优劣。第一种方式最大的弊病就是花费很多时间在重复做一些事情，麻烦。<br />
第二种方法，看似节省了我们不少时间，但是如果对<code>genbindings.py</code>的原理不熟悉，会让我们对出的错误一头雾水。</p>

<!--more-->
<p>第一种方法按照如下原则，将头文件转为pkg文件即可。</p>

<pre><code>1.    enum keeps the same
2.    remove CC_DLL for the class defines, pay attention to multi inherites
3.    remove inline keyword for declaration and implementation
4.    remove public protect and private
5.    remove the decalration of class member variable
6.    keep static keyword
7.    remove memeber functions that declared as private or protected
</code></pre>

<p>在导出liquidfun的过程中，我采用了第二种方法。在此记录一下过程和遇到的问题。</p>

<h2 id="genbindingspy">使用<code>genbindings.py</code>的方式导出。</h2>

<p>在<code>cocos2d-x/tools/tolua</code>文件夹下面有genbindings.py文件。如果没有，有可能你用的cocos2dx的版本不在3.x以内。</p>

<p>执行py之前，请阅读此处文档，安装相关的工具。<a href="https://github.com/cocos2d/bindings-generator">Requirements</a></p>

<ul>
  <li>先将liquidfun仓库提供的Box2D覆盖cocos2dx原先的Box2D，有一些文件有变化。</li>
  <li>在<code>cocos2d-x/tools/tolua</code>里增加一个<code>cocos2dx_box2d.ini</code>的文件。（因为liquidfun依赖于box2D，因此我们需要先导出box2D）这里提供box2d.ini文件。<a href="media/14989759807211/cocos2dx_box2d.ini">cocos2dx_box2d.ini</a></li>
  <li>修改genbindings.py文件如下：</li>
</ul>

<pre><code>cmd_args = {'cocos2dx_box2d.ini':('cocos2dx_box2d','lua_cocos2dx_box2d_auto')}
</code></pre>

<ul>
  <li>运行如下命令：</li>
</ul>

<pre><code>cd cocos2d-x/tools/tolua
./genbindings.py
</code></pre>

<p>最后看到生成了如下文件</p>

<pre><code>cocos/scripting/lua-bindings/auto/lua_cocos2dx_box2d_auto.cpp
cocos/scripting/lua-bindings/auto/lua_cocos2dx_box2d_auto.hpp
</code></pre>

<h2 id="cpp">使用生成的cpp文件</h2>

<p>将他们添加到工程中，<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-02-14989852241192.jpg" alt="=w250" /><br />
同时在cocos2d_lua_binding工程中<code>building setting-&gt;search paths</code>添加一条搜索路径。<code>$(SRCROOT)/../../../../external/Box2D</code></p>

<p>编译运行一下。</p>

<p>遇到的问题：</p>

<pre><code>1. `luaval_to_object`导出了5个参数，导致不兼容。
2.  enmu没有导出
3.  编译成功，链接失败。
</code></pre>

<p>第一个问题可以通过手动删除第五个参数解决。<br />
第二个问题，可以通过修改lua代码解决。<br />
第三个问题暂时没有找到原因。不知道哪里丢失了路径，导致link总是失败。此处留个坑，待下回处理。</p>

<h2 id="section">参考链接</h2>

<p>1.<a href="https://segmentfault.com/a/1190000000631630">Cocos2d-x下Lua调用自定义C++类和函数的最佳实践</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识liquidFun（流体物理引擎）]]></title>
    <link href="http://www.newtomato.me/blog/2017/06/25/ren-shi-liquidfun"/>
    <updated>2017-06-25T23:24:41+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/06/25/ren-shi-liquidfun</id>
    <content type="html"><![CDATA[<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-06-25-14984044203691.png" alt="" /></p>

<h2 id="section">初识</h2>

<p>在一款名为<a href="http://fingerlab.net/portfolio/yuri">《yuri》</a>的游戏中，发现了点有意思的东西，于是乎各种搜索，终于找到了相关的技术，那就是由google开源的物理引擎<a href="http://google.github.io/liquidfun/">liquidFun</a>。</p>

<p><code>liquidFunc</code>的demo地址<a href="http://google.github.io/liquidfun/testbed/index.html">在此</a>。相信我你看到这个demo之后，绝对会对<code>liquidFun</code>这个引擎产生无比的喜欢。（这里不需要翻墙，只要能打的开github，就能够看得到这个演示。）</p>

<p>先来一睹为快！<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-02-Untitled.gif" alt="" /></p>

<!--more-->

<p><strong>他</strong>继承自<strong>Box2D</strong>，是Box2D的扩展版本，但增加了粒子的流体和柔软性效果。<br />
<a href="http://google.github.io/liquidfun/API-Ref.html">相关的API文档</a><br />
<a href="http://docs.google.com/presentation/d/1fEAb4-lSyqxlVGNPog3G1LZ7UgtvxfRAwR0dwd19G4g/edit?usp=sharing">具体的实现细节在这里</a></p>

<p>因为支持C++, Java, or JavaScript，因此可以整合到cocos2dx引擎中。方便我们使用。当我想到这里的时候，立马去github上搜索了一下。果然触控已经开始考虑到这点了。</p>

<h2 id="section-1">了解</h2>

<p>于是在github触控这里，找到了一份<a href="https://github.com/cocos2d/cocos2d-x-samples">cocos2dx整合liquidFunc的实例工程。</a></p>

<p>安装方法如下:</p>

<pre><code>git clone https://github.com/cocos2d/cocos2d-x-samples
cd cocos2d-x-samples
python download-engine.py
git submodule init
git submodule update
</code></pre>

<p>执行完上述步骤，就可以在sample中打开<code>LiquidFun - EyeCandy</code>工程了。效果也是震撼。<br />
完全足够我们的使用了。</p>

<p>这个工程的作者<a href="https://github.com/ricardoquesada">Ricardo Quesada</a>在他的的博客中有两篇文章，讲解了整合cocos2dx和liquidFun的细节。</p>

<ul>
  <li>
    <p><a href="https://retro.moe/2014/04/23/integrating-liquidfun-with-cocos2d-x-part-i/">Integrating LiquidFun with Cocos2d-x: Part I</a></p>
  </li>
  <li>
    <p><a href="https://retro.moe/2014/07/30/integrating-liquidfun-with-cocos2d-x-part-ii/">Integrating LiquidFun with Cocos2d-x: Part II</a></p>
  </li>
</ul>

<p>感兴趣的各位同学不妨移步去看看，加深对liquidFunc的理解。</p>

<h2 id="section-2">下一步</h2>

<p>由于我们的项目使用的cocos2dx + lua，因此下一步要考虑的就是通过luabing将<strong>Box2D</strong>和<strong>liquidFunc</strong>的代码注册到lua虚拟机中使用。这部分我将在下一篇文章中讲解。</p>

]]></content>
  </entry>
  
</feed>
