<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:python | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-11-12T17:35:46+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python基本使用]]></title>
    <link href="http://www.newtomato.me/blog/2016/09/11/pythonji-ben-shi-yong"/>
    <updated>2016-09-11T19:15:05+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/09/11/pythonji-ben-shi-yong</id>
    <content type="html"><![CDATA[<p><strong>Python</strong>是一门很容易掌握的语言，简单的语法强大的功能，在很多地方都视他为最高效的语言，尤其是在处理数据和文本上面，真的是帮了我们大忙。比如讲产品经理那里过来的文案导出成localizaiton文件，或者将他们的Excel表格导出成json，xml等配置文件，再将我们的数据信息导成他们看的懂得excel表格。<br />
如下的部分是我在团队内部（针对有部分编程语言基础的同学）做的关于Python的分享，也算是对自己使用Python做一个总结吧。</p>

<!--more-->
<p><strong>首先，如何安装Python。</strong><br />
MAC的同学，直接在命令行中敲入<code>python --version</code>，输出版本号就好了。如果没有请安装<code>brew install python</code>，或者到Python的官网按照平台去下载即可。<br />
Window的安装，和上面相似，如果没有安装也请到官网上下载。<br />
<strong>其次，基本的语法。</strong><br />
Python是动态语言，因此他和java已经c语言等静态语言最大的不一样的地方就是，他的一切皆可以不需要先定义类型。例如<br />
在java中，变量的声明是<code>String name= ""</code>,但是在python中属性可以不用声明类型。在使用的时候，赋值是什么类型，变量就是什么类型。<br />
同时函数也有这种特性，java中对象实例化之后，以class为准，class有什么函数，对象就会有，对象不能增加函数，但是python可以，a1,a2均是实例化A，但是a1对象，可以在运行时自己给自己增加一个函数。a2不受影响，并没有这个函数。<br />
所以，秉着这个基本原则，来看Python的语法就简单多了。</p>

<pre><code>a = 123
b = "hello,world"
def func():
	pass
</code></pre>

<p><strong>第三，常用的Python的基本数据结构</strong></p>

<h2 id="string">String字符串</h2>
<p>在Python中<code>‘’</code>和<code>“”</code>都表示是str类型。不做区分。他最长用的函数：拼接，替换，查找，格式化输出，切片还有令人头疼的中文编码<br />
	拼接字符串，使用的是<code>+</code>，<code>"你好啊，" + b + "世界！"</code>，这样虽然达到效果然后，不够美观和易读，所以用到了格式化，<code>"你好哇，%s世界"</code>，这和其他语言一样，%s表示字符串，%d表示数值，%02d表示保留两位，不足两位用0补齐。<br />
	查找和替换，最常用的还是和正则表达式一起使用。<br />
	比如<code>msg = "你要花费%{itemName}和%{itemName2}来做这件事情么？"</code>，这里面我们要做的是讲%{itmName}和%{itemCount}替换成空白字符。那么怎么做好呢？<br />
	简单的方法就是</p>

<pre><code>	msg = msg.repleace("%{itemName}","")
	msg = msg.repleace("%{itemName2}","")
</code></pre>

<p>还有一种更好的方法，那就是使用正则表达式，表达式匹配<code>%{}</code>里面的任何字符，这样更加灵活。</p>

<pre><code>import re #导入包
msg = re.sub(r'%{.+}','',msg)
</code></pre>

<p>接下来说说，中文编码的问题。<br />
中文编码之所以出问题，是因为Python的默认编码是Ascii码，所以输出中文便有问题。我们需要将中文编码成Unicode输出。有的情况下，我们在py文件中增加中文注释，下次再打开文件，文件已成乱码，这是为何呢？原因就是操作系统在我们写注释的时候，是以utf的编码展示中文的，但是存成了文件之后，文件的编码就以utf8的格式存储，再次打开的时候，py文件就以默认的Ascii码读取文件，自然就是乱码了。因此为了避免这种问题，我们在py文件的开头增加<code># -*- coding:utf-8 -*-</code>就可以解决这个问题，这是告诉系统以utf-8的格式打开这个文件。<br />
因为知道了这个问题，我们在读取中文的时候，尽量告诉系统我们要的编码方式，比如从文件中读取内容。讲内容读进来之后，直接用utf-8解码。</p>

<pre><code>f = file.open(fileName,"r")
content = f.read()
content.decode("utf-8")
</code></pre>

<p>另一种情况是：我们print打印出来的中文是正常的，但是写入到文件中，就会报错。<br />
例如：</p>

<pre><code>s = u"我是中文"
f = file.open("test.txt","w")
f.write(s)
f.close()
</code></pre>

<p>这种情况报错是因为s此时的类型是unicode，而f.write(s)参数要求是str类型，因此从unicode到str类型有一层转换，此时没有指定编码，py会默认使用Ascii，自然就报错了，因此我们需要在写入前，手动做一次转换就好了</p>

<pre><code>s = s.encode("utf-8")
</code></pre>

<p>通过<code>type(s)</code>的方法我们得知此时<code>s</code>就是<code>str</code>类型了。<br />
此处是py2才会有的编码问题，在py3已经不再这么麻烦了。如果我们继续使用py2，推荐大家使用codecs模块。</p>

<pre><code>with codecs.open('test.txt', 'w', encoding='utf-8') as f:
   f.write(s)
</code></pre>

<h2 id="listdict">list，dict数据类型使用</h2>

<p>这两种类型相信很多同学都很熟悉，list类似数组，dict就是字典。<br />
常用的方法，添加，删除，查找，切片。</p>

<pre><code>list.append(value)
dict["key"] = value
list.remove(value) #如果value不存在会报错
del dict["key"]  
print(dict[key]) #如果key不存在会报错，在访问前，建议用dict.get(key)来做检查。
print(list[:3])
</code></pre>

<p>还有常用的生成列表的方法</p>

<p>range(1,N) #生成1，N自然数列表<br />
<code>[x *2 for x in range(1,N)] # 偶数列表</code></p>

<p>list和dict都有for in 循环，同时dict还有for key，value in 循环。</p>

<pre><code>for item in list:
for item in dict.itervalues():
for k,v in dict.iteritems():
</code></pre>

<h2 id="section">文件操作</h2>

<p>文件常用的操作就是读写，创建，删除等。<br />
写文件，上面讲到<code>codecs</code>，他也可以用来读取。</p>

<pre><code>import codecs
with codecs.open('test.txt', 'r', 'utf-8') as f:
  		f.read()
</code></pre>

<p>读取文件的时候，假设这里有个需求是对A目录下面所有的json文件都读进来，组合成一个大的文件放到另一个目录文件中。<br />
那么我们首先要遍历这个文件，A里面有二级三级目录，都要读进来。<br />
因此可以使用如下方法</p>

<pre><code>  	for root,dirs,files in os.walk(A):
		for file in files:
			fileBaseName,extention = os.path.splitext(file)
</code></pre>

<p>这样通过extention是否等于json来判断是否是json文件了。<code>os.path.walk</code>也可以达到上述的效果。只是函数的调用方式不同。	我们写入文件是指定一个文件，如果该文件的目录不存在，这么写入是会爆粗的。因此在写入之前，要检查文件是否存在，不存在需要创建。</p>

<pre><code>	if io.path.exists(dirName) == False:
		os.makedirs(dirName) #可以创建多级目录
</code></pre>

<p>与文件相关的函数，请访问os.path模块。相信有更多惊喜等着你哦！</p>

<h2 id="section-1">模块导入</h2>

<p>上面的例子中用到了import中，正如我们在php中看到的include，java中的import，swift中的import都一样，是导入其他的模块到当前py中，他的语法有以下几种：</p>

<pre><code>import A # 导入A模块
from A import B #导入A模块中的B，B可能是一个class，也可能是一个函数
import A as a #导入A模块，换个别名a
try:
	import A as a 
catch :
	import CA as a
</code></pre>

<p>最后一个try catch保证了优先导入A，如果没有A模块，在导入CA。但是都是别名a，这样我们py文件就不用任何修改。</p>

<p>模块导入的搜索路径：<code> sys.path</code><br />
也可以添加自己指定的搜索目录：sys.path.append(‘dirName’)和修改PYTHONPATH</p>

<p>接下来的分享还要类的使用和py调用外部命令等。放到下一章。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[调用漫威开发API]]></title>
    <link href="http://www.newtomato.me/blog/2016/07/27/diao-yong-man-wei-kai-fa-api"/>
    <updated>2016-07-27T16:03:31+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/07/27/diao-yong-man-wei-kai-fa-api</id>
    <content type="html"><![CDATA[<p>无意间看到漫威原来也提供了开放API接口。真是让我惊喜意外。<br />
简单了看了一下他们的文档，看样子很简单就能够调用。不需要额外的登录和授权。<br />
API接口文档<a href="http://developer.marvel.com/docs">在此</a><br />
请求结构文档<a href="http://developer.marvel.com/documentation/generalinfo">在此</a></p>

<p>因此要调用他们接口，需要提供如下三个参数即可<br />
<!--more--></p>

<pre><code>Params: 
{   	"apikey": "your api key",   
		"ts": "a timestamp",   
		"hash": "your hash" 
}
</code></pre>

<p>第一个参数<strong>apikey</strong>是我们申请漫威开发者账号的时候，由他提供的一个<code>publick key</code>，（对应还有一个<code>private key</code>），第二个<strong>ts</strong>是一个时间戳，第三个hash是通过如下算法计算出来的</p>

<pre><code>	md5(ts+privateKey+publicKey)
</code></pre>

<p>例如，ts是1，public key是1234,private key是abcd，那么这个数字就是<code>md5(1abcd1234)</code></p>

<p>按照他的这个规则，我用Python写了一个简单的调用demo，代码下载下来，直接可用。</p>

<pre><code>import httplib
import urllib
import json
import datetime
import time
from md5 import md5

APIKEY = "1e8b043610d5ae2f4294eaf94dede6db"
PRIVATE_KEY = "32360edc7f06e025819a974ade95e513994761b1"
class BaseHttpRequest :
def __init__(self,action,param):
   self.mAction = action
   self.mParams = param

def execute(self):
strRequest = "gateway.marvel.com" 
    	
headers = {"Accept":"application/json","Content-Type" : "application/json"}

params = {}
params["apikey"] = APIKEY
    	
ts = time.time()
ts = int(ts)
params["ts"] = ts
strKey = "%s%s%s" % (ts,PRIVATE_KEY,APIKEY)
params["hash"] = md5(strKey).hexdigest()
params["limit"] = 1
params["offset"] = 1
params = urllib.urlencode(params)
strUrl = "/v1/public/%s?%s" % (self.mAction,params)
conn = httplib.HTTPSConnection(strRequest)
conn.request("GET",strUrl,None,headers) #params,headers
res = conn.getresponse()
    	
data = res.read()
jsonResult = json.loads(data)
   
</code></pre>
<pre><code>if __name__ == "__main__":
	#characters,comics,creators,events,stories
	request = BaseHttpRequest("stories",None)
	request.execute()
</code></pre>
<p>调用结果如下<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-07-27-14696064871563.jpg" alt="" /></p>

]]></content>
  </entry>
  
</feed>
