<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:lua | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/lua/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-11-05T22:34:45+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Require机制和自动更新之间的爱恨情仇]]></title>
    <link href="http://www.newtomato.me/blog/2017/04/15/requirehe-re-geng"/>
    <updated>2017-04-15T15:02:02+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/04/15/requirehe-re-geng</id>
    <content type="html"><![CDATA[<p>lua之所以能够做自动更新，和require的特殊机制有很大的关系。<br />
通过阅读require相关的代码，我们得知，require的原理是先从<code>package.loaded</code>当中先检查是否存在要加载的lua文件，如果不存在则读取之后放入到<code>package.loaded</code>中，如果存在直接将从<code>package.loaded</code>中读取即可。<br />
因此我们热更新之后，为了能够让新的文件生效，会将<code>package.loaded</code>直接清空。这样按照上面的逻辑，<code>require</code>进来得文件肯定都是新的文件了。</p>

<p>事实是，总有意想不到的事情发生。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-04-15-805c3d47ly1fdoys4g14mg209q05g4jr.gif" alt="805c3d47ly1fdoys4g14mg209q05g4j" /></p>

<!--more-->

<p>但是事实上这里面暗藏了小小的机关。<br />
那就是如何清空<code>package.loaded</code> ?</p>

<p>有两种情况清空的方法。</p>

<p>第一种：<br />
<code>package.loaded = {}</code></p>

<p>这种方式之后，热更的文件是否生效了呢？我们发现没有生效照样还是返回以前的lua模块了。所以这种方法没有达到我们理想的清空啊。</p>

<p>第二种方法：<br />
<code>
for k,v in pairs(package.loaded) do
	package.loaded[k] = nil
end
</code></p>

<p>这两种看起来没什么区别，但是第二种起作用了。重新加载文件，生效的是新的lua模块。</p>

<p>仔细看看这两种方法，第一种其实并未真的清空，他是将package.loaded的指向的对象地址发生了变化，原先内存中存在的那份加载对象还是存在的。也就是对象并未释放，导致加载未生效。而第二种则是对加载对象这块儿内存数据直接清理。因此重新加载的时候肯定生效。</p>

<p>因此对象引用这块儿，一定要切记小心。不要被他简单的外表欺骗了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录Lua中排序的一种坑]]></title>
    <link href="http://www.newtomato.me/blog/2016/06/07/lua-tablede-keng"/>
    <updated>2016-06-07T20:26:28+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/06/07/lua-tablede-keng</id>
    <content type="html"><![CDATA[<p>最近我们做一个功能，此功能需要前后端都对一套配置进行一个算法的处理。<br />
算法都是没有问题的，但是计算出来的结果却总是出现问题。这让我们一点摸不着头脑。<br />
后来经过严格的多双眼睛的考察，发现，原来是打印出来的配置欺骗了我们。</p>

<p>伪代码如下：</p>

<pre><code>for _,itemConfig in pairs(config) do
	--算法逻辑(itemConfig)
end
</code></pre>
<!--more-->

<p>json配置如下</p>

<pre><code>"cells": {
		"1_6": "A",
		"1_7": "B",
		"1_8": "C",
		"1_11": "A",
		"1_12": "A",
		"1_13": "B",
		"2_4": "C"
 }
 
</code></pre>

<p>使用如下的lua函数打印这个结构。<code>dump(config)</code>,输出了如下的结果:</p>

<pre><code> 
	"cells": {
			"1_11": "A",
			"1_12": "A",
			"1_13": "B",
			"1_6": "A",
			"1_7": "B",
			"1_8": "C",
			"2_4": "C"
 	}
 	
</code></pre>

<p>这个打印的规律就是将key的每一位按照Ascii码做比较，Ascii中排在前面，数字就排在前面。</p>

<p>按照打印的顺序计算出来的结果不正确，那程序到底是用什么顺序呢？于是在for循环里面加入<code>print</code>打印，挨个输出看看是否有正确？<br />
结果发现果然和dump出来的不一样。<br />
dump欺我也！<br />
而打印出来的数据和配置也不同，且配置发生了变化也会影响到打印。且没有规律可循！<br />
我们的使用json读出，但是在<code>io.readfile()</code>是没有问题的，但是json转换之后出现了问题。这里分成两部分。一份不是cjson转成json，另一部分是json对象转换成table。我对后一部分的疑问很大。<br />
于是对lua的table的结构进行了再次研究，知道我看到云风大侠的这篇<a href="http://blog.codingnow.com/2005/10/lua_table.html">文章</a>。</p>

<p><strong>有点醍醐灌顶，简而言之，我们看到的table结构背后有一套自己的结构，这样能够保证对数据做快速的查询操作。他对key做hash处理。往里面增加数据，他会根据数据的key hash之后找一个位置。因此这里json对象在parase之后，往table中插入数据是不会按照我的json里面的格式。</strong></p>

<p>如果一定要求table的结构是我们要求的顺序，就需要做sort排序处理。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setfenv有何用？]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/18/lua-setfenv"/>
    <updated>2015-11-18T00:39:31+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/18/lua-setfenv</id>
    <content type="html"><![CDATA[<p>上一章，我们提到了模块里面的函数，使用点语法的方式定义函数和变量。点之前的名字类似一个命名空间。比如<code>function A.function() end</code>,此处A就相当于一个命名空间，那么我们能不能有更好地方法不用写这个命名空间呢？当然是可以的。lua提供这样的方式。</p>

<!--more-->

<p>这个方法涉及到一个核心函数<code>setfenv()</code>, 我们看一下这个函数的API：<br />
setfenv(f, table)：设置一个函数的环境<br />
1. 当第一个参数为一个函数时，表示设置该函数的环境<br />
2. 当第一个参数为一个数字时，为1代表当前函数，2代表调用自己的函数，3代表调用自己的函数的函数，以此类推</p>

<p>看第一条，他说到可以设置函数的环境。如果我们不调用setfenv，那么函数的环境是什么呢？其实就是默认的_G.所有已经加载了函数变量模块都会被注册到_G中，因此我们可以在B.lua文件中直接调用A.lua中定义的USER_NAME就不会报错。</p>

<p>但是如果我们调用了setfenv()，会发生什么事情？我们来试试。<br />
A.lua</p>

<pre><code>USER_NAME = "jolie"
ITEM_NAME = "abc"
ITEM_COUNT = 123
</code></pre>

<p>调用函数：</p>

<pre><code>require("A")
setfenv(1,{})
tostring(USER_NAME)
print("i want to print user name")
</code></pre>

<p>结果会是什么样子的呢？<br />
结果就是tostring，print无法被调用，咦？这是怎么回事呢？其实很简单，原来tostring和print很早就被注册到了_G中，我们把函数环境设成了空表，于是再也找不到了tostring和print了。这就报错了！</p>

<p>因此既然我们用得到print和tostring，我们就把这两个函数保存起来，传递给我们当前的函数环境。</p>

<pre><code>setfenv(1,{print = _G["print"],tostring = _G["tostring"]})
</code></pre>

<p>再次运行，发现了没有，没有报错。正确打印了。<br />
但是这样会不会因此影响到其他的模块呢？比如有一个B.lua，他是否能够正确执行？</p>

<p>A.lua</p>

<pre><code>local A = {print = _G["print"],tostring = _G["tostring"]}
setfenv(1,A)
-- setfenv(1,{})
name = "hello,A"
function doA( ... )
	print("i am A, i call doA function")
end

function doA2( ... )
	print("i am doA2, i call doA2 function")
end

return A
</code></pre>
<p>B.lua</p>

<pre><code>local B = {}
function B.doAction()
	local a = {}
	table.insert(a,1)
	table.insert(a,2)
	table.insert(a,3)
	for k,v in pairs(a) do
		print(k,v)
	end
end
return B
</code></pre>

<p>调用代码：</p>

<pre><code>a = require("A")
a.doA()
a.doA2()
print("i want to print user name , "..a.name)
b = require("B")
b.doAction()
</code></pre>

<p>看见打印了么？没错！我们设置了A的函数环境，但是并没有因此而影响到B和调用的地方。这说明setfenv只是对当前的模块函数环境进行了设置，而并没有影响到其他。这就是setfenv第一个参数的作用，它指定了当前函数，而不是全局函数，因此只对A这个当前的函数模块进行了设置。</p>

<p>setfenv()还有什么特别的用处？敬请等待下回分析！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua中require到底做了什么事情？]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/15/lua-require"/>
    <updated>2015-11-15T20:47:27+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/15/lua-require</id>
    <content type="html"><![CDATA[<p>require到底做了什么呢？起初我认为他和其他的语言的require是一样的，即将另一个模块导入进来。比如有一个如下的A.lua文件<br />
<!--more--></p>

<pre><code>DEBUG = false
USER_NAME = "newtomao"
USER_IMAGE = "cat.png"
VERSION = ""

function printBool(boolValue)
	print("[printBook]:" .. tostring(boolValue))
end

function getRandomNumber()
	return  math.random(100)
end
</code></pre>

<p>当我在另一个文件B.lua里面<code>require("A")</code>的时候，我们可以直接调用<code>getRandomNumber</code>和上面定义的常量。因此我们可以任务require就是将另一个文件注册到全局表_G中。这样我们就可以在全局范围内的使用A文件中定义的函数和变量。</p>

<p>我们讲require”A”的结果打印出来如下：</p>

<pre><code>retA = require("A")
dump(retA)
</code></pre>
<p>结果如下：</p>

<pre><code>"require之后的结果" = true
</code></pre>

<p>但是如果A文件不是上面的样子，而是如下的样子：</p>

<pre><code>local A = {}
A.userName = "hello"
function A.doAction()
	print("doAction")
end
return A
</code></pre>

<p>此时我们require(A.lua)之后，是否可以也直接调用doAction呢？且慢。仔细看下面有一个<code>return</code>, 这表示这个lua文件如果被require进来，返回的是A，就是一个完整的模块table。</p>

<pre><code>retA = require("A")
dump(retA,"require之后的结果")
</code></pre>
<p>打印的结果如下：<br />
<code>
"require之后的结果" = {
    "doAction" = function: 0x7fcc024dddb0
    "userName" = "hello"
}
</code></p>

<p>你看她返回的结果是一个table，打印了A的结构。此时我们就可以通过<code>retA.doAction()</code>的形式去调用。<br />
retA就是类似一个对象，但是又不完全是对象，它更像是一个命名空间。规定了函数和变量的上下文环境是在A这个空间内。如果外面想要访问userName，需要在前面加上命名空间的限定。<br />
如果A被我们require多次结果会不会不同呢？比如如下：</p>

<pre><code>a = require("A")
a2 = require("A")
print(a == a2)
</code></pre>
<p>结果是怎么样的呢？答案就是true，是的，a和a2是一个地址。</p>

<pre><code>print(a)
table: 0x7fac50500ad0
print(a2)
table: 0x7fac50500ad0
</code></pre>

<p>那么这样看来你require多次和require一次的结果是一样的。那么require到底做了什么？<br />
我们来看lua中对require函数的实现：</p>

<pre><code>static int ll_require (lua_State *L) {
  const char *name = luaL_checkstring(L, 1);
  int i;
  lua_settop(L, 1);  /* _LOADED table will be at index 2 */
  lua_getfield(L, LUA_REGISTRYINDEX, "_LOADED");
  lua_getfield(L, 2, name);
  if (lua_toboolean(L, -1)) {  /* is it there? */
    if (lua_touserdata(L, -1) == sentinel)  /* check loops */
      luaL_error(L, "loop or previous error loading module " LUA_QS, name);
    return 1;  /* package is already loaded */
  }
  /* else must load it; iterate over available loaders */
  lua_getfield(L, LUA_ENVIRONINDEX, "loaders");
  if (!lua_istable(L, -1))
    luaL_error(L, LUA_QL("package.loaders") " must be a table");
  lua_pushliteral(L, "");  /* error message accumulator */
  for (i=1; ; i++) {
    lua_rawgeti(L, -2, i);  /* get a loader */
    if (lua_isnil(L, -1))
      luaL_error(L, "module " LUA_QS " not found:%s",
                    name, lua_tostring(L, -2));
    lua_pushstring(L, name);
    lua_call(L, 1, 1);  /* call it */
    if (lua_isfunction(L, -1))  /* did it find module? */
      break;  /* module loaded successfully */
    else if (lua_isstring(L, -1))  /* loader returned error message? */
      lua_concat(L, 2);  /* accumulate it */
    else
      lua_pop(L, 1);
  }
  lua_pushlightuserdata(L, sentinel);
  lua_setfield(L, 2, name);  /* _LOADED[name] = sentinel */
  lua_pushstring(L, name);  /* pass name as argument to module */
  lua_call(L, 1, 1);  /* run loaded module */
  if (!lua_isnil(L, -1))  /* non-nil return? */
    lua_setfield(L, 2, name);  /* _LOADED[name] = returned value */
  lua_getfield(L, 2, name);
  if (lua_touserdata(L, -1) == sentinel) {   /* module did not set a value? */
    lua_pushboolean(L, 1);  /* use true as result */
    lua_pushvalue(L, -1);  /* extra copy to be returned */
    lua_setfield(L, 2, name);  /* _LOADED[name] = true */
  }
  return 1;
}
</code></pre>

<p>这个函数并不复杂，但是对于初学者来说可能看到之后会被吓到，大部分都是出栈入栈的操作。我们先看前几行</p>

<pre><code>lua_settop(L, 1);  /* _LOADED table will be at index 2 */
  lua_getfield(L, LUA_REGISTRYINDEX, "_LOADED");
  lua_getfield(L, 2, name);
  if (lua_toboolean(L, -1)) {  /* is it there? */
    if (lua_touserdata(L, -1) == sentinel)  /* check loops */
      luaL_error(L, "loop or previous error loading module " LUA_QS, name);
    return 1;  /* package is already loaded */
  }
</code></pre>
<p>不用看函数，且看注释，他的意思就是先将栈指针移到第一个位置，由于lua所以从1开始，移到1即意味着要讲栈里面的元素清空，然后将LUA_REGISTRYINDEX执行的表数据里面名字是“_LOADED” 这个数据放到第2个位置，接下来讲在第2位的数据里面，名字叫做name的数据放到第三位。那么在第二位的不正是loaded的数据嘛！<br />
接下来，lua检查栈顶元素是否是bool类型，那么栈顶元素是哪一个呢?不正是第三步放进来的数据嘛！<br />
检查这个数据是否是boolean类型，只要存在，也就是加载过这个name模块，那么就任务已经被加载过了。就直接返回无需再次加载。</p>

<p>而如果没有数据，那么就需要检查是否能够正确地加载。</p>

<p>这就解释了为什么多次require其实并没有什么意义。</p>

<p>接下来代码会寻找一个有效地loader加载器加载lua模块然后讲模块加载的结果放到了_LOADED中。因此我们在require之后，可以通过打印package.loaded来检查。</p>

<pre><code> "package.loaded" = {
     "A" = {
         "doAction" = function: 0x7f88fec5c2d0
         "userName" = "hello"
     }
     "B" = true
    }
</code></pre>

<p>看到这里，各位同学应该已经了解这个reuqire之后，其实并未创建新的对象，而是将lua文件运行之后的结果返回来了。那么这个已经被放到了loaded的“A”更像是一个类文件的模板。而不是对象。</p>

<p>那么这对于我们习惯面向对象开发的同学来说，如何用lua来实现面向对象的开发呢？<br />
别急，请看下一篇文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua脚本在C++下的舞步（三）]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/12/lua-deep-3"/>
    <updated>2015-11-12T21:48:47+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/12/lua-deep-3</id>
    <content type="html"><![CDATA[<p>转帖来自：http://www.acejoy.com/bbs/viewthread.php?tid=1931&amp;extra=page%3D1</p>

<p>上一讲我把Lua基本的栈规则讲了一下，然后完善了一下我的CLuaFn类。让它可以支持任意参数数量和函数名称的传值。当然，这些功能是为了今天这篇文章而铺路的。</p>

<p>看了七猫的回帖，呵呵，确实应该说一下SWIG这个工具，说真的，我对这个工具理解不深，因为没有怎么用过，读过一些关于它的文章，似乎是帮你把C++的功能封装成一个Lua基本库的东西，但是后来研究，他可以很轻松帮你把公用函数封装成一个Lua的基本库(类似C++的dll)，但是对于我的需求而言，可能不太一样。因为我大量的是需要在C++里面进行数据传输以及变量的交互，所以为了紧贴C++，我需要很多关联数据的处理。 <br />
我是一名C++程序员，所以在很多时候，不想过多的使用Lua的特性，因为个人感觉，Lua的语法要比C++的更加灵活。而我更希望，在函数调用的某些习惯上，遵循一些C++的规则。</p>

<!--more-->

<p>好了，废话少说，我们先来看一个类（头文件）。假设我们要把这个对象，传输给Lua进行调用。</p>

<pre><code>#ifndef _TEST_H 
#define _TEST_H
class CTest 
{ 
public: 
        CTest(void); 
        ~CTest(void);
        char* GetData(); 
        void SetData(const char* pData);
private: 
        char m_szData[200]; 
}; 
#endif
</code></pre>

<p>这个类里面有两个函数，一个是GetData()，一个是SetData()，之所以这么写，我要让Lua不仅能使用我的类，还可以给这个类使用参数。 <br />
那么，cpp文件，我们姑且这样写。（当然，你可以进行修改，按照你喜欢的方式写一个方法，呵呵）</p>

<pre><code>char* CTest::GetData() 
{ 
        printf(“[CTest::GetData]%s./n”, m_szData); 
        return m_szData; 
}

void CTest::SetData(const char* pData) 
{ 
        sprintf(m_szData, “%s”, pData); 
}
</code></pre>

<p>这是一个标准的类，我需要这个类在Lua里面可以创造出来，并赋予数值，甚至我可以把CTest作为一个Lua函数参数，传给Lua函数让它去给我处理。让我们来看看怎么做。如果使用标准的Lua语法，有点多，所以我就借用一下上次提到的tolua来做到这一切，我一句句的解释。姑且我们把这些代码放在LuaFn.cpp里面。</p>

<pre><code class="language-c++">static int tolua_new_CTest(lua_State* pState) 
{ 
        CTest* pTest = new CTest(); 
        tolua_pushusertype(pState, pTest, “CTest”); 
        return 1; 
}

static int tolua_delete_CTest(lua_State* pState) 
{ 
        CTest* pTest = (CTest* )tolua_tousertype(pState, 1, 0); 
        if(NULL != pTest) 
        { 
                delete pTest; 
        } 
        return 1; 
}

static int tolua_SetData_CTest(lua_State* pState) 
{ 
        CTest* pTest = (CTest* )tolua_tousertype(pState, 1, 0); 
        const char* pData = tolua_tostring(pState, 2, 0);

        if(pData != NULL &amp;&amp; pTest != NULL) 
        { 
                pTest-&gt;SetData(pData); 
        }

        return 1; 
}

static int tolua_GetData_CTest(lua_State* pState) 
{ 
        CTest* pTest = (CTest* )tolua_tousertype(pState, 1, 0);

        if(pTest != NULL) 
        { 
                char* pData = pTest-&gt;GetData(); 
                tolua_pushstring(pState, pData); 
        }

        return 1; 
}
</code></pre>

<p>看看这几个静态函数在干什么。 <br />
我要在Lua里面使用CTest，必须让Lua里这个CTest对象能够顺利的创造和销毁。<code>tolua_new_CTest()</code>和<code>tolua_delete_CTest()</code>就是干这个的。 <br />
<code>tolua_pushusertype(pState, pTest, “CTest”);</code> 这句话的意思是，将一个已经在Lua注册的”CTest”对象指针，压入数据栈。 <br />
同理，<code>CTest* pTest = (CTest* )tolua_tousertype(pState, 1, 0);</code>是将数据栈下的对象以(CTest* )的指针形式弹出来。</p>

<p><code>tolua_SetData_CTest()</code>函数和<code>tolua_GetData_CTest</code>分别对应CTest的SetData方法和GetData()方法。因为我们的SetData方法里面存在变量，那么同样，我们需要使用<code>const char* pData = tolua_tostring(pState, 2, 0);</code>将参数弹出来，然后输入到<code>pTest-&gt;SetData(pData);</code>对象中去，当然，你可以有更多若干个参数。随你的喜好。这里只做一个举例。</p>

<p>好了，你一定会问，这么多的静态函数，用在哪里？呵呵，当然是给Lua注册，当你把这些数据注册到Lua里面，你就可以轻松的在Lua中使用它们。 <br />
让我们看看，注册是怎么做到的。</p>

<p>还是在CLuaFn类里面，我们增加一个函数。比如叫做bool InitClass();</p>

<pre><code class="language-c++">bool CLuaFn::InitClass() 
{ 
        if(NULL == m_pState) 
        { 
                printf(“[CLuaFn::InitClass]m_pState is NULL./n”); 
                return false; 
        }

        tolua_open(m_pState); 
        tolua_module(m_pState, NULL, 0); 
        tolua_beginmodule(m_pState, NULL);

        tolua_usertype(m_pState, “CTest”); 
        tolua_cclass(m_pState, “CTest”, “CTest”, “”, tolua_delete_CTest);

        tolua_beginmodule(m_pState, “CTest”); 
        tolua_function(m_pState, “new”, tolua_new_CTest); 
        tolua_function(m_pState, “SetData”, tolua_SetData_CTest); 
        tolua_function(m_pState, “GetData”, tolua_GetData_CTest); 
        tolua_endmodule(m_pState);

        tolua_endmodule(m_pState);

        return true; 
}
</code></pre>

<p>上面的代码，就是我把上面的几个静态函数，绑定到Lua的基础对象中去。 <br />
<code>tolua_beginmodule(m_pState, “CTest”);</code>是只注册一个模块，比如，我们管CTest叫做”CTest”，保持和C++的名称一样。这样在Lua的对象库中就会多了一个CTest的对象描述，等同于string,number等等基本类型，同理，你也可以用同样的方法，注册你的MFC类。是不是有点明白了？这里要注意，<code>tolua_beginmodule()</code>和<code>tolua_endmodule()</code>对象必须成对出现，如果出现不成对的，你注册的C++类型将会失败。 <br />
<code>tolua_function(m_pState, “SetData”, tolua_SetData_CTest);</code>指的是将Lua里面CTest对象的”SetData”绑定到你的<code>tolua_SetData_CTest()</code>函数中去。</p>

<p>好的，让我们来点激动人心的东西。还记得我们的Simple.lua的文件么。我们来改一下它。</p>

<pre><code>function func_Add(x, y) 
  local test = CTest:new(); 
  test:SetData(“I’m freeeyes!”); 
  test:GetData(); 
  return x..y; 
end
</code></pre>

<p>我在这个函数里面，New了一个CTest对象，并进行赋值操作，最后把结果打印在屏幕上。你或许会问，最后一句不是x+y么，怎么变成了x..y，呵呵，在Lua中，..表示联合的意思，就好比在C++里面， string strName += “freeeyes”。原来觉得x+y有点土，索性返回一个两个字符串的联合吧。</p>

<p>好了，我们已经把我们的这个CTest类注册到了Lua里面，让我们来调用一下吧。修改一下Main函数。变成以下的样子。</p>

<pre><code>int _tmain(int argc, _TCHAR* argv[]) 
{ 
        CLuaFn LuaFn;

        LuaFn.InitClass();

        LuaFn.LoadLuaFile(“Sample.lua”);

        CParamGroup ParamIn; 
        CParamGroup ParamOut;

        char szData1[20] = {‘/0′}; 
        sprintf(szData1, “[freeeyes]“); 
        _ParamData* pParam1 = new _ParamData(szData1, “string”, (int)strlen(szData1)); 
        ParamIn.Push(pParam1);

        char szData2[20] = {‘/0′}; 
        sprintf(szData2, “[shiqiang]“); 
        _ParamData* pParam2 = new _ParamData(szData2, “string”, (int)strlen(szData2)); 
        ParamIn.Push(pParam2); 
        char szData3[40] = {‘/0′}; 
        _ParamData* pParam3 = new _ParamData(szData3, “string”, 40); 
        ParamOut.Push(pParam3);

        LuaFn.CallFileFn(“func_Add”, ParamIn, ParamOut);

        char* pData = (char* )ParamOut.GetParam(0)-&gt;GetParam(); 
        printf("[Main]Sum = %s./n", pData);

        getchar();

        return 0; 
}
</code></pre>
<p>如果你完全按照我的，你就可以编译你的工程了，运行一下，看看是啥结果？</p>

<pre><code>[CTest::GetData]I’m freeeyes!. 
[Main]Sum = [freeeyes][shiqiang]. 
</code></pre>

<p>看看，是不是和我输出的一样？<br />
呵呵，有意思吧，你已经可以在Lua里面用C++的函数了，那么咱们再增加一点难度，比如，我有一个CTest对象，要作为一个参数，传输给func_Add()执行，怎么办？ <br />
很简单，如果你对上面的代码仔细阅读，你会发现下面的代码一样简洁。为了支持刚才要说的需求，我们需要把Sample.lua再做一点修改。</p>

<pre><code>function func_Add(x, y, f) 
  f:SetData(“I’m freeeyes!”); 
  f:GetData(); 
  return x..y; 
end
</code></pre>
<p>f假设就是我们要传入的CTest对象。我们要在Lua里面使用它。（我们的CLuaFn都不用改，把main函数稍微改一下即可，来看看怎么写。）</p>

<p>LuaSample.cpp : 定义控制台应用程序的入口点。</p>

<pre><code class="language-c++">
#include “stdafx.h” 
#include “LuaFn.h”

int _tmain(int argc, _TCHAR* argv[]) 
{ 
        CLuaFn LuaFn;

        LuaFn.InitClass();

        LuaFn.LoadLuaFile(“Sample.lua”);

        CParamGroup ParamIn; 
        CParamGroup ParamOut;

        char szData1[20] = {‘/0′}; 
        sprintf(szData1, “[freeeyes]“); 
        _ParamData* pParam1 = new _ParamData(szData1, “string”, (int)strlen(szData1)); 
        ParamIn.Push(pParam1);

        char szData2[20] = {‘/0′}; 
        sprintf(szData2, “[shiqiang]“); 
        _ParamData* pParam2 = new _ParamData(szData2, “string”, (int)strlen(szData2)); 
        ParamIn.Push(pParam2);

        //只追加了这里 
        CTest* pTest = new CTest(); 
        _ParamData* pParam3 = new _ParamData(pTest, “CTest”, sizeof(CTest)); 
        ParamIn.Push(pParam3); 
       //追加结束 
        char szData4[40] = {‘/0′}; 
        _ParamData* pParam4 = new _ParamData(szData4, “string”, 40); 
        ParamOut.Push(pParam4);

        LuaFn.CallFileFn(“func_Add”, ParamIn, ParamOut);

        char* pData = (char* )ParamOut.GetParam(0)-&gt;GetParam(); 
        printf(“[Main]Sum = %s./n”, pData);

        getchar();

        return 0; 
}
</code></pre>
<p>好了，就这么点代码，改好了，我们再Build一下，然后点击运行。看看输出结果，是不是和以前的一样？ <br />
恩，是不是有点兴奋了？你成功的让Lua开始调用你的C++对象了！并且按照你要的方式执行！还记得我曾在第一篇文章里面许诺过，我会让你画出一个MFC窗体么？呵呵，如果你到现在依然觉得很清晰的话，说明你的距离已经不远了。</p>

<p>既然已经到了这里，我们索性再加点难度，如果我要把CTest作为一个对象返回回来怎么做？很简单，且看。</p>

<pre><code class="language-c++">int _tmain(int argc, _TCHAR* argv[]) 
{ 
        CLuaFn LuaFn;

        LuaFn.InitClass();

        LuaFn.LoadLuaFile(“Sample.lua”);

        CParamGroup ParamIn; 
        CParamGroup ParamOut;

        char szData1[20] = {‘/0′}; 
        sprintf(szData1, “[freeeyes]“); 
        _ParamData* pParam1 = new _ParamData(szData1, “string”, (int)strlen(szData1)); 
        ParamIn.Push(pParam1);

        char szData2[20] = {‘/0′}; 
        sprintf(szData2, “[shiqiang]“); 
        _ParamData* pParam2 = new _ParamData(szData2, “string”, (int)strlen(szData2)); 
        ParamIn.Push(pParam2);

        CTest* pTest = new CTest(); 
        _ParamData* pParam3 = new _ParamData(pTest, “CTest”, sizeof(CTest)); 
        ParamIn.Push(pParam3); 
        CTest* pTestRsult = NULL; 
        _ParamData* pParam4 = new _ParamData(pTestRsult, “CTest”, sizeof(pTestRsult)); 
        ParamOut.Push(pParam4);

        LuaFn.CallFileFn(“func_Add”, ParamIn, ParamOut);

        //接受Lua返回参数为CTest类型，并调用其中的方法。 
        pTestRsult = (CTest* )ParamOut.GetParam(0)-&gt;GetParam(); 
        pTestRsult-&gt;GetData();

        getchar();

        return 0; 
}
</code></pre>

<p>好，编译，执行。呵呵，看到了吧。</p>

<p>看到这里，如果你能看的明白，说明你已经对Lua如何调用C++接口，以及C++如何调用Lua有了一定的理解。当然，我写的这个类也不是很完善，不过做一半的Lua开发，应该是够用了。以以上的方式，你可以使用Lua驾驭你的C++代码。</p>

<p>好了，咱们既然已经说到这里了，再深一步，如果我的类是继承的，怎么办？呵呵，很好的问题。 <br />
比如，我的CTest继承了一个CBase，我的CBase又继承了一个。。。 <br />
在Lua里面，一样简单，我拿MFC的例子来举例吧，想必大家更喜欢看。 比如 CCmdTarget继承自CObject。 <br />
那么我在注册的时候可以这么写。<br />
<code>
tolua_cclass(tolua_S, “CCmdTarget”,      ”CCmdTarget”,      ”CObject”,            NULL); 
</code><br />
这个表示CCmdTarget继承自CObject对象。 <br />
当然，MFC里面还会有很多类型，比如常数，Lua一样能处理。 <br />
举个例子说。<br />
<code>
tolua_constant(tolua_S, “ES_AUTOHSCROLL”,   ES_AUTOHSCROLL); 
</code><br />
这样注册，你就可以在 Lua里面使用ES_AUTOHSCROLL这个常数，它会自动绑定ES_AUTOHSCROLL这个C++常数对象。<br />
呵呵，说了这么多，让我们来点实际的。我给大家一个我以前写的MFC封装类（由于代码太多，我变成附件给大家），你们可以调用，当然，如果你有兴趣，就用我的MFC类，来做一个你喜欢的窗体吧，当然，你必须要用Lua脚本把它画出来，作为最后的考验，呵呵。</p>

<p><img src="/images/HelloLua_01_03.rar" alt="附带全部工程（附带Lua及tolua++）" /></p>
]]></content>
  </entry>
  
</feed>
