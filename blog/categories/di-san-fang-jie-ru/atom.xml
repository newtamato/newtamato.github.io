<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:第三方接入 | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/di-san-fang-jie-ru/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-08-06T16:01:37+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[支付宝微信接入]]></title>
    <link href="http://www.newtomato.me/blog/2016/10/23/zhi-fu-bao-wei-xin-jie-ru"/>
    <updated>2016-10-23T14:28:52+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/10/23/zhi-fu-bao-wei-xin-jie-ru</id>
    <content type="html"><![CDATA[<p>一般情况下，想要在国内上Android平台，比如百度，360，小米等，都需要接入他们自己的SDK，里面集成了不少第三方的支付。所以只需要一次接入，就能搞定所有的支付接口，确实方便的很。（同时也有不少负面问题，接触就知道了）。但是一些小众平台，并不会提供这样的SDK，所以需要我们自己接入。PS：注意小众并不意味着市场小，反而他们提供的AUP值和留存率非常高。</p>

<!--more-->

<h3 id="section">开始动手 - 接入微信</h3>

<p>首先，需要注册一个<a href="https://open.weixin.qq.com/">微信开发者账号</a>，按照文档搭建一个应用，然后按照demo接入就可以了。但是在这中间有几个问题一定要注意。</p>

<ol>
  <li>开发者需要需要提交一些资料，申请认证的资质。这样才能够申请到支付服务。我们一开始想的简单了以为可以先尝试接入，然后上线在申请资质。结果发现不行。<strong>这一步走不通，下面即使跑通了他们的demo，也无法在自己的项目中运行。</strong></li>
  <li>
    <p>创建应用填写项目的包名和<strong>签名</strong>，此处的签名慎重，我们在这个地方也是吃过苦头。<br />
一般android的签名，想到的就是我们项目中使用<code>keytool</code>，<code>jarsigner</code>的方式给项目签名，但是这里不是的。<br />
这里的签名是微信自己的协议，我们将项目apk安装到自己的手机，然后在安装一个<a href="https://res.wx.qq.com/open/zh_CN/htmledition/res/dev/download/sdk/Gen_Signature_Android1f09c7.apk">微信的签名apk工具</a>，其中这个签名工具，输入自己应用的包名，即可生成一个32位签名。这个就是微信需要的签名。但是注意，我们平时coding的时候，一般是开发模式，debug模式，所以打包生成的apk有可能也是Debug模式，一旦换成Release模式，生成出来的这个签名又会不一样。<br />
因为为了保证Debug和Release模式签名一致。我们唯一要做的就是设置项目两种模式下面keystore是一样的。我们使用的是Android Studio，因此只要按照如下设置即可。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-10-23-release.jpeg" alt="release" /><br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-10-23-debug.jpeg" alt="debug" /><br />
这样生成出来的签名前后都是一致的。</p>
  </li>
  <li>
    <p>签名搞定之后按照他们的Demo修改我们的项目，还要注意一点的就是在支付完成之后的会调回到项目中，进入<code>WXPayEntryActivity</code>,这个我们可以完全拿过来放到自己的Project中，但是一定要注意保持他的目录结构。在AndroidManifest.xml中是如下的表示：<br />
  <code>&lt;activity android:name=".wxapi.WXPayEntryActivity" android:exported="true" 	andorid:launchMode="singleTop"&gt;
 &lt;/activity&gt;</code></p>
  </li>
  <li>测试的时候会遇到这样的情况，Demo也会遇到这种情况。就是第一次点击支付，弹出了微信的支付界面。但是第二次点击，就不会成功。然后删应用在安装，重复同样的错误。有些蒙圈不知所谓。最后Google了一大圈，才找到一个方法，<strong>删除微信的缓存</strong>。然后问题你就解决了。再也没有出现过。可能是运气好，看到别人即使用了这样的方法还是会出现问题。</li>
  <li>玩家支付的时候，要检测是否安装了微信，否则支付失败。</li>
  <li>问题各不相同，只要看准几条，你一定能解决他。包名，签名，应用名（微信回调的scheme）。</li>
</ol>

<h3 id="section-1">开始动手 - 接入支付宝</h3>

<p>相对于微信的一个模棱两可的签名概念，支付宝的公钥私钥就简单的多了。<br />
同样，这里也需要先申请一个开发者账号，和签约支付。<br />
需要的注意的问题有如下几点：<br />
1. 提交公钥。支付宝对用户的金钱往来是非常注意的。使用这种非对称式加密的方法。对用户的请求进行加密。防止被别人篡改数据。所以按照他的<a href="https://cshall.alipay.com/enterprise/knowledgeDetail.htm?knowledgeId=201602033418">文档</a>去生成公钥私钥就行。但是生成完了，得验证是否正确。在提交公钥的弹出框下面有个验证公钥链接，点进入后，将要我们用私钥生成的一个段密文粘贴进来验证。验证通过即证明我们的公钥私钥没问题。<br />
2. 私钥加密这种一定放到后端去做。他的客户端里面的代码只是给我们看流程使用的。</p>

<p>上述是我们遇到的问题，在已经有了开发者资者的情况下，总体花费了2天时间接入，比较顺利。希望遇到问题的你，不要着急，不要慌。好事多磨，多看文档和FAQ，总会解决的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整合FB广告步骤总结]]></title>
    <link href="http://www.newtomato.me/blog/2016/07/30/zheng-he-fbyan-gao-bu-zou-zong-jie"/>
    <updated>2016-07-30T12:09:50+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/07/30/zheng-he-fbyan-gao-bu-zou-zong-jie</id>
    <content type="html"><![CDATA[<p>上一篇讲到整合Google广告到项目中，这次我们讲讲如何将FB的广告整合进来。</p>

<p>当然，使用FB的SDK，同样也需要翻墙。</p>

<p>首先我们先到FB的官方网站上面注册自己的应用。<br />
然后找到Facebook Audience Network的入口。在这里注册自己项目的基本信息。<br />
最后能够得到一个placementId，这个是我们最终需要用到的东西。<br />
然后开始集成 Facebook Audience Network 的SDK。<br />
<!--more--></p>

<h3 id="ios">整合到ios</h3>

<p>Facebook提供了两种方案实现。<br />
<strong>一种方案是使用POD方式</strong>，<strong>一种方案是自行下载FBAudienceNetwork的SDK</strong>，然后解压缩，将framework拖拽到项目库中。我个人比较推荐使用pod方式，如果依赖的库升级了，使用<code>pod update</code>就可以及时更新。省事省力省心。</p>

<ol>
  <li>使用pod 方式。首先在自己的项目目录下面，新建一个<strong>podfile</strong>文件。写入<code>pod 'FBAudienceNetwork'</code>。</li>
  <li>在项目目录下面，输入如下命令行<code>pod install</code>，pod命令会自行检查相关依赖库，然后将其下载下来。并且重新生成一个新的工程文件<code>xxx.xworkspace</code>。</li>
  <li>打开xworkspace的工程文件。在UIViewController的继承子类中修改代码如下</li>
</ol>

<pre><code>class GameViewController: UIViewController ,FBAdViewDelegate {
	override func viewDidLoad() {
        super.viewDidLoad()
        let adView:FBAdView = FBAdView.init(placementID: "221630757971535_844119255722679",
        adSize: kFBAdSizeHeight50Banner, rootViewController: self)
        adView.delegate = self;
        adView.loadAd();
        self.view.addSubview(adView);
    }
    ...
</code></pre>

<ol>
  <li>然后运行代码即可。成功之后你会在屏幕顶端看到FB的广告。</li>
</ol>

<h3 id="android">整合到Android</h3>

<p>Facebook同样也是提供了两种方案实现。<br />
如果使用的是Android Studio，那么就可以使用<strong>gradle</strong>的方式，类似pod,也是写入配置，然后交由Android Studio来自行下载库。<br />
或者开发者自行下载sdk，解压缩之后将里面的AndienceNetwork.jar包拖到项目的libs文件夹下面。</p>

<p>接下来修改<strong>AndroidManifest</strong>文件，因为他需要有网络权限。因此需要增加如下两句权限配置</p>

<pre><code>    &lt;uses-permission android:name="android.permission.INTERNET"/&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/&gt;
</code></pre>

<p>然后在我们的MainActivity修改成如下代码</p>

<pre><code>public class MainActivity extends AppCompatActivity {

    private AdView adView;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        // Instantiate an AdView view
        adView = new AdView(this, "${从facebook申请到的placementId}", AdSize.BANNER_HEIGHT_50);

        System.out.print("R.layout.content_main");
        // Find the main layout of your activity
        RelativeLayout layout = (RelativeLayout)findViewById(R.id.content);

        // Add the ad view to your activity layout
        layout.addView(adView);
        adView.setAdListener(new AdListener() {

            @Override
            public void onError(Ad ad, AdError error) {
                System.out.print("on error to show ");
            }

            @Override
            public void onAdLoaded(Ad ad) {
                System.out.print("onAdLoaded ");
            }

            @Override
            public void onAdClicked(Ad ad) {
               
                System.out.print("onAdClicked");
            }

        });
			//第一次运行会在控制台输出此设备id，第二运行才会出现广告
        AdSettings.addTestDevice("%{设备id}");

        // Request to load an ad
        adView.loadAd();
    }
</code></pre>

<p>此时在运行Android Studio，就可以在设备或者模拟器上看到广告了。文档里面说模拟器是不需要设备id的，但是我没有设备id，在模拟器上是看不到的。加上设备id，就可以看得到了。</p>

<p>至此FB广告整合就结束了，是不是非常简单？但是在实际操作中总会遇到其他各色的问题。但是请放心，只要翻墙翻得好，问题都会好！</p>

]]></content>
  </entry>
  
</feed>
