<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:obb | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/obb/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-06-03T20:30:19+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cocos2dx和OBB的结合使用]]></title>
    <link href="http://www.newtomato.me/blog/2016/11/20/cocos2dxhe-obbde-jie-he-shi-yong"/>
    <updated>2016-11-20T18:04:13+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/11/20/cocos2dxhe-obbde-jie-he-shi-yong</id>
    <content type="html"><![CDATA[<p>上一篇文章我们讲到OBB文件的下载，但是没有说到如何使用。这一篇文章就讲解一下怎么使用。<br />
有两种方法可以使用OBB文件。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-11-20-2311393916-0.jpg" alt="=w300" /></p>

<h3 id="section">方法比较</h3>

<ul>
  <li>第一种方法，obb文件也是一种ZIP文件，我们可以解压缩obb文件，</li>
  <li>第二种方法，直接读取obb文件。<code>getFileDataFromZip</code>这样的方法就可以。</li>
</ul>

<p>这两种方法各有优缺点。<br />
第一种方法将文件解压缩到<code>getWritablePath()</code>文件夹下面。然后此路径<code>addSearchPath</code>到搜索路径中，我们不需要修改其他的代码就可以读取了。缺点是我们需要有一个解压缩的过程。尤其是obb过大的时候，解压缩耗费的时间也会很长。另外解压缩之后，请不要删除obb文件，否则下次进入，又要重新下载。另外这种方式还破坏了obb的加密性。另外这种方法是可行的，但Google并不推荐这种方式。<br />
第二种方式则需要修改部分c++代码。</p>

<p>因此我采用了第二种方法，对CCFileUtil做了一些修改。（主要说一下除了音效音乐之外的使用。）<br />
CCFileUtil是一个基类，在Android平台我们主要关注的是CCFileUtilAndroid.cpp文件。<br />
<!--more--><br />
### 方法梳理</p>

<p>CCFileUtil主要功能是检查一个文件是否存在，能否读取文件的内容。而我们把部分资源文件放到了obb之中，CCFileUtil需要知道这个地方，才能够从那里读取。</p>

<p>在java层，我们知道我们的obb存储的位置是在</p>

<pre><code>	int versionCode = "项目的versionCode"
	String apkName = Helpers.getExpansionAPKFileName(sContext,true,versionCode);
	return Helpers.generateSaveFileName(sContext,apkName);
</code></pre>

<p>通过JNI，将这个路径${obbPath}传递给c++，可以参考<code>CCFileAndroid.cpp</code>里面的<code>getApkPath()</code>函数。</p>

<pre><code>std::string resourcePath = getApkPath();
s_pZipFile = new ZipFile(resourcePath, "assets/");        
</code></pre>
<p>类似s_pZipFile，我们也生成一个${obbZipFile}，用于文件的查找。</p>

<p>然后将此路径<code>addSearchPath</code>到搜索路径中。通过阅读CCFileUtil.cpp文件我们得知检查一个文件的全路径主要是检测<code>isFileExist</code>函数。如果他证明存在此文件，就能获取到全路径。</p>

<pre><code>fullPathForFilename--&gt;getPathForFilename--&gt;getFullPathForDirectoryAndFilename--&gt;isFileExist
</code></pre>

<p>因此我们修改isFileExist文件，在里面根据文件的路径检查是否在。伪代码如下：</p>

<pre><code>bool CCFileUtilsAndroid::isFileExist(const std::string&amp; strFilePath)
{
	...
    bool bFound = false;

    if (strFilePath.find(${obbPath}) != std::string::npos)
    {
        if (${obbZipFile} &amp;&amp; ${obbZipFile}-&gt;fileExists(strPath))
        {
            bFound = true;
        } 
    }
	...
}
</code></pre>

<p>上面我们把obb文件做成了ZipFile对象，因此在doGetFileData中，就很容易得到文件的内容。伪代码如下：</p>

<pre><code>unsigned char* CCFileUtilsAndroid::doGetFileData(const char* pszFileName, const char* pszMode, unsigned long * pSize, bool forAsync)
{
    unsigned char * pData = 0;
    
...
    string fullPath = fullPathForFilename(pszFileName);
   
    // 获取obb文件
    if (${obbZipFile} &amp;&amp; fullPath.find(${obbPath}) != std::string::npos){
        
        if (forAsync)
        {
            pData = ${obbZipFile}-&gt;getFileData(fullPath.c_str(), pSize, ${obbZipFile}-&gt;_dataThread);
        }
        else
        {
            pData = ${obbZipFile}-&gt;getFileData(fullPath.c_str(), pSize);
        }
    }
    ...
  }

</code></pre>

<h3 id="section-1">总结语</h3>

<p>至此我们就能够读取obb里面的内容了。<br />
我的方法基于将obb看成了ZIP，模仿apk的方式去读取文件。将obb位置放到了搜索路径。ZIP对象存在且能够从里面读取文件，则表明文件存在。就可以读取他了。</p>

<p>这里面设计到JNI传递数据。其实这对于我们只要仿照APK路径传递就可以了。关于JNI具体的实现，还请看下一章节内容。</p>

<p>感谢你的阅读！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Android 扩展文件OBB的使用]]></title>
    <link href="http://www.newtomato.me/blog/2016/11/20/google-android-kuo-zhan-wen-jian-obbde-shi-yong"/>
    <updated>2016-11-20T16:13:41+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/11/20/google-android-kuo-zhan-wen-jian-obbde-shi-yong</id>
    <content type="html"><![CDATA[<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-11-20-IMG_06702.jpg" alt="" /></p>

<p>我们提交应用到Google Store的时候，Google要求应用的大小不能够超过100M，那么超过100M怎么办呢？<br />
那就用到了本章将要讲的东西<strong>OBB</strong>（扩展二进制文件）。</p>

<p>OBB文件，你可以看成是一个ZIP文件。我们提交母包APK的时候，在界面上也有提价扩展文件的地方。假设我们的母包APK是100M，OBB扩展是100M，用户在Google Store上看到或者下载的大小将是二者之和。<br />
<!--more--><br />
因此一个完整的流程是下载应用，是同时下载母包和OBB，但是Google文档中提到，他们并不保证OBB文件能够100%下载完成。这就需要我们在启动应用之后，程序去检测是否已经正确下载和验证有效性，如果是则可以进入游戏了。如果不是，那么就要重新下载OBB。</p>

<p>为什么要验证OBB的有效性呢？难道下载100%不行么？这是因为OBB安装的位置是暴露给用户的。用户可以打开修改这个文件。因此制作的时候要注意做好加密工作。</p>

<p>Google提供的jobb工具刚好有加密的参数，其参数的使用方法可以参考<a href="https://developer.android.com/studio/command-line/jobb.html">这里</a></p>

<pre><code>$ jobb -d /temp/assets/ -o my-app-assets.obb -k secret-key -pn com.my.app.package -pv 11
</code></pre>

<p>上面提到OBB是暴露给用户的，那么OBB具体是存放在哪里呢？<br />
在Google文档中提到是在</p>

<p><code>&lt;shared-storage&gt;/Android/obb/&lt;package-name&gt;/&lt;obb-name&gt;.obb</code></p>

<ul>
  <li>shared-storage 是通过<code>getExternalStorageDirectory()</code>获取的位置</li>
  <li>package-name是我们的包名，通过函数<code>getPackageName()</code>获得.</li>
  <li>obb-name则是有自己的命名规范。<code>[main|patch].&lt;expansion-version&gt;.&lt;package-name&gt;.obb</code></li>
  <li>因为Google能够让我们提交的obb只有两种类型，main和patch。main表示主要的obb包，patch是更新包的意思，例如我们经常更新的部分，可以做成patch，这样下次更新APP的时候，只要提交着一个patch就行了。</li>
  <li>expansion-version表示版本号，他们我们的AndroidManifest.xml里面的versionCode是一致的。</li>
  <li>pack-name和上面的解释一致。</li>
  <li>针对 Android 2.3 及以上版本的 APK，母包要求在100M以内，如果是 Android 2.2 及以下版本则要求在50M以内。</li>
</ul>

<h3 id="section">开始代码</h3>
<p>首先需要加入三个依赖库。<br />
1. <a href="https://developer.android.com/google/play/expansion-files.html#ZipLib">APK Expansion Zip Library</a><br />
2. <a href="https://developer.android.com/google/play/licensing/index.html">Application Licensing</a><br />
3. <a href="https://developer.android.com/google/play/expansion-files.html#AboutLibraries">Downloader Library</a></p>

<p>另外，Google的licensing在lollipop会有如下的报错：<br />
&gt;java.lang.IllegalArgumentException: Service Intent must be explicit: Intent { act=com.android.vending.licensing.ILicensingService }</p>

<p>解决方法：<a href="http://stackoverflow.com/questions/28305125/android-app-crashes-on-lollipop">http://stackoverflow.com/questions/28305125/android-app-crashes-on-lollipop</a></p>

<p>这三个库在<code>android-sdk文件夹/extras/google/</code>下面都有。只要导入到Eclipse或者Android Studio即可！<br />
导入之后会有部分报错情况，可以检查他们之间彼此依赖关系，清理在重新build即可。</p>

<p>接下来按照Google文档我们要集成DownloadService和BroadcastReceiver等，这一部分代码我们可以直接参考Google的实例工程<code>downloader_sample</code>，他的位置在<code>android-sdk文件夹/extras/google/market_apk_expansion/downloader_sample</code>。我们要做的就是修改如下两个函数</p>

<pre><code>public static final String BASE64_PUBLIC_KEY = "YourLVLKey";
// You should also modify this salt
public static final byte[] SALT = new byte[] { 1, 42, -12, -1, 54, 98,
   -100, -12, 43, 2, -8, -4, 9, 5, -106, -107, -33, 45, -1, 84
};
</code></pre>

<p>BASE64_PUBLIC_KEY是我们创建Google应用的时候，会自动生成的key，SALT则是需要我们修改一下即可使用。</p>

<p>现在我们使用downloader_sample的包名和version生成一个obb文件和apk文件，然后提交。等待生效之后，我们要开始测试。</p>

<h3 id="section-1">如何测试</h3>

<p>按照上面的方法我们做好obb提及到Google开发者平台后，等待beta版本生效之后，就可以在本地测试了。<br />
复杂的测试方法是，需要我们登录Google Play Store找到beta应用下载测试（前提条件使我们要加入测试组，才能看到这个应用）。</p>

<p>相对简单的方法如下:</p>

<pre><code>adb push xxx.obb /Android/obb/${package-name}/
adb install xxx.apk
</code></pre>
<p>启动我们的应用，检测是obb已经下载，验证obb有效性。downloader_sample的启动界面会提示我们此时已经Success完成。</p>

<p>这两种方式都可以使用，也不必每次都重新提交到Google那里了。此时就可以连着设备直接debug调试了。</p>

<h3 id="section-2">结束语</h3>

<p>走通这个流程中，我们遇到了不少奇怪的问题，比如Google无法验证身份，（检查是否加入了测试组，设备上的Google账号是否正确等，缓存是否清理），比如没有检测到obb文件，（网络是否正常，能否连接到Google play Store等），文件的下载之后大小有问题等。因此建议你们，手里要有一个可以翻墙的VPN才是事半功倍的利器啊。</p>

<p>至此OBB的工作已经完成，站在Google巨人的肩膀上，省去了我们不少力气。下篇文章，我将结合cocos2dx来讲一下怎么使用下载下来的obb文件。</p>

]]></content>
  </entry>
  
</feed>
