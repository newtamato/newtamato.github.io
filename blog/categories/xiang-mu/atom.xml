<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:项目 | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/xiang-mu/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-10-08T17:35:20+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[记最近遇到最头疼的一个Bug]]></title>
    <link href="http://www.newtomato.me/blog/2017/03/12/ji-zui-jin-yu-dao-zui-tou-teng-de-bug"/>
    <updated>2017-03-12T16:15:46+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/03/12/ji-zui-jin-yu-dao-zui-tou-teng-de-bug</id>
    <content type="html"><![CDATA[<h3 id="section">前记</h3>

<p><img src="https://cdn.ruguoapp.com/FkHR-5cSU8UK1upmG4x67UQCKWZI" alt="" /><br />
这个将要说的bug并不复杂，但是却影响了一大波的用户。后果很严重。而引发这个问题的原因却是错综复杂，千丝万缕。<br />
只能说一坑还有一坑深。<br />
<!--more--></p>

<h3 id="section-1">问题背景交代</h3>

<p>问题的背景是这样的，我们在开发过程中，从主干开了一个分支，针对Google平台做优化，然后基于某些原因，这些优化的提交一直没有合并回主干分支。<br />
为此我们相当于保持了两个主干，每种功能都会在这两个分支都做合并。每次发布热更新，都需要发布两种情况，一种是主干分支的更新，一种是专门针对Google的更新。</p>

<p>直到某一天，我们决定再次出一个完整的apk包，提交给平台，负责出APK包的同事，以Google为准做了包，因为我们分析发现Google是比较完整的代码，且对底层做了部分优化，是没有问题的。并且当时测试APK没有任何问题。</p>

<p>但是这样做了之后，我们却忘记将Google 分支的优化提交合并到真正的主干。导致这部分代码丢失。这是最大的错误。比如当时有个类文件A，里面原先有个函数<code>doAction()</code>,但是在主干上他没有这个函数。</p>

<h3 id="section-2">问题开始发生了</h3>

<p>这之后，我们又有新的功能，准备热更新出去。于是这里面的更新在新的APK包里面出现了问题。出问题的正式上面的A文件，A被更新出去，但是A没有这个函数，导致原先调用这个文件的地方都报错。</p>

<p>到此，你们会疑问，为什么测试没有发现呢？那是因为这中触发bug的情况很特殊，并不是百分百触发。所以比遗漏了。</p>

<p>当时已经发现了问题的根本原因，于是便从何合并优化提交，做成热更发出了。</p>

<p>以为问题到此结束，哎。</p>

<h3 id="section-3">问题开始发生了</h3>

<p>之后我们发现部分用户突然进不去游戏了，止步于游戏的启动页面，然后就崩溃。</p>

<p>这可头疼死了，只能知道是客户端崩溃，服务器还没有收到任何的请求。可以连接<code>monitor</code>也没有任何特殊的提示。<br />
幸运的是，在新出的APK包上没有这个问题，只在旧有的APK上才有这种问题。这也是背景之一，我们的整包APK更新，并不是强制要求用户更新。于是外面有的时候会出现一个平台多个整包。<br />
在这一点线索的情况的下，我们最终发现此次合并的优化提交有一部分是对字体的优化。刚好字体默认名字做成了配置。而初始化字体配置的地方在优化中移动到了一个敏感的文件中。这个文件只会在出整包的时候才有用，在自动更新的时候，是不会更新出去的。这是早期的约定。历史已经被遗忘。竟然没有人记得了。</p>

<p>问题正是在这里，老的APK由于没有这个字体配置的初始化，导致面板全部崩溃。用户自然进不去了。</p>

<h3 id="section-4">后记</h3>

<p>这次问题，是我们开发流程出现了问题，本身可以避免。这让我反思了许久。我们存在的问题。</p>

<ol>
  <li>平台版本管理混乱，依靠人工记忆。没有任何地方记录当前那些版本可以用。</li>
  <li>合并代码竟然没有提前做。没有对更新做充分考虑。</li>
  <li>测试不充分。</li>
  <li>没有收集crash崩溃的日志系统。这样我们在发生了问题的时候束手无策。</li>
</ol>

<p>问题带来的教训虽然惨痛，但是为此我们亡羊补牢，时刻注意。尽量避免下次再掉进同样的坑里。</p>

<p>而此刻我的心情：<br />
<img src="https://cdn.ruguoapp.com/FgXsKJOSxZSKIyRVLlhA1TuhcyGW" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[组件化管理数据和相关的展示]]></title>
    <link href="http://www.newtomato.me/blog/2016/06/06/zu-jian-hua-guan-li-shu-ju-he-xiang-guan-zhan-shi"/>
    <updated>2016-06-06T00:28:50+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/06/06/zu-jian-hua-guan-li-shu-ju-he-xiang-guan-zhan-shi</id>
    <content type="html"><![CDATA[<h2 id="section">这是个什么东西？</h2>

<p>首先，这是我很早就想到的一个想法。只是前期项目工期紧张，只是专注于功能的实现，虽然有想法，但是没有付出实现。<br />
现在回头来想，大部分功能都有相似的地方，就是数值物品获得和展示的地方，这种地方是完全可以抽象出来做成一个通用的模块。</p>

<p>奖励如果占据背包格子，需要给予提示，或者根据条件（即参数）决定是否要清理背包。或者得到数据达到了上限，是否要弹出提示等等。如果顺利得到物品或者数值，就要播放相关的动画。<br />
比如物品获得，默认有一套自己的动画，除非有特殊需求（即参数）来播放其他动画。<br />
比如数值获得，默认也是有自己的动画。<br />
这些基本的东西，在早期的时候，应该是有策划产品那边就已经有了一些定论的。</p>

<p>而这个模块就是解决上述需求。可想而知，一旦完成这个功能，不论多少功能，都只需要调用它即可。省时省力。低碳环保！<br />
<!--more--><br />
这样只要我们获得任何东西，调用一下这个模块就可以了。</p>

<h2 id="section-1">这个模块如何设计?</h2>

<p>首先是输入接口API和参数设置。<br />
以我们的情况介绍，接口如下</p>

<pre><code>@param reward,物品数据
@param animationData, Optional，是否需要不同的动画，如果需要则按照 [协议="动画名称"] 这样的结构传入
setRewardData(rewards,animationData)

</code></pre>

<p>rewards,即传入给他一些数据，数据要符合一定的规范。在我们项目中我们使用的是如下的规范<br />
<code>
[
	"default":[{itemName:"金币",itemCount:100},...],
	"heroes":[{itemName:"英雄的名字",itemCount:2,itemData:"英雄具体的数据"},...],
	"items":[{itemName:"道具或者材料等名字",itemCount:1,itemData:"道具具体的数据"},...],
	"其他协议":[{itemName:"",itemCount:1,itemData:""},...],
]
</code><br />
再此解释一下：</p>

<ol>
  <li>default:表示的是基础数据，类似用户的金币，银币，经验值等。</li>
  <li>heroes:是我们项目中抽到的卡片。因此会根据heroes数组的长度展示多少张卡片。</li>
  <li>items: 是我们项目中物品道具一类的东西，比如武器，材料一类的东西，或者这些也是有一套相似的动画。因此相似，所以我放到了同一个协议里面。</li>
  <li>其他协议: 看到上面三个例子，大家应该理解，我是把default,heroes,items看成是一种协议，就是动画相似的数据会被我放到一起。如果数据格式相同，比如都是武器，但是获得的时候有不同的协议，那么就可以分到两个不同的分组里面。</li>
</ol>

<p>有这些也因此会有一个对应的动画的映射配置。animationData就是做这个用的，如果不传参数，他自己有一套默认的动画配置，如果传入，那么就以传入的参数为准，这样我们可以根据策划产品那边的需求做自由的设定。</p>

<pre><code>[
	"default":"数值飞到用户头像上的动画",
	"heroes":"展示卡片获得动画",
	"items": "展示物品先获得，然后飞到背包中等动画",
]
</code></pre>

<h2 id="section-2">遇到的现实问题有哪些？</h2>

<p>看了上述的解释，似乎挺完美，这么干吧。但实际上，<strong>愿望是美好的，现实却总是骨感</strong>。<br />
我们针对所有的数据做了自己的对应的动画库。但是实际上遇到的问题却总是让我怀疑自己是不是该放弃使用这个模块。</p>

<p>我把遇到的问题列出来有如下：</p>

<h3 id="section-3">问题1</h3>

<p>我们支持播放获得多个物品数据。比如即获得数值道具，又能够获得物品。如果数值达到了上限。物品便不能够领取。即有优先级问题，且能够打断后续的操作。</p>

<p>###解决方法:</p>

<p>为此我们的改变了一些设计，将每一个物品数据的更新都是一个独立的逻辑操作，比如上面的default，这个逻辑结束的时候需要向外传递一个结果数据，告诉模块管理器，是否可以继续向下播放。如果不可以则将整个模块结束。同时负责告诉模块管理器为什么结束。然后展示给用户。</p>

<h3 id="section-4">问题2</h3>
<p>我们有一个物品占背包格子的逻辑（GotItemAction）。此逻辑一旦触发，会提示用户是否去清理或者扩容背包。用户决定清理，在弹出清理背包的面板。操作结束之后，才会继续其他数据获得的动画。<br />
这就意味着此处的获得逻辑，能够操作一些面板，而不是单纯的动画播放。但是面板管理器的权限不是肯定能拿得到。如果在其他项目没有面板管理器，那么只能关闭清理的逻辑，通知用户物品无法领取。但是有的物品有暂存功能，有些没有，一旦扔掉，弹出的提示是不同的。<br />
有暂存，提示就是，物品已暂存，请自行清理再来领取。<br />
没有暂存，提示，物品已经丢失。太可惜了。<br />
###解决方法:<br />
我们首先为此只能做了一个面板的清理的逻辑操作（CleanBagLogicAction）<br />
我们需要传递给面板几个参数，比如要清理多少个格子出来才可以。目的是为了获得什么物品。用户可以清理也可以选择扩容后继续清理等等逻辑。<br />
在它里面把拿到了面板管理器的权限。这样就可以弹出面板。</p>

<p>GotItemAction负责调用CleanBagLogicAction,然后CleanBagLogicAction结束操作之后会通知GotItemAction，GotItemAction再次做相同的逻辑检查空间。直到用户成功被物品领取了。如此往复逻辑才会结束。<br />
但是不同的提示信息，怎么处理呢？这个模块其实并不清楚，物品的来源？怎么决定提示呢？所以我们将这个难题扔给了调用者。扩展了<code>setRewardData</code>接口，增加了第三个参数extraData。他也是按照不同的动画协议。在里面增加一些额外的信息。<br />
如果用户因为库存满而不能领取，应该提示什么信息。用户基本数据达到上限，应该给予什么提示。这些之类的。</p>

<p>后面我们发现extraData，简直太好用了。因为我们还遇到了更复杂的情况。</p>

<h3 id="section-5">问题3</h3>
<p>我们获得英雄，获得数值，不仅仅要播放动画和提示，还要事实的更新界面上的数据。也就是说整个物品更新逻辑还没有做完，做一部分界面有需要的地方就要更新。<br />
比如获得了英雄，那么英雄飞到界面某个地方，然后落在在UI上有一个播放一个attack的动作。<br />
如果是独立于UI的动画，就不会有任何问题。UI和动画是独立分开的，播玩之后就可以删除，资源释放。但是此处如何更新UI呢？</p>

<h3 id="section-6">解决方法</h3>
<p>由于UI的不确定性，A面板更新数据，B，C面板变化英雄等，所以如果使用回调函数，是最合适的。就是需要把会掉函数传递给extraData，结构大概如下<code>callBack:[default = "A面板回调函数",...]</code>。为此我们的开发同学每次在调用这个API的时候，要写一大堆的参数，令人惨不忍睹！<br />
更糟糕的时候，有的时候发生意外，A面板已被销毁，造成回调函数失效。<br />
所以轮到我们思考更好方法的时候，那就是使用事件的方法。<br />
在任何逻辑做完之后，向外派发一些事件。对此事件感兴趣的面板可以做监听。但是一定要处理好这些事件的remove操作。不然会出现别的麻烦。<br />
这样就可以对面板做一些针对性的更新。A关系基本数据default更新。他监听default的事件。然后更新一下界面即可。<br />
B关心英雄，那么受到这个事件之后，直接从Player身上拿到最新的数据，展示出来即可。</p>

<h2 id="section-7">结束语</h2>

<p>以上三个问题，是我印象最深刻的问题。实际上还有部分问题是比较琐碎的。这些问题迫使我修正自己的问题。让这个模块变得更加健壮。即使以后移植到别的项目中也能很快的适应。</p>

<p>写了一大长串，希望能给你带来一些思想上的改变。脱离每日的重复劳作。</p>

]]></content>
  </entry>
  
</feed>
