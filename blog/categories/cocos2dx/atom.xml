<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:cocos2dx | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/cocos2dx/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2019-01-06T14:39:27+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何使用tableView制作一个高度可以变化的列表]]></title>
    <link href="http://www.newtomato.me/blog/2018/05/13/tableviewcelldong-tai-kuan-gao"/>
    <updated>2018-05-13T16:46:54+08:00</updated>
    <id>http://www.newtomato.me/blog/2018/05/13/tableviewcelldong-tai-kuan-gao</id>
    <content type="html"><![CDATA[<h2 id="section">前面的话</h2>

<p>cocos引擎中提供的CCTableView组件，这个组件由于使用缓存池，创建可见对象，因此性能上相比后来的ListView高出很多。因此在做列表的时候，我一直偏向于使用TableView，但是在一次讨论中发现他有一个缺点就是只能创建cell宽高一致的列表。对于变化的cell则支持不那么友好。</p>

<p>于是抽时间看了一下TableView的实现。就有了今天的这篇分享。<br />
我要分享的主题就是如何使用TableView制作一个TablewCell高度变化的列表。<br />
闲话不多说，直接进入正题吧。<br />
<!--more--></p>

<h2 id="section-1">正题</h2>

<p>列表是有很多Cell组成，一般情况下Cell都是相同的显示对象。例如你手机里面的通讯录。或者微信里面好友列表。但是也会有Cell高度不一样的列表。例如微信的朋友圈。他也是TableView，不是cocos的，应该是OC的，或者是swift。但是每个Cell会根据内容自动适配宽高。然后影响列表。</p>

<p>cocos的TableView也可以实现这个效果。而且不需要修改c++的任何代码。听我道来。<br />
从TableView的代码我们可知，他能做到快速滑动是因为它将所有cell的位置先计算出来。在滑动的时候，根据位置计算index然后获取数据，渲染这个cell。<br />
而计算位置，是根据每一个cell的index外加这个cell的宽高。<br />
这些规则并未限制，cell的宽高一定要相同。</p>

<p>在创建Cell的时候，TableView会提前向我们询问这个cell的宽高。</p>

<pre><code>tableView:registerScriptHandler(handler(self,self.onCellSizeForTable),cc.TABLECELL_SIZE_FOR_INDEX)
</code></pre>

<p>因此我们要做的就是在内容尚未确定的情况下就要计算出宽高，然后传递给TableView。<br />
就是这个样子。现在让我们看看，这样的TableView能做出的效果。</p>

<p><img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2018-05-13-tableview_different_height2.gif" alt="tableview_different_height2" /></p>

<p>好像还可以，并且触摸事件也不受一点影响。</p>

<p>实际上计算出宽高的方法并不复杂。从性能角度考虑可能会有一些浪费。具体需要根据情况来判断。<br />
cell计算宽高，可以根据每个元素动态计算宽高。从上面gif中变化的是文本内容。我们只需要根据文本的变化，然后加上图片的宽高就可以计算出来cell最终的高度。<br />
而文本框的宽高和字体，确切说渲染文本框的引擎相关。我们仅需要接触引擎帮我们渲染一次文本，但是并不把他添加到舞台上。渲染结束之后直接就能拿到宽高。内存即可回收。</p>

<p>代码如下：</p>

<pre><code>local text = cc.LabelTTF:create("",fontName, fontSize)
text:setDimensions(cc.size(400,0)) --400是我这里设计的要求。
text:setString(items[i].msg)
local size = text:getContentSize()
</code></pre>

<p>此时的size就是我们要求出来的宽高。剩下的工作就简单了。<br />
接下来，可以看看我们动态增加cell之后的效果吧。<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2018-05-13-tableview_different_height3.gif" alt="tableview_different_height3" /></p>

<p>使用<code>insertCellAtIndex</code>函数，外加<code>setContentOffset</code>即可实现上述效果。</p>

<h2 id="section-2">结语</h2>

<p>分享到这结束，我提供的是一种思路。里面还涉及一些cell元件的位置动态计算。比较细节，就没有特意说明。如果大家有更好的方法，还希望多多交流！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大富翁项目总结]]></title>
    <link href="http://www.newtomato.me/blog/2018/03/09/2017xiang-mu-zong-jie"/>
    <updated>2018-03-09T17:53:10+08:00</updated>
    <id>http://www.newtomato.me/blog/2018/03/09/2017xiang-mu-zong-jie</id>
    <content type="html"><![CDATA[<p>年前1月份我们上线了一款大富翁游戏。他的玩法是传统的大富翁玩法+实时多人在线+陌生人匹配。这款游戏从立项到上线，设计思路变化过一次。小变化无数。历时半年左右。虽未取得大成功。但是对于我们团队而言，是一次很好的磨合历练。</p>

<p>之所以采用实时socket连接，就是希望玩家能够真实的感受有人在和他一起玩。希望通过玩家产生内容。增加黏性。提到socket实时游戏，常见的比如魔兽世界，王者荣耀以及绝地求生等（他们使用的实时技术是帧同步或者状态同步，均比我们自己项目中的同步要复杂的多，大富翁的规则是每个回合只有一个人才能够摇筛子，因此需要数据量相对轻量级）。如果大家怎么更好的实时同步感兴趣，建议去腾讯学院查找些干货，这里就不展开说了。</p>

<p>我这里主要总结项目的架构和遇到的问题。<br />
<!--more--></p>

<h2 id="section">概要介绍</h2>

<p>大富翁有很多系统杂糅一起。基础系统是土地买卖，更新归属权。玩家金钱，玩家状态变化。其他系统，股票系统，神仙系统，新闻命运等道路事件系统都是通过影响基础系统来增加玩法的趣味性。所以当玩家摇筛子走到一块没有任何归属土地的时候，需要判断很多情况。</p>

<ul>
  <li>是否有足够的金币。有，准备数据告诉服务器可以购买。（A数据包）</li>
  <li>否，是否有土地公。有，准备数据告诉服务器，我有土地公加成。（A数据包）</li>
  <li>有无恶狗等土地事件。有，准备数据，告诉服务器，恶狗附身。（B数据包）</li>
</ul>

<p>上述简单分析，也就是在这个WaitHere的逻辑中，我们需要调用Player模块，神仙模块，以及道路事件模块，最终将分析出的结果A，B包发给服务器。</p>

<p>在我们的逻辑中，数据模块是耦合在一起的（数据模块自身有对应的接口测试）。而对应逻辑模块自身会通过我们下面提到的自动化测试来验证正确性。</p>

<p>使用的模式有，观察者模式，代理模式，单例模式，状态模式等。使用MVC的思想对业务进行分离。</p>

<h2 id="section-1">请求响应同步模块</h2>

<p>把大富翁的客户端看成一个黑盒子，只有输入输出的话。输出是发出去的请求Request。输入是来自服务器的响应Response。</p>

<p>输出是将玩家的操作整理成请求数据。这个模块暂称之为<strong>“玩家操作模块”</strong>例如摇筛子，购地，升级，使用卡片等。<strong>“响应模块”</strong>就是处理请求，将“决定之后的结果”同步给所有玩家。摇出筛子数字，决定了购地，地块归属发生了变化等。这部分采用状态模式，根据服务器发来的不同状态，进入不同模块，更新数据，更新显示。</p>

<p>这样做的好处在于，数据最终都是以服务器为准。（客户端也会保存一份数据，用于展示。）请求出现问题，在服务器那边会进行校验判定。然后以错误码的形式发送过来。</p>

<p>服务器的响应一个同步队列。比如既能够土地归属发生变化（状态101+数据），又能让神仙附身（状态102+数据）等等。此处便采用状态模式。每种状态处理器各自分开互不影响。状态处理器挨个存到队列中，一个执行结束，执行下一个。知道全都执行结束。然后通知游戏，此次同步结束。解冻“玩家操作模块”，允许玩家继续操作游戏。另外每个状态处理还可以定制自己需要的参数。和服务器开发同学将协议商定下来就行。</p>

<h2 id="section-2">寻路模块</h2>

<p>大富翁类型的地图有自己的特殊性。首先地图有顺时针逆时针的方向要求。有多条主路和部分支路的区分。每条主路会成为一个闭环。玩家不能主动进入支路，只能被动进入。所以对策划同学给的地图我们需要按照顺时针方向制作号码标记。1，2，3，4等。在主路分叉路口上增加协议，例如2_main_1_1,2_main_1_2,2_main_1_3,…主路第一条岔路从主路编号2开始，2_main_2_1，2_main_2_2，2_main_2_3,…这是主路的第二条岔路也是主路编号2开始。说明在主路2号这里有两条岔路。<br />
至于分支，将main改为branch。<br />
按照这样的协议，就可以通过深度优先算法，求算出一条主路的路径。<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2018-03-09-15201639745417.jpg" alt="=w300" /></p>

<h2 id="section-3">断线重连模块</h2>

<p>由于网络环境的问题，游戏会经常断线。但是实际房间并未销毁。所以当玩家重新进入游戏。理论上应该可以重新加入游戏。<br />
此时最大的问题，就是玩家进入游戏需要初始游戏，但是此刻服务器有可能已经开始又数据发送多个更新包过来。所以此刻并不能够立马开始更新游戏。因此这些数据先暂存起来等待初始化完成在更新游戏。</p>

<p>这样数据不会丢失。但是如果缓存的数据过多，又会在更新的时候，造成播放时间较长。伤害了用户体验。因此这里可以将缓存数据做“压缩”处理。直接整合数据，将最后结果更新出来就行，而不用挨个更新。</p>

<p>断线重连遇到一个棘手的问题:<br />
玩家ABCD正处于某一个第三方模块中。模块的初始化时机在进入模块开始。离开模块的时候做清理操作。<br />
此时，某个玩家C突然掉线，待他断线重进的时候，这个第三方模块并未结束。但是服务器不在派发C的进入通知，导致C客户端并不会初始化模块的事件监听。于是游戏模块内做的数据更新通知，在C断线重连之后都不会再做。导致C的数据和其他玩家数据不一致。<br />
为此，只能讲第三方模块所需要用到的初始化都放在主模块中。</p>

<h2 id="section-4">自动测试模块</h2>

<p>这里的自动测试是通过对输入模块进行封装。原先由于用户决定的点击转成系统随机选择。<br />
对任何地块，均可有对应的决策。例如：<br />
	空地。他的决策是是否购地。<br />
	不是自己的土地，但是有归属，则决策是缴纳过路费。<br />
	是自己的土地，决策就是是否升级。<br />
	是自己的研究所，决策是是否要开始研究卡片。<br />
	不是自己的土地，但是身上有土地公。决策就是先付过路费，在占领别人的土地。<br />
以上的例子，均可证明自动测试中，决策可以有系统来做。一旦明确如此，就可以配置测试。</p>

<p>所以流程就是：摇筛子，寻目标地，然后进行决策。更新结果，继续摇筛子，如此循环往复。<br />
这种方式帮助我们测试功能模块是否正确。也节省了大量的测试工作。</p>

<h2 id="section-5">遇到的问题</h2>

<p>大富翁看似简单，实际上在开发中，我们遇到了不少问题。举几个例子：</p>

<ul>
  <li>玩家状态切换，在线和离线状态切换。</li>
  <li>控制权切换，以及在A控制关卡的同时，使用了陷害卡导致B触发了被动卡操作，A的操作倒计时停止，且不能操作关卡，B开始操作倒计时。直到B选择了结果，A的操作倒计时才继续。</li>
  <li>玩家断线重连。这里包括玩家自己杀死游戏重新进入。也包括玩家压入后台，在进入游戏之后，游戏session失效，重新自动登录。两种情况不同在于，第一种是开启了新的游戏进程。第二种是在当前游戏进程，需要清空数据和事件。</li>
  <li>闭包函数当中的upvalue属性要注意。</li>
  <li>场景资源在制作的时候，关卡宽高大约4000x3000，如果使用RGBA8888加载，大约内存会暴涨48M以上。为了能够在低端机上加载进来。所以裁成4张图，逐帧加载。采用pvr(ios)和pkm(android)来分别加载。会有明显改观。</li>
  <li>背景静态图片会带来内存带来压力。而建筑和玩家形象。使用骨骼动画制作，他们带来CPU的压力。初期测试，fps均值在30以上。但是卡顿的感受也存在。为此将建筑替换成序列帧动画。但是为此增加了包体。同屏的顶点数和drawcall有降低。</li>
  <li>美术资源维护出现问题，造成cocos动画工程丢失。只剩下导出文件。为此专门写了一个工具。用于将cocos工程还原。并支持序列帧的导出（部分导出有bug，以后改进。）。但是只能在手机上运行。电脑上总是出现黑边。使用的cocos3.6版本。未深入研究原因。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为游戏增加记录回放功能]]></title>
    <link href="http://www.newtomato.me/blog/2017/10/08/hui-fang"/>
    <updated>2017-10-08T17:29:29+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/10/08/hui-fang</id>
    <content type="html"><![CDATA[<p>为游戏增加回放功能的主要目的是可以将原来的操作重新播放一遍，很快的定位问题。尤其的不易复现的问题。<br />
早先定位不易复现的问题采用的方法是让服务器记录玩家的操作请求。<br />
如果发生问题，可以根据请求日志做分析。<br />
这种方案一般是用在游戏上线之后。在上线之前，只能靠开发和测试同学大量的测试。<br />
所以当我看到cocos2dx增加一个控制台（<code>Console</code>）类的时候，就突发奇想，是否可以在前端做一个简单的记录回放。<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2017-10-08-柴犬.jpg" alt="柴犬" /><br />
柴柴帮忙镇楼！<br />
<!--more--></p>

<h3 id="section">原理和问题</h3>

<p>记录回放不是游戏业务逻辑，不需要增加额外的代码。它独立于游戏存在。记录玩家的点击操作。保存到本地文件中。然后在游戏启动之后，读取文件内容，挨个播放玩家的点击。以此实现回放功能。</p>

<p>这里涉及到的问题是：</p>

<ol>
  <li>玩家上次操作的游戏和本次回放的游戏内容要一致。现在游戏为了增加趣味性，很多采用随机。比如道具物品的生成，如果不一致，回放肯定出问题。</li>
  <li>记录的点击位置是以当前设备分辨率为准。如果回放设备和当前设备分辨率不一致。位置信息不对，点击也会出问题。</li>
  <li>即使解决了上面两个问题，如果上次点击和这次点击之间用时10s钟（可能是网络卡住，可能是性能出现问题）。当回放的时候，挨个触发的点击之间时长小于10s中，那么点击就不能正确触发。依然会出现问题。</li>
</ol>

<p>这三个问题，最容易的是第二个，只要保证在同一分辨率的设备上播放即可。<br />
第一个问题，我们需要和服务器同学沟通，让他对关卡做一个镜像。开发成本较高。只好放弃。<br />
最后我们在开发模式下，通过客户端的缓存，将服务器的数据全部保存下来。回放的时候，完全是客户端在自己播放。将与服务器请求的数据也缓存起来。虽然开发成本高了，但是基于此，没有任何网络请求的压力，第三个问题也有了解决方案。<br />
第三个问题还涉及性能问题，要快速解决，我们想到的是用一台高端配置的设备，或者直接在模拟器上播放。</p>

<p>至此大问题都已经解决，剩下的就是如何实现回放了。</p>

<h3 id="cocos2dxconsole">cocos2dx提供的console为基础</h3>

<p>在cocos2dx 3.x版本，增加了一个<code>Console</code>功能。提供的基本功能如下：</p>

<pre><code>
{
    createCommandAllocator();
    createCommandConfig();
    createCommandDebugMsg();
    createCommandDirector();
    createCommandExit();
    createCommandFileUtils();
    createCommandFps();
    createCommandHelp();
    createCommandProjection();
    createCommandResolution();
    createCommandSceneGraph();
    createCommandTexture();
    createCommandTouch();
    createCommandUpload();
    createCommandVersion();
}
</code></pre>
<p>在项目中增加对端口5678的监听即可。</p>

<p>lua代码：</p>

<pre><code>cc.Director:getInstance():getConsole():listenOnTCP(5678)
</code></pre>

<p>c++代码</p>

<pre><code>auto console = director-&gt;getConsole();
console-&gt;listenOnTCP(5678);
</code></pre>

<p>项目启动之后，打开终端：</p>

<pre><code>nc localhost 5678
</code></pre>

<p>如果是在手机上启动，则需要手机和电脑连在同一个局域网之内。然后查看手机的ip地址。替换上面的localhost。</p>

<p>敲入命令之后，终端显示connect success。然后输入<code>help</code>。此时cocos2dx提供的定制命令全会罗列出来。</p>

<p>而我们要使用的就是<code>touch</code>命令。</p>

<h3 id="section-1">保存点击位置和回放</h3>

<p>保存的位置，应该是什么位置呢？</p>

<p>因为我们使用的是touch命令，而他需要的位置信息，是以设备坐标系为准的。也就是原点坐标在左上角为准。而cocos2dx的坐标系是以opengl为准，左下角是原点。</p>

<p>所以我们要将点击的opengl坐标转为设备坐标。<br />
这个转换，cocos2dx也提供了对应的接口。代码如下：</p>

<pre><code>Vec2 Director::convertToGL(const Vec2&amp; uiPoint)
{
    Mat4 transform;
    GLToClipTransform(&amp;transform);
    ...
    return Vec2(glCoord.x * factor, glCoord.y * factor);
}

Vec2 Director::convertToUI(const Vec2&amp; glPoint)
{
    Mat4 transform;
    GLToClipTransform(&amp;transform);
		...
    return Vec2(glSize.width * (clipCoord.x * 0.5f + 0.5f) * factor, glSize.height * (-clipCoord.y * 0.5f + 0.5f) * factor);
}
</code></pre>

<p>所以记录点击位置的代码很简单：</p>

<pre><code>local posx,posy = node:getPosition()
local pos = node:getParent():convertToWorldSpace(cc.p(posx,posy))
local director = cc.Director:getInstance()
local uiPos = director:convertToUI(pos)
</code></pre>

<p>记录位置，然后保存。大功完成一半。是不是很简单。</p>

<p>接下来说一下回放。<br />
回放是自动完成，也就意味有一个定时器，定时将位置信息触发。<br />
我的做法是使用<code>python</code>结合<code>nc</code>，<code>touch</code>命令，将位置信息挨个触发。</p>

<p>python可以调用系统命令。我们使用adb命令将保存的位置信息文件读出来，然后<code>nc连接</code>游戏。在nc命令模式下，调用<code>touch</code>命令。</p>

<pre><code>touch swipe 300 400 300 400
</code></pre>

<p>这里touch有一个bug，就是对单点的支持不正确，点击并未触发。于是我尝试使用了多点。就是传递了同一个位置。竟然可以使用。</p>

<p>python代码如下：</p>

<pre><code>nc = Netcat(server_address, 5678)
while(index &lt; len(recordArray)):
    nc.read_until('&gt;')
    item = recordArray[index]
    cmd = "touch swipe %d %d %d %d \n"  % (item[0],item[1],item[0],item[1])
    nc.write(cmd)

    index = index + 1
    time.sleep(4)
</code></pre>

<h3 id="section-2">结语</h3>

<p>至此这个工具的制作过程都讲完了。期间也掉进了坑中，幸运的是和其他同事交流下，脑袋就清晰了一些。慢慢的我的这个大坑也就填上了。<br />
实践过程中也存在一些问题。也在慢慢优化中。期望有一天成熟起来，能给其他项目中带来便利。<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2017-10-08-15074549225204.jpg" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocos2dx游戏性能优化技巧]]></title>
    <link href="http://www.newtomato.me/blog/2017/10/06/cocos2dxxing-neng-you-hua"/>
    <updated>2017-10-06T22:09:58+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/10/06/cocos2dxxing-neng-you-hua</id>
    <content type="html"><![CDATA[<p>手机游戏性能优化主要有两个方面。一个CPU，一个GPU。</p>

<p>GPU主要用于图像渲染方面。由于现在显卡发展迅速。原本CPU的部分功能，可以转移到GPU上计算运行。这样大大的减轻了CPU的运算压力。提升效率。</p>

<p>GPU和CPU都有各自的性能指标。我们最常优化的地方都是CPU，因此我先从这一部分讲起。<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2017-10-06-15073018470041.jpg" alt="" /><br />
我给你演示一下我做的项目！这…,肯定是环境的问题！<br />
<!--more--></p>

<h3 id="cpu">CPU有关的方法</h3>

<p>cocos2dx在开启debug模式之后，在左下角有三行debug信息。<code>GL vertical</code>，<code>draw call</code>，以及<code>fps</code>.<br />
fps是最常用的指标之一。数值越高游戏运行越流畅。他表示一秒钟能刷新多少帧。<br />
draw call也是性能优化的指标。他表示需要几次draw才能把图片展示出来。<br />
gl vertical不常用，但是也是优化指标之一，他表示当前有多少个顶点数据。</p>

<p>所有的方法就是围绕这三个指标开始展开。</p>

<ol>
  <li>使用<code>batchnode</code>批处理的方式加载图片。因此cocos2dx在这方面做了优化，在同一个<code>batchnode</code>的图片会一次性draw到GPU上，从而降低<code>draw call</code>的调用。从cocos2dx 3.0以后的版本，cocos2dx自动使用batchnode技术，而不需要开发者自己创建。</li>
  <li><code>fps</code>的降低是因为有大量数据的计算，例如对象的生成。因此考虑对象池技术。例如cocos2dx使用的<code>AnimaitonCache</code>，<code>TextureCache</code>，<code>SpriteFrameCache</code>等。例如我们创建很多敌人。敌人消亡之后又会重新创建。实际上可以放到对象池中，默认从池中获取，如果池子里面没有对象，在重新创建。</li>
  <li>加载较大资源，瞬间fps会下降很多。那是因为这个过程是加载图片资源和解析动画数据创建对象。动画资源最好提前加载。
    <ol>
      <li>按照由大到小的顺序加载。加载大的资源会和内存申请资源2倍的内存。但加载完什么时候不会立即释放。接着在依次加载。此时内存已经被撑大，在加载资源也可能不在需要申请新的内存了。</li>
      <li>io读取动画数据信息，使用缓存，这点在cocos studio制作的armature中已经使用。但是Spine动画并未如此。他会每次创建都会重新加载。</li>
      <li>可以用序列帧动画代替复杂的需要计算的动画。序列帧动画资源比较大。加载后压力转嫁给gpu而非cpu。</li>
    </ol>
  </li>
  <li>减少粒子动画的使用。</li>
  <li>图片加载之后，为什么会占据那么高的内存？一张1024x1024的RGB8888，大小200k的图片，加载后，占内存4M，因为图片本身是压缩的数据。在内存中都会被解压缩膨胀起来。他先被CCImage读取解析（它实现了对于不同类型图片得读取、解析、像素信息保存），然后CCTexture2D在根据CCImage又创建了一份数据。因此内存会有2倍的开销，如果我们可以使用gpu直接解析的图片，比如ios平台的pvr tc4格式，或者android的etc格式，则内存只有1倍左右的开销。</li>
  <li>上述提到的pvr tc4格式，也有自己的缺点，它是有损压缩。肉眼可以看得出来，因此只能用于细微的地方。比如特效或者粒子等。</li>
</ol>

<h3 id="gpu">GPU有关的方法</h3>

<p>GPU的优化则要分情况而定。</p>

<p>GPU早期的架构和PC相似，都是IMR（Immediate Mode Rendering），这种架构的GPU渲染有个问题，就是Overdraw过高。因为他将被遮挡的物体也被draw到显卡上。这明显是一种浪费。<br />
现在的GPU在一定程度上可以避免这个问题，但是需要应用程序将物体按照z轴顺序从前往后的顺序提交给GPU，这是一种方案。<br />
另外，现在GPU有三家大的厂商。分别是<code>powervr，高通Adreno，ARM mali</code>。他们采用的是TBR（分块渲染）的架构。在overdraw方面，<code>powervr</code>是做得最好的一家。他使用<code>TBDR（Tile Based DeferredRendering）</code>架构，他增加了一个<code>HSR（Hidden Surface Removal)</code>硬件单元，剔除掉被遮挡的三角形。</p>

<p>因此说GPU的优化分情况而定。而为了降低遮挡，在我们开发游戏中可以通过TexturePacker的多边形裁剪来做到。<br />
说着这个，最常见的情况是有透明的图片，透明也是像素，也需要被读取到显卡上，增加带宽的浪费。而多边形裁剪就是将透明的部分裁掉。<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2017-10-06-15072972637518.jpg" alt="=w300" /></p>

<p>使用cocos2dx打开<code>CC_SPRITE_DEBUG_DRAW</code>,此时你可以看到一个<code>Sprite</code>的三角形不再是两个。而是多个。<br />
但同时，我们也发现他的<code>gl vertcail</code>也变得很大。顶点越多，cpu计算越多。而我们使用了这种多边形裁剪，期初是为了降低GPU的计算和渲染。却带来了另一个问题。</p>

<p>因此又回到那种时间换取空间的问题。可根据具体情况考虑是否使用这种方法。<br />
不过，经过测试这种方法在powervr型号的gpu设备上没有多少成效。</p>

<h3 id="section">其他技巧</h3>

<ol>
  <li>善用dumpCachedTextureInfo，找到那些texture一直未被释放。</li>
  <li>对于只是使用一次的texture，在加载到gpu之后，可以remove内存对他的引用。这不会产生问题。</li>
  <li>善于使用九宫格，降低对同一种资源的频繁加载。</li>
  <li>早期手机部分不支持npot，为了统一资源，都做成了pot的格式，浪费了资源。现在手机大都已经支持npot。所以texturepacker导出可以选择npot，最新的npot的版本已经是anysize了。</li>
  <li>数字字体尽量使用bmffont。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识liquidFun（流体物理引擎）]]></title>
    <link href="http://www.newtomato.me/blog/2017/06/25/ren-shi-liquidfun"/>
    <updated>2017-06-25T23:24:41+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/06/25/ren-shi-liquidfun</id>
    <content type="html"><![CDATA[<p><img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2017-06-25-14984044203691.png" alt="" /></p>

<h2 id="section">初识</h2>

<p>在一款名为<a href="http://fingerlab.net/portfolio/yuri">《yuri》</a>的游戏中，发现了点有意思的东西，于是乎各种搜索，终于找到了相关的技术，那就是由google开源的物理引擎<a href="http://google.github.io/liquidfun/">liquidFun</a>。</p>

<p><code>liquidFunc</code>的demo地址<a href="http://google.github.io/liquidfun/testbed/index.html">在此</a>。相信我你看到这个demo之后，绝对会对<code>liquidFun</code>这个引擎产生无比的喜欢。（这里不需要翻墙，只要能打的开github，就能够看得到这个演示。）</p>

<p>先来一睹为快！<br />
<img src="http://jolie.oss-cn-hangzhou.aliyuncs.com/2017-07-02-Untitled.gif" alt="" /></p>

<!--more-->

<p><strong>他</strong>继承自<strong>Box2D</strong>，是Box2D的扩展版本，但增加了粒子的流体和柔软性效果。<br />
<a href="http://google.github.io/liquidfun/API-Ref.html">相关的API文档</a><br />
<a href="http://docs.google.com/presentation/d/1fEAb4-lSyqxlVGNPog3G1LZ7UgtvxfRAwR0dwd19G4g/edit?usp=sharing">具体的实现细节在这里</a></p>

<p>因为支持C++, Java, or JavaScript，因此可以整合到cocos2dx引擎中。方便我们使用。当我想到这里的时候，立马去github上搜索了一下。果然触控已经开始考虑到这点了。</p>

<h2 id="section-1">了解</h2>

<p>于是在github触控这里，找到了一份<a href="https://github.com/cocos2d/cocos2d-x-samples">cocos2dx整合liquidFunc的实例工程。</a></p>

<p>安装方法如下:</p>

<pre><code>git clone https://github.com/cocos2d/cocos2d-x-samples
cd cocos2d-x-samples
python download-engine.py
git submodule init
git submodule update
</code></pre>

<p>执行完上述步骤，就可以在sample中打开<code>LiquidFun - EyeCandy</code>工程了。效果也是震撼。<br />
完全足够我们的使用了。</p>

<p>这个工程的作者<a href="https://github.com/ricardoquesada">Ricardo Quesada</a>在他的的博客中有两篇文章，讲解了整合cocos2dx和liquidFun的细节。</p>

<ul>
  <li>
    <p><a href="https://retro.moe/2014/04/23/integrating-liquidfun-with-cocos2d-x-part-i/">Integrating LiquidFun with Cocos2d-x: Part I</a></p>
  </li>
  <li>
    <p><a href="https://retro.moe/2014/07/30/integrating-liquidfun-with-cocos2d-x-part-ii/">Integrating LiquidFun with Cocos2d-x: Part II</a></p>
  </li>
</ul>

<p>感兴趣的各位同学不妨移步去看看，加深对liquidFunc的理解。</p>

<h2 id="section-2">下一步</h2>

<p>由于我们的项目使用的cocos2dx + lua，因此下一步要考虑的就是通过luabing将<strong>Box2D</strong>和<strong>liquidFunc</strong>的代码注册到lua虚拟机中使用。这部分我将在下一篇文章中讲解。</p>

]]></content>
  </entry>
  
</feed>
