<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:android | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-11-12T15:10:28+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ETC格式图片最佳实践]]></title>
    <link href="http://www.newtomato.me/blog/2017/11/12/etcge-shi-tu-pian-zui-jia-shi-jian"/>
    <updated>2017-11-12T15:04:27+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/11/12/etcge-shi-tu-pian-zui-jia-shi-jian</id>
    <content type="html"><![CDATA[<p>最近整理android资源，发现有不少可以采用etc格式图片进行优化的地方。所以针对这块技术点进行了一下整理总结。分享给大家。</p>

<p><strong>etc是纹理压缩格式，可以不用cpu解压缩对齐像素而直接上传给GPU读取。GPU可以通过位置索引得到像素信息。也就意味着可以随机读取，快速准确。</strong></p>

<p>一张1024x1024的RGBA格式的图片，内存占用大约是1024x1024x4 = 4M。但是etc的每个像素占用0.5个字节。所以是0.5M。从这一点就有很多大的内存节约。</p>

<p>优点如上。</p>

<p>缺点就是不支持透明像素，而且图片的大小会变大很多。<br />
对于透明，我们可以采用shader的方式，对一张图片的像素处理让他能够呈现出透明。</p>

<p>具体的方案可以看<a href="http://malideveloper.arm.com/develop-for-mali/sample-code/etcv1-texture-compression-and-alpha-channels/">这里</a><br />
<!--more--></p>

<h2 id="section">开始</h2>

<p>我这里使用的是<code>MALI GPU</code> 厂商提供给开发者的工具<code>Mali GPU Texture Compression Tool </code>，可以将图片压缩成ect1或者etc2格式。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-11-12-15104668339680.jpg" alt="" /></p>

<p>在导出的时候我们选择如何处理<code>alpha</code>。</p>

<p>第一种方式方式，放弃alpha通道数据。就是没有alpha也不影响图片显示。只有确定的不需要透明的图片可以才用这样的方式。比如模糊的大块儿图像。<br />
清晰的图像，掉透明会让纹理上出现波纹状的显示。肉眼容易看出来。</p>

<h2 id="section-1">图像和透明纹理合图</h2>

<p>第二种是创建透明和图片纹理的合图。上面是图像纹理，下面是透明纹理，通过shader读取上下对应纹理坐标的数据，相加得到真实的问题数据。<br />
这样的好处就是只要读取一个纹理采样即可。</p>

<p>VerticalShader修改为：</p>

<pre><code>attribute vec4 a_v4Position;
attribute vec2 a_v2TexCoord;
varying vec2 v_v2TexCoord;
varying vec2 v_v2AlphaCoord;
 
void main()
{
    v_v2TexCoord = a_v2TexCoord * vec2(1.0, 0.5);
    v_v2AlphaCoord = v_v2TexCoord + vec2(0.0, 0.5);
    gl_Position = a_v4Position;
}
</code></pre>

<p>FragmentShader修改为：</p>

<pre><code>precision mediump float;
uniform sampler2D u_s2dTexture;
varying vec2 v_v2TexCoord;
varying vec2 v_v2AlphaCoord;
void main()
{
    vec4 v4Colour = texture2D(u_s2dTexture, v_v2TexCoord);
    v4Colour.a = texture2D(u_s2dTexture, v_v2AlphaCoord).r;
    gl_FragColor = v4Colour;
}
</code></pre>
<p>## 单独压缩的图像和透明纹理</p>

<p>第三种方式是对图像和透明单独生成两张纹理。当然也是用Shader来实现两个纹理“叠加”，缺点就是需要两个纹理的采样读取。</p>

<p>修改片段着色器</p>

<pre><code>vec4 colour = texture2D(u_s2dTexture, v_v2TexCoord);
colour.a = texture2D(u_s2dAlpha, v_v2TexCoord).r;
gl_FragColor = colour;
</code></pre>

<p>至于最后一种方式，是第三种方式未压缩版本。暂时并未使用。所以在此不做叙述。</p>

<h2 id="section-2">结语</h2>

<p>在cocos2dx，我使用Sprite去使用这样的shader，都表现出我预期的样子。但是使用九宫格Scale9Sprite，则没有达到预期。Scale9Sprite从代码上看，已经对纹理做了切割。因此不满足上面Shader的纹理坐标系。导致读取不正确。</p>

<p>生成pkm图片的工具除了<code>Mali GPU Texture Compression Tool</code>，<code>texturepacker</code>也可以，早期的版本有些问题，但是现在的最新版已经支持导出Alpha通道的纹理图片了。<br />
<code>Mali GPU Texture Compression Tool</code>需要到mali开发者网站上下载，由于国内特殊情况，下载速度几乎回到10年前的速度。为此我放到百度云这里，需要的可以自取。</p>

<p>链接:http://pan.baidu.com/s/1pK8S1mF  密码:cab2</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keytool的基本用法以及检查apk签名]]></title>
    <link href="http://www.newtomato.me/blog/2017/01/09/keytoolde-ji-ben-yong-fa-yi-ji-jian-cha-apkqian-ming"/>
    <updated>2017-01-09T14:38:22+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/01/09/keytoolde-ji-ben-yong-fa-yi-ji-jian-cha-apkqian-ming</id>
    <content type="html"><![CDATA[<p>要导出正式的android的apk，就需要用得到一个keystore的文件。这个文件就是由keytool生成的一个文件。</p>

<p><code>Keytool</code> 是一个JAVA环境下的安全钥匙与证书的管理工具，用于生成一个证书管理库，用于管理私钥公钥验证相关的一个证书keystore。<br />
你可以把keystore看成是一个数据库，里面存储的是证书，keytool就是用来操作这个数据库的工具！<br />
<!--more--><br />
他常用的命令有以下几种方式。</p>

<ol>
  <li>
    <p>创建keystore<br />
<code>keytool -genkeypair -alias "android" -keyalg "RSA" -keystore "mylib.keystore"  </code></p>

    <p>创建一个别名为<code>android</code>的证书，该证书存放在名为<code>mylib.keystore</code>的密钥库中.<br />
 <code>-alias</code>指明这是证书的别名，同时也是秘钥对的别名。</p>
  </li>
  <li>查看keystore<br />
  <code>keytool -list -keystore mylib.keystore</code></li>
  <li>导出keystore里面的证书<br />
 <code>keytool -export -alias android -file android.crt -keystore mylib.keystore</code></li>
  <li>查看导出的证书信息<br />
 <code>keytool -printcert -file "android.crt"</code></li>
  <li>删除keystore里面的证书<br />
 <code>keytool -delete -keystore mylib.keystore -alias android</code></li>
</ol>

<p>另外，keytool最有用的的方法是检查apk的签名和验证。<br />
检查apk签名方法有两种一种是将apk解压缩，找到里面的<code>META-INF</code>文件夹。然后对其RSA文件进行如下命令即可:<br />
<code>keytool -printcert -file META-INF/XXXX.RSA</code><br />
第二种方法，在不加压缩的情况下<br />
<code>keytool -list -printcert -jarfile xxx.apk</code><br />
但是jarfile是java 7才引入，所以如果自己电脑里面的java版本不足，需要升级。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Facebook登录问题]]></title>
    <link href="http://www.newtomato.me/blog/2017/01/07/android-facebookdeng-lu-wen-ti"/>
    <updated>2017-01-07T19:31:06+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/01/07/android-facebookdeng-lu-wen-ti</id>
    <content type="html"><![CDATA[<p>如果应用通过web方式登录fb，没有出现问题，但是通过fb应用登录反而报错，报错信息如下：<br />
<code>Android hash key always does not match any stored key hashes</code></p>

<p>这个时候，怎么解决呢？<br />
<!--more--><br />
我在这个<a href="http://stackoverflow.com/questions/22818516/android-facebook-api-key-hash-not-match-any-store-key-hashes">stackoverflow</a>下面找到了解决方法。</p>

<p>总结起来的方法就是，fb会弹出提示告诉你，你应用的hash值和我们存储的不一致。我们记下这个hashcode，然后到fb developer console那里设置<code>key Hashes</code><br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-01-07-14837800858205.jpg" alt="-w400" /></p>

<p>但是这个key hashes值是怎么创建的呢？<br />
一番搜索之后，在<a href="https://github.com/AntonioCuevaUrraco/nativescript-facebook-login/issues/14">这里</a>找到了答案</p>

<pre><code>keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64
</code></pre>

<p>命令运行了之后，果然和上面的一样。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Android 扩展文件OBB的使用]]></title>
    <link href="http://www.newtomato.me/blog/2016/11/20/google-android-kuo-zhan-wen-jian-obbde-shi-yong"/>
    <updated>2016-11-20T16:13:41+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/11/20/google-android-kuo-zhan-wen-jian-obbde-shi-yong</id>
    <content type="html"><![CDATA[<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-11-20-IMG_06702.jpg" alt="" /></p>

<p>我们提交应用到Google Store的时候，Google要求应用的大小不能够超过100M，那么超过100M怎么办呢？<br />
那就用到了本章将要讲的东西<strong>OBB</strong>（扩展二进制文件）。</p>

<p>OBB文件，你可以看成是一个ZIP文件。我们提交母包APK的时候，在界面上也有提价扩展文件的地方。假设我们的母包APK是100M，OBB扩展是100M，用户在Google Store上看到或者下载的大小将是二者之和。<br />
<!--more--><br />
因此一个完整的流程是下载应用，是同时下载母包和OBB，但是Google文档中提到，他们并不保证OBB文件能够100%下载完成。这就需要我们在启动应用之后，程序去检测是否已经正确下载和验证有效性，如果是则可以进入游戏了。如果不是，那么就要重新下载OBB。</p>

<p>为什么要验证OBB的有效性呢？难道下载100%不行么？这是因为OBB安装的位置是暴露给用户的。用户可以打开修改这个文件。因此制作的时候要注意做好加密工作。</p>

<p>Google提供的jobb工具刚好有加密的参数，其参数的使用方法可以参考<a href="https://developer.android.com/studio/command-line/jobb.html">这里</a></p>

<pre><code>$ jobb -d /temp/assets/ -o my-app-assets.obb -k secret-key -pn com.my.app.package -pv 11
</code></pre>

<p>上面提到OBB是暴露给用户的，那么OBB具体是存放在哪里呢？<br />
在Google文档中提到是在</p>

<p><code>&lt;shared-storage&gt;/Android/obb/&lt;package-name&gt;/&lt;obb-name&gt;.obb</code></p>

<ul>
  <li>shared-storage 是通过<code>getExternalStorageDirectory()</code>获取的位置</li>
  <li>package-name是我们的包名，通过函数<code>getPackageName()</code>获得.</li>
  <li>obb-name则是有自己的命名规范。<code>[main|patch].&lt;expansion-version&gt;.&lt;package-name&gt;.obb</code></li>
  <li>因为Google能够让我们提交的obb只有两种类型，main和patch。main表示主要的obb包，patch是更新包的意思，例如我们经常更新的部分，可以做成patch，这样下次更新APP的时候，只要提交着一个patch就行了。</li>
  <li>expansion-version表示版本号，他们我们的AndroidManifest.xml里面的versionCode是一致的。</li>
  <li>pack-name和上面的解释一致。</li>
  <li>针对 Android 2.3 及以上版本的 APK，母包要求在100M以内，如果是 Android 2.2 及以下版本则要求在50M以内。</li>
</ul>

<h3 id="section">开始代码</h3>
<p>首先需要加入三个依赖库。<br />
1. <a href="https://developer.android.com/google/play/expansion-files.html#ZipLib">APK Expansion Zip Library</a><br />
2. <a href="https://developer.android.com/google/play/licensing/index.html">Application Licensing</a><br />
3. <a href="https://developer.android.com/google/play/expansion-files.html#AboutLibraries">Downloader Library</a></p>

<p>另外，Google的licensing在lollipop会有如下的报错：<br />
&gt;java.lang.IllegalArgumentException: Service Intent must be explicit: Intent { act=com.android.vending.licensing.ILicensingService }</p>

<p>解决方法：<a href="http://stackoverflow.com/questions/28305125/android-app-crashes-on-lollipop">http://stackoverflow.com/questions/28305125/android-app-crashes-on-lollipop</a></p>

<p>这三个库在<code>android-sdk文件夹/extras/google/</code>下面都有。只要导入到Eclipse或者Android Studio即可！<br />
导入之后会有部分报错情况，可以检查他们之间彼此依赖关系，清理在重新build即可。</p>

<p>接下来按照Google文档我们要集成DownloadService和BroadcastReceiver等，这一部分代码我们可以直接参考Google的实例工程<code>downloader_sample</code>，他的位置在<code>android-sdk文件夹/extras/google/market_apk_expansion/downloader_sample</code>。我们要做的就是修改如下两个函数</p>

<pre><code>public static final String BASE64_PUBLIC_KEY = "YourLVLKey";
// You should also modify this salt
public static final byte[] SALT = new byte[] { 1, 42, -12, -1, 54, 98,
   -100, -12, 43, 2, -8, -4, 9, 5, -106, -107, -33, 45, -1, 84
};
</code></pre>

<p>BASE64_PUBLIC_KEY是我们创建Google应用的时候，会自动生成的key，SALT则是需要我们修改一下即可使用。</p>

<p>现在我们使用downloader_sample的包名和version生成一个obb文件和apk文件，然后提交。等待生效之后，我们要开始测试。</p>

<h3 id="section-1">如何测试</h3>

<p>按照上面的方法我们做好obb提及到Google开发者平台后，等待beta版本生效之后，就可以在本地测试了。<br />
复杂的测试方法是，需要我们登录Google Play Store找到beta应用下载测试（前提条件使我们要加入测试组，才能看到这个应用）。</p>

<p>相对简单的方法如下:</p>

<pre><code>adb push xxx.obb /Android/obb/${package-name}/
adb install xxx.apk
</code></pre>
<p>启动我们的应用，检测是obb已经下载，验证obb有效性。downloader_sample的启动界面会提示我们此时已经Success完成。</p>

<p>这两种方式都可以使用，也不必每次都重新提交到Google那里了。此时就可以连着设备直接debug调试了。</p>

<h3 id="section-2">结束语</h3>

<p>走通这个流程中，我们遇到了不少奇怪的问题，比如Google无法验证身份，（检查是否加入了测试组，设备上的Google账号是否正确等，缓存是否清理），比如没有检测到obb文件，（网络是否正常，能否连接到Google play Store等），文件的下载之后大小有问题等。因此建议你们，手里要有一个可以翻墙的VPN才是事半功倍的利器啊。</p>

<p>至此OBB的工作已经完成，站在Google巨人的肩膀上，省去了我们不少力气。下篇文章，我将结合cocos2dx来讲一下怎么使用下载下来的obb文件。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[节省开发时间的几种方案总结]]></title>
    <link href="http://www.newtomato.me/blog/2016/06/09/jie-sheng-kai-fa-shi-jian-de-ji-chong-fang-an-zong-jie"/>
    <updated>2016-06-09T14:31:39+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/06/09/jie-sheng-kai-fa-shi-jian-de-ji-chong-fang-an-zong-jie</id>
    <content type="html"><![CDATA[<p>我们框架使用的是cocos2d-x。它支持ios和Android的开发。传统的开发，肯定是ios使用xcode，Android使用eclipse。eclipse同时还要配置一些模拟器。如果环境搭配的好，并且配置的电脑性能高，运行起来是可以接受的。但是我们的环境略微艰苦一点。使用Mac Mini，启动xcode很慢，更别提启动eclipse了。更是慢上加慢。为此浪费了我们不少时间。并且一直在想怎么样能够缩减开发时间。最后功夫不负有心人吧。找到了几种方法。分享出来给大家，希望也能解决你遇到这个问题。<br />
<!--more--></p>

<blockquote>
  <p>使用触控官方提供的Player模拟器。</p>
</blockquote>

<p><strong>优点：</strong><br />
配置简单。只要配置Quick的环境变量，就可以运行，然后设置我们的工程目录，就可以运行我们的项目了。而且这个运行起来相对于ios的模拟器还快一些。并且能够调整屏幕分辨率。</p>

<p><strong>缺点：</strong><br />
展示解决了ios模拟器的问题，Android模拟器还是需要在eclipse上测试。<br />
自从mac升级到10.11之后，player就不能够正常运行了。即使用源码重新编译也是无法运行。</p>

<blockquote>
  <p>由于lua的特性，我们在平时开发中就采用这种更新机制。讲修改的代码文件拷贝到更新文件夹下面。</p>
</blockquote>

<p><strong>优点：</strong><br />
不用每次都重新启动模拟器。在我们游戏中，重新加载新代码的时机是用户某一次面板切换。因此copy完之后，切换一次面板就ok。<br />
这样省去了一次项目启动的时间。不管是ios还是Android</p>

<p><strong>缺点：</strong><br />
这样做，需要开发同学手动拷贝代码，在ios上面的更新文件夹，有的时候是变化的。不小心在模拟器上卸载之后，或者切换模拟器之后，文件夹位置就变了。踩这个坑也是让人心酸哦。</p>

<blockquote>
  <p>直接在Android模拟器上做测试。我此处推荐的是海马模拟器。安装海马模拟器是我见过最简单的过程。比Genymotion简单许多。安装了他之后，可以设置一个共享文件夹。就是这个共享文件夹让我灵光一闪。将我们项目做成共享文件夹。然后在海马模拟器上找到更新文件夹，将assets做成共享文件夹的一个软链。代码也做成共享文件夹的一个软链接。这样只要项目变化了，能直接变化更新文件。在海马上启动我们的模拟器</p>
</blockquote>

<p><strong>优点：</strong><br />
启动快，不用拷贝代码，节省时间。且直接在Android模拟器上测试。开发完成之后，直接就可以上发布给QA同学测试了。</p>

<p><strong>缺点：</strong><br />
暂时没有发现，如果有，我后续更新！</p>

]]></content>
  </entry>
  
</feed>
