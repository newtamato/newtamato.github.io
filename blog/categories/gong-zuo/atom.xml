<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:工作 | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/gong-zuo/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-09-03T19:47:53+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[问题不断的被reopen怎么办？]]></title>
    <link href="http://www.newtomato.me/blog/2016/04/18/problem-reopen"/>
    <updated>2016-04-18T00:12:24+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/04/18/problem-reopen</id>
    <content type="html"><![CDATA[<p>工作中你是否遇到过这样的情况？<br />
分到自己头上的ticket，刚刚被关闭掉，经过QA同学的测试又给reopen了。而且不止一次的reopen。真是恼火啊！<br />
开发同学的工作是修改代码之后，经过自己的开发测试之后，提交到功能分支，QA同学复查的时候往往会找到意外的情况。这种情况我仔细想了一下，总结出能发生这种问题的如下几种情况。<br />
<!--more--></p>

<ol>
  <li>对于需求没有沟通清楚。<br />
这种情况最常见的是在于一个bug没有描述清楚。只有一句话的描述，没有其他辅助的说明性的东西，比如图片，视频之类的。<br />
开发同学按照自己的理解去修改。结果答非所问，于是问题又被reopen了。</li>
  <li>没有经过Review直接提交。<br />
这种情况很常见，尤其是在时间紧任务多还有deadline的情况下，开发的同学也会有种约定俗成的规定，暂时不Review了。直接提交。吃过这方面苦头的不在少数。</li>
  <li>对于某些修改，过于自信。<br />
没有经过自己的测试，直接提交。即使找了其他同学过来Review，由于不熟悉功能，只看代码的语法和规范。结果问题打脸啪啪啪。</li>
  <li>功能测试通过，但是和展示动画等相关的地方被reopen了。<br />
因为这些东西往往容易忽视，没有经过美术同学的Review。</li>
</ol>

<p>不断被reopen的情况是最令人痛苦的，这比要做一个新的功能带来的紧迫感更让人恼火。在一个地方跌倒数次，最容易让我们自己觉得自己是一个傻逼。<br />
可是如何避免发生这种事，找到解决问题的方法，才是此篇文章最要紧的。我想把自己的方法分享出来。希望真心的能够帮到你。<br />
上面4条问题，只要做好严格的code review也就能够保证50%左右的问题被及时的发现。加上在平时开发能够多经过几次的测试，相信剩下也能解决50%的问题。但是就是因为某些测试的步骤太过繁琐，太花费时间。最起来机械性重复性。我相信QA同学对此更有发言权。于是开发测试不彻底就造成了更多的迭代，时间被浪费了。</p>

<p><strong>有的错误我们无法改掉，但是我们可以用更好的方式去检查自己的错误。</strong></p>

<p>这种方法就是检测我们的代码是否正确！<br />
是不是想到了unittest？unittest好用是毋庸置疑的。但是我的方法比unitest简单省事而且更加自动化。</p>

<p>我们大部分的工作场景是需要测试某个功能，比如说购买商品，从一开始点击到最后得到物品以及扣费。这里面包含数值的变化，UI面板，获得物品动画，扣费动画。</p>

<p>涉及到变化的数据包括，数值和背包。因此我们可以从购买开始增加一个检测，在购买之前的数值做一次记录，在购买完成之后，做一次记录。然后比较发生变化的数值，是否是和我们想要的相似。这也就是unittest的思想。（获得物品以及扣费动画最好能够分开做成两个动画。每个动画首先要做的就是保证自己播放没有问题，这样合在一起播放出现错误的概率会降低。）但是如何测试动画没有问题呢？尤其是我们重复的把做相同的事情，测试耗费时间。我能想到的方法就是去调用我们写的这个购买入口函数，然后增加一个try catch finally等事情，将报错的信息弹出来，尽早在开发过程中发现，发现问题。但是测试前端仍然需要重复的点击，这些事情我们可以交给机器去做，比如按键精灵。让他们记住我们的操作，下次再来，直接启动按键精灵的脚本即可。而我们要做的就是观看。（做一个看客有的时候能看到更多的问题）这样好像能解决问题，但是我们眼睛看到的有限，一会儿就过去了，怎么能保证做的没有问题呢？那就让录屏软件来帮助我们吧！itools这个神奇的工具就能够将手机上操作直接录屏同步到电脑上面。</p>

<p>上面的方式看似没有减轻我们的工作，但是实际上确实能为我们节省迭代的时间，而且能够保证由我们交付出去的代码是安全的。<br />
实际的开发工作总是有各种意外和边界条件。可能上面我的方法并不适合你当前的问题。但只要能够善于总结问题，善于使用工具，善于反思自己，总会在这混乱之中找到自己的方法。</p>

<p>祝你好运！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工作记事]]></title>
    <link href="http://www.newtomato.me/blog/2016/02/28/gong-zuo-ji-shi"/>
    <updated>2016-02-28T17:13:23+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/02/28/gong-zuo-ji-shi</id>
    <content type="html"><![CDATA[<p>年后回来，我们为了一次活动更新，又搞到了后半夜才完成了上线。这件事成为了A同事离职的导火索，他对我们这种工作节奏已经忍无可忍。于是第二周上班的时候就此提出了离职。<br />
<!--more--><br />
他的离职在我意料之中也在意料之外。意料之外是我们已经在一起有一年多了。期间摩擦都已经磨合的差不多了，许多烦心的事情到最后都差不多在嘻哈玩笑中解决，并不会影响到团队的情绪。况且差不多要到项目收获的时机了。此时离开，当真为他可惜。但是他还很年轻，有的时候无法控制自己的情绪，有些冲动。特别容易受别人的影响，而且有些固执。</p>

<p>我想尽量挽留他，给他点出此时离职的利弊，但是谈话并不顺利，他仍是坚持要离职。对于理由也只是轻描淡写，似乎另有隐情。<br />
如何劝他留下的，用未来的希望和个人的魅力？在一个人失望至此的情况下，说的都很苍白。情怀已经成了最后一个稻草，但提及情怀，反而让固执的心更加冷漠。</p>

<p><strong>人和人真的不一样，何况他和我们查了一代隔阂。我想将自己的经历讲给他听，做事情要有目标，有了目标就要去坚持。不要被外面的诱惑和流言左右自己的方向。冲动迷失的时候不要做决定。先等等，等上两天自己就会想明白的。<br />
这些话都是我自己生活总结。是跌过跟头，犯过错误总结下来的。讲给他听，换来的是他木然的眼神。</strong></p>

<p>我想他对我们已经是失望之极了吧！<br />
人的缘分很奇妙，能呆一起辛苦一年多，已属不易。分开便是阳关道与独木桥。</p>

<p>谈话完毕之后，我有很多想和他说，但是想想都很没有力量。马云说，员工离职，无非两个原因一个是待遇不好，一个是受委屈了。我想我们现在差的就是待遇了。项目尚未有收益，任何保证都有一些望梅止渴。而我们，暂时无能为力。真是实在抱歉！</p>

<p>在我们创业过程中，离开的员工，我想来都觉得很抱歉。在这样的环境中，你们承担的东西肯定是要比其他正规公司要多，但收益未必多。创业团队也最忌讳团队的不稳定，来来去去，不仅让团队里面的人感到不安，更重要的是让别人看来你们很不靠谱。<br />
这也是我们创业要学的一门必修课，如何保证团队的稳定性和激情活力？<br />
初期创造一个相对开心，被需要，有梦想共筑的环境才成为留住人才的主要手段。但是创业周期一旦拉长，光靠梦想是不现实的。适当的增加薪水也是手段之一。缩减工作时间，适当保证工作和生活的平衡性。找到一个工作的节奏。不让疲惫袭击团队。不然负能量满满，四处都是抱怨的声音。但是这样的时间也不能够太长，没有希望和前途的闷头干下去是很辛苦的。</p>

<p>而这门课我们还在继续，直到创业成功。</p>

]]></content>
  </entry>
  
</feed>
