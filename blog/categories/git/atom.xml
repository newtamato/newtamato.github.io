<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类:git | 番茄手册]]></title>
  <link href="http://www.newtomato.me/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-06-03T20:14:07+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git如何在本地和远端都删除相关的分支]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/22/git-remove-branch-remotely"/>
    <updated>2015-11-22T17:45:01+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/22/git-remove-branch-remotely</id>
    <content type="html"><![CDATA[<pre><code>git branch -r #查看本地和远端同步的分支
origin/change_avatar_cloth
origin/develop
origin/master
</code></pre>

<!--more-->

<p>通过命令<code>git branch -rd  branch_name</code>，将存在自己本地的remote分支删除。但是并没有通知远端。因此还需要如下的命令<code>git push origin: branch_name</code> 将本地的分支同步出去。<br />
如果此时想要让别人同步服务器的分支，也就是和服务器保持一样，如果服务器的分支被删除了，本地的分支也照样删除，可以使用如下命令：</p>

<pre><code>git pull --prune
</code></pre>

<p>后来到stack overflow当中找到了高票答案</p>

<blockquote>
  <p>As of Git v1.7.0, you can delete a remote branch using<br />
git push origin –delete <branchName>
which is easier to remember than
git push origin :<branchName>
which was added in Git v1.5.0 &#8220;to delete a remote branch or a tag.&#8221;</branchName></branchName></p>
</blockquote>

<p>也就是说如果是1.7.0版本的Git，可以通过<code>git push origin --delete branch_name</code> 的方法去删除一个远端分支，而在1.5.0版本的Git重则可以直接使用<code>git push origin: branch_name</code> 的方法</p>

<p>或者就是先批量通过删除本地remote的仓库，然后通过如下的方法<code>git push --prune origin</code>直接和远端和本地仓库做同步。也就是说如果本地remote分支不存在，那么远端也就删除掉。因此这个命令如同放大招，最好慎用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT常用方法]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/30/git-basic"/>
    <updated>2015-10-30T10:58:35+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/30/git-basic</id>
    <content type="html"><![CDATA[<p>使用Git作为代码管理的工具，是一种常见的方式。相对于其他的代码管理工具，Git灵活，易切换。而且很方便和别人交互。<br />
简单地介绍一下GIT的工作流程<br />
<!--more--><br />
首先，创建我们自己的代码仓库。前提是我们自己的电脑上已经安装过了git。</p>

<pre><code class="language-python"> git init
</code></pre>
<p>然后新增一个文件。随便写点什么，比如readMe</p>

<pre><code class="language-python">echo hello,world&gt; README
git add README
git commit -m"first commit "
</code></pre>

<p>配置git的用户信息</p>

<pre><code class="language-python">
git config --global user.name "Example Surname"
git config --global user.email "your.email@gmail.com"
git config --global push.default "matching"

</code></pre>

<p>到此我们就可以在自己本地的仓库上做任何的事情了。但是只是在本地仓库并未能够和其他人合作。那么我们需要一个服务器做中转，这样我们提交过去，别人也可以在那里获取到最新的代码。<br />
因此我们需要到github或者bitbucket或者其他的提供git服务的网站上，申请一个仓库的链接。<br />
比如：</p>

<pre><code class="language-python">git@github.com:${your_name}/${your_res_name}.git
</code></pre>

<p>我们要做的就是将自己的代码仓库和这个地址联系起来。使用如下命令就可以达到我们的目的：</p>

<pre><code class="language-python">git remote add origin git@github.com:${your_name}/${your_res_name}.git
git push -u origin master
</code></pre>

<p>那么接下来我们还能够做什么呢？我们能够做更多地事情。</p>

<ul>
  <li>创建分支</li>
</ul>

<pre><code class="language-python">git branch -b new_branch_name master
</code></pre>
<p>以master为准创建一个分支，名字是new_branch_name</p>

<ul>
  <li>删除分支</li>
</ul>

<pre><code class="language-python">git branch -d  new_branch_name
</code></pre>

<ul>
  <li>彻底删除</li>
</ul>

<pre><code>git branch -D  new_branch_name 
</code></pre>

<ul>
  <li>分支重新命名，将oldbranch改名为newbranch</li>
</ul>

<pre><code class="language-python"> git branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt;
</code></pre>

<ul>
  <li>提交代码<br />
我们在自己的工作区，写了部分的代码之后，需要提交。但是提交有两种含义。一种是本地提交。一种是远端提交。本地提交只有自己看得见。但是远端提交则就是提到了服务器上。大家都可以看得到。</li>
</ul>

<pre><code>#将自己的修改都添加到本地仓库
git add xxx 
git commit -m"我的修改"
git push origin new_branch_name
</code></pre>

<p>git commit实现的就是本地提交。git push实现的就是远端提交。</p>

<ul>
  <li>更新仓库<br />
更新仓库就是将远端的东西都拿下来。简单地命令如下</li>
</ul>

<pre><code class="language-python">git pull
</code></pre>
<p>即是更新当前分支与远端分支保持一致。<br />
但是这种方式相当于将远端分支的所有提交fetch 下来，然后做merge操作。类似如下的操作</p>

<pre><code>git fetch origin/new_branch_name
git merge origin/new_branch_name
</code></pre>
<p>这种方式简单，但是会让提交的显得混乱。还有另一种方法：</p>

<pre><code class="language-python">git fetch origin/new_branch_name
git rebase origin/new_branch_name
</code></pre>

<p>merge和rebase的不同之处在于，rebase是new_branch_name的本地提交，以远端仓库的最后一次提交为准，挨个的增长上去。提交就显得很有序。</p>

<ul>
  <li>检查提交记录</li>
</ul>

<pre><code class="language-python">git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative --name-status
</code></pre>

<p>我们可以通过<code>gitk&amp;</code> 的方式查看文件的日志。有些时候我们也可以通过命令行更为直观的看到提交日志。<br />
如同上面的命令。在命令行中直接回车，你会看到意外地惊喜。</p>

<ul>
  <li>修改提交记录<br />
这里的修改指的是提交到本地仓库没有提交到远端。如果已经提交到了远端，一般是改不了的。</li>
</ul>

<pre><code class="language-python">git rebase -i head~n

# Commands:
# p, pick = use commit （使用本次提交）
# r, reword = use commit, but edit the commit message（使用本次提交，但是要修改提交的message）
# e, edit = use commit, but stop for amending（使用本次提交，但是禁止追加操作）
# s, squash = use commit, but meld into previous commit（使用本次提交，但是要合并到上一次）
# f, fixup = like "squash", but discard this commit's log message（和squash一样，但是不使用本次的提交信息）
# x, exec = run command (the rest of the line) using python（运行python命令）

</code></pre>
<p>上面的命令可以讲从head到第head-n次的提交修改进行修改。比如修改commit的信息和将几个提交合并在一次。</p>

<ul>
  <li>git补丁的创建及应用<br />
创建补丁的方式有两种，一个是<code>git diff</code>，另一个<code>git format-patch </code><br />
<code>git format-patch</code>的命令方法:</li>
</ul>

<pre><code class="language-python">#将当前分支超前master的commit做成补丁
git format-patch -M master

#hashcode之前n个提交做成补丁，hashcode不写，默认是head
git format-patch –n hashcode  

#检查补丁是否可以成功打上
git apply --check 0001-xxxx.patch

#开始打补丁
git am 0001-xxxx.patch
git am 0002-xxxx.patch
</code></pre>

<p>git diff的命令方法</p>

<pre><code>git diff SHA1 SHA2 &gt; diff.patch
git apply diff.patch
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git命令行总结-rebase]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/17/gitming-ling-xing-zong-jie-rebase"/>
    <updated>2015-10-17T22:11:24+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/17/gitming-ling-xing-zong-jie-rebase</id>
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/book/zh/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88">原文</a></p>

<p>使用git rebase的有一条不能去违背的rule，那就是已经提交的commit，不要做rebase操作。</p>

<p>rebase，就是衍合，就是将一个已经committed的commit重新在另一处做提交。它的意义在于将提交记录显得清晰，有条理，切整洁。这是他和merge最大的区别。</p>

<p>##rebase的命令格式如下:</p>

<pre><code class="language-python">git rebase [-i | --interactive] [options][--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;][&lt;upstream&gt;] [&lt;branch&gt;]
</code></pre>

<p>如果我们的开发分支dev_branch从master开出来，那么rebase的命令如下：<code>git rebase master dev_branch</code><br />
它的工作原理：从dev_branch和master的共同祖先开始，后续所有在dev_branch上面的提交都将以master当前最新的提交为新的基准点再次挨个提交。这是重新生成新的提交而非做合并。你会发现在dev_branch上的同样的commit在master上的SHA1校验码是不一样的。</p>

<p>此外rebase还可以做很多别的有意思的操作，假设如下的一种情况，我们有一个dev1分支，dev1-1分支，和master分支。dev1来源于master的A点，它上面有B，C，D三处提交，dev1-1则是来源于dev1的B点，它上面有E，F两处提交。当我们要将dev1－1 提交到master，而不提交dev1的时候，应该如何使用rebase呢？<br />
我们用到的命令就是｀git rebase –onto master dev1 dev1-1`。这个命令就是从dev1-1和dev1的共同祖先开始之后的所有提交依次重新提交到master分支上。因此我们就跳过了dev1，直接将dev1-1合并回到master。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git命令行总结-log]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/17/gitming-ling-xing-zong-jie-log"/>
    <updated>2015-10-17T22:08:49+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/17/gitming-ling-xing-zong-jie-log</id>
    <content type="html"><![CDATA[<ul>
  <li>git 输入部分提交的log日志</li>
</ul>

<pre><code>git log --name-only --oneline 8692a53f1..HEAD| grep -v '.{7} '  | uniq 
</code></pre>

<ul>
  <li>格式化文件输出</li>
</ul>

<pre><code>git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative --name-status
</code></pre>

<ul>
  <li>将某一个commit之后的提交做成patch</li>
</ul>

<pre><code>git format-patch -M HEAD~1
</code></pre>

<ul>
  <li>将patch打到我们的开发分支</li>
</ul>

<pre><code>git am xxx.patch
</code></pre>

<ul>
  <li>vim中格式化json</li>
</ul>

<pre><code>:%!python -m json.tool       
</code></pre>

]]></content>
  </entry>
  
</feed>
