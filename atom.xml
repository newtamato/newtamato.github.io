<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[番茄手册]]></title>
  <link href="http://www.newtomato.me/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2016-05-29T17:28:16+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于自动化测试的一些思考]]></title>
    <link href="http://www.newtomato.me/blog/2016/05/29/zi-dong-hua-ce-shi"/>
    <updated>2016-05-29T17:12:45+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/05/29/zi-dong-hua-ce-shi</id>
    <content type="html"><![CDATA[<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-05-29-%E6%9C%BA%E5%99%A8%E4%BA%BA.jpg" alt="机器人-w300" /></p>

<p>之所以想到自动化测试，是因为想要能够从技术的角度解决一些我们经常的重复性的工作。<br />
重复性的工作特别多，如果能够有一套合适的工具，比如有一个智能一点的机器人，辅助我们，而我们只要在喝一杯咖啡的时间，回来就能够看到测试的结果，那么能够省去我们不少的精力和时间。</p>

<p>对于游戏开发测试而言，我们经常要做的就是对某个功能不断的测试。比如如下的情况。</p>

<blockquote>
  <p>购买一个道具。<br />
点击按钮触发面板弹出，触发相关动画和界面数据的相关初始化操作。此次为一个二次确认面板。<br />
点击购买。<br />
开始发出通讯请求。<br />
然后响应回来。根据服务器发来的数据决定此次操作是否合法。<br />
如果合法，则弹出相关的面板和动画。<br />
如果不合法，则也是弹出面板提示用户。</p>
</blockquote>

<!--more-->

<p>这样的细小的逻辑，经常是功能测试人员所需要检查的。大部分自动测试工具也做不到如此细致的检查。</p>

<h2 id="section">测试工具</h2>

<ol>
  <li>
    <p>###按键精灵和AutoTouch<br />
**	必须使用越狱的苹果手机上面**<br />
 用过这两个工具的人都差不多知道他们是来做什么的，就是能够录制用户的操作，然后通过回放的功能将操作重新跑一边。这能够满足一些需求，但是要求屏幕上出现固定位置的按钮之类的触发，如果换了位置。那他就不起作用了。<br />
 AutoTouch还能够编写部分lua脚本，通过一些位置信息或者颜色信息等函数来自定义一些逻辑。确保我们触发正确的位置。<br />
 但是他们都有一个共同的缺点就是，他们要求此次执行的时序之间的时间必须一致。如果本次录制的时候，A点和B点之间触发的时间为1s，下次再回放的时候，机器性能有些许偏差，成了0.8s，那么B点的点击就失效了。这样自动测试也就失败了。<br />
 <strong>同时，这样的工具只能负责点击，而对于具体操作结果是怎么一回事，就无能为力了。</strong><br />
 比如，我们购买道具，如果支付成功。接下来，我们可能继续购买，但是如果失败，就弹出界面通知。按照录制的操作，此处失败的购买就会导致原先的录制回放失败。</p>
  </li>
  <li>
    <p>###TouchTest Lite<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-05-29-TouchTestLogin.png" alt="TouchTestLogin-w200" /></p>

    <p>他们的官方网站做的视频介绍<a href="https://www.soasta.com/blog/touchtest-lite-part-1/">在此</a>。从视频上面可以看出，他们是将我们的应用的点击事件全部发送到了自己的服务器上面（前提是我们在他们的服务器上面先注册，才能够做测试）。然后通过后台管理，点击录制，收集点击事件。才能做成回放处理。这样有一个好处在于不必越狱手机即可使用。<br />
 但是这样也依赖于网络请求，如果网络环境差，我们的录制就很有可能失败。<br />
 不过看到他们这样的产品还提供各种工具和Example，我就忍不住下载下来尝试一番。可惜的是，到目前为止总是出现，设备不匹配的错误。后台认为已经connected了，但是启动应用总是不能成功的录制。十分可惜。</p>
  </li>
  <li>
    <p>图像对比,控件识别<br />
 在自动化测试中，空间识别是比较重要的，因此记录点击的坐标在不同的分辨率的设备上有的时候是不起作用的，但是如果能够识别空间，那么一切就方便许多。因此会出现类似<strong><a href="http://my.oschina.net/u/940726/blog/103328">White</a></strong>这样的工具。但是这个工作我现在的项目是用不到的。<br />
 但是对于我们的项目，暂时没有找到合适的控件识别工具。<br />
 于是对于UI界面上是否正确的测试，我想到的是图像对比，我们事先提供一张正确的图片，然后将结果图片和此张图片进行对比。如果对比成功，那么UI测试就没有问题。<br />
 这样对我们截图图片的时机就要求很严格。如果有动画，动画时间较长，就需要等待动画截至之后做截屏。然后比较。这样一来，就需要具体时机具体判定了。</p>
  </li>
</ol>

<h2 id="section-1">解决方案</h2>
<p>综合以上的考虑，我能想到解决我们工作需求的自动化测试工具就是一套自己开发的解决方案。<br />
我们要知道，一次操作的具体返回。成功是什么操作，失败又是什么操作。<br />
这套解决方案，要能够提供如下的功能</p>

<ol>
  <li>单纯的录制，单纯的回放，比如购买，成功。失败的情况可以不处理。</li>
  <li>触发功能。比如点击购买，剩下的事情便交给AI智能的处理。</li>
</ol>

<p>第一条单纯的录制，是比较简单地，只要把用户的操作都记录下来，如实的播放出来即可。<br />
第二条就需要特殊处理。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/a.png" alt="流程图-w400" /></p>

<p>A面板的controller肯定有这两个与控件绑定的函数。<br />
调用购买确认函数，一定会触发购买是否成功的逻辑函数.<br />
而这个时候，我们只要再此函数中将各种条件判定做处理，拿到返回结果保存起来。等我们喝完咖啡回来，就能看到明确的展示。对结果做一些可视化的展示，效果更佳。</p>

<p>这需要在代码中增加许多代码，对开发这个功能的程序员便有额外工作。但是这样做有极大的好处，他能让很快检测我们自己的工作是否有疏漏。也能加快测试时间。</p>

<p>其实我们在开发中，还有一些问题需要注意，就是数据的变化，尤其是在和服务器通讯前后。比如此次购买。<br />
在购买成功前后对会发生变化的数据做一个profile。我们对变化的数据是清楚的，购买一个道具需要50金砖。占用1个背包格子等这些数据变化。然后在购买结束之后，对这些变化的数据做unittest。如果不符合变化，那么就证明此次购买出现了问题。</p>

<p>这样既能保证数据的正确又能够节能人力，很快看到一个清晰的结果。</p>

<p><strong>上述，是我个人一些想法，也正在努力的希望自己能够按照这个思路开发出一套合适我们自己的测试工具。<br />
我的这套思路其实并没有解决所有问题，比如图像识别，如果真的要做这样的功能，上我上面提到的，需要截取图像的时机正确，并且不能发生变化太多。购买之后，肯定会界面上钱发生变化。物品数量发生变化。如果和要对比的图片钱和物品数量不一样，那本来是正确的也会判定不正确。所以做起来是比较麻烦的。<br />
所以如果真的有一天，科技的发展到机器人智能时代，我们给他们设定一些程序。通过他们的点击和图像识别能力，辅助我们测试工作。那么我相信这样的自动化测试才是最完美的测试。真心期待那一天的到来。</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[神秘海域4 通关截图纪念]]></title>
    <link href="http://www.newtomato.me/blog/2016/05/24/shen-mi-hai-yu-tong-guan-jie-tu"/>
    <updated>2016-05-24T11:40:43+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/05/24/shen-mi-hai-yu-tong-guan-jie-tu</id>
    <content type="html"><![CDATA[<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2016-05-24-IMG_0407.jpg" alt="IMG_0407" /></p>

<p>最后一战，和雷夫作战，大呼过瘾！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《神秘海域4》通关纪念]]></title>
    <link href="http://www.newtomato.me/blog/2016/05/22/shen-mi-hai-yu-4"/>
    <updated>2016-05-22T21:20:30+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/05/22/shen-mi-hai-yu-4</id>
    <content type="html"><![CDATA[<p>上周通关了<strong>顽皮狗</strong>最新作品《神秘海域4》，相信不少朋友已经被其他人安利过这部作品了。<br />
喜欢的自然非常喜欢，不喜欢安利了这个也不会立马就有兴趣。<br />
但是我相信，这款游戏一定是不容错过的！他让整个PC游戏的档次提升到了令人发指的地步。</p>

<p>我对这个游戏，从以下几个方面评价。<br />
<!--more--></p>

<h2 id="section">游戏节奏</h2>

<p>游戏上来就是一场海战。我还没有来得及明白怎么回事？就已经被人塞了把枪，开始射击了。只记得一定要活下来了。不能上来就over。整个海战节奏速度快，追戏紧张。放开背景音乐。整个人都燥热起来。一上来就吸引了我。然后是是回忆小的时候发生的事情。平缓的讲述了一些兄弟情义。然后巴拿马越狱。再然后平淡的幸福生活。再然后去庄园拍卖会上抢夺十字架。整个节奏松弛有度。新鲜感一直都保持的不错。每隔一段时间就有一些雇佣兵过来陪你解闷，攀爬的累了，就会有新的谜题出来等你解开。剧情的引导慢慢的也告诉了我们他们之间发生了什么，不致于枯燥。<br />
## 游戏画质<br />
先上图<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/神秘海域5.png" alt="神秘海域5" /><br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/神秘海域4.jpg" alt="神秘海域4" /><br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/神秘海域3.jpg" alt="神秘海域3" /><br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/神秘海域2.jpg" alt="神秘海域2" /></p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/神秘海域1.jpg" alt="神秘海域1" /></p>

<p>截取千万张图片也都是静态的，不如亲自试玩来的真是。<br />
镜头变化场景渲染都没有卡住。甚至也没有看出掉帧的现象。光影都是变化的。例如窗户上面玻璃的光根据玩家远近左右角度的不同能看到光线不一样的变化。<br />
印象最深刻的之一，就是内森德雷克被困在岛上。一场大雨之后，他爬上来，整个天空都是阴暗的。那种雨后阴冷的感觉扑面而来啊！岛上的植物或者此刻的岩石，感觉触碰上去都是阴冷冰凉的感觉。非常的真实。之二，就是内森被困在车里，此时车要爆炸了，车里起火，呼的一下，火苗就上来了。然后另一处也忽的就冒出了另一团火。这种火苗看上去非常逼真。和其他游戏比起来更真实一些。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/fire.gif" alt="fire" /></p>

<h2 id="section-1">游戏手感</h2>

<p>这是我最想说，也最想问的。这种手感是怎么调试出来的？难道顽皮狗有自己的一套手感引擎不成？<br />
	既要让玩家觉得真实，又要让玩家不容易失手。爬窗户，爬墙，爬悬崖，荡绳子，荡铁杆等等。每一次我都有种自己要摔死了但是又真的能够跳过去的感受！<br />
	荡绳子是我觉得最爽的一种体验，害怕要跳下去，但是跳下去也不会死的一种疯狂感。<br />
	玩家拿着绳子，从高空跳落。镜头跟随玩家下跳下俯视看到下面的深谷，然后被绳子的拉力扯住，被甩到另一个方向。真实地展现了那种跳的感受。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/jump.gif" alt="jump" /><br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2.gif" alt="2" /></p>

<p>如果没有恐高症，玩这种游戏是一种愉快的享受，但是我刚好有一些恐高。且容易入戏。看着自己跳来跳去其实心都要跳出来了啊！手心里全是汗！<br />
	除了攀岩，还有开车。且有很长一段的操作都是需要靠开车完成。<br />
	这是我要吐槽的地方。车开的非常的辛苦。需要熟练的玩家才能开的舒畅和爽快。像我等手残的玩家，只能是被虐的不轻才通的关。<br />
	《十二座塔》的那一章节，全靠开车，有的时候头晕的很难受。这是我最不喜欢的地方吧。</p>

<h2 id="section-2">故事性</h2>
<p>故事才是可以吐槽的地方。首先男主角内森的哥哥（年轻的时候也是帅人一脸），他被关在巴拿马监狱中，关了15年，现在应该是13年，他被本作大反派雷夫给弄了出来，一直在研究海盗宝藏。按理来说他身上有很多阴暗的点可以说，我一直以为他会黑化，然并卵。如果他是反派，也走上了海盗的诅咒。整个故事性才有看头啊。<br />
	其次内森的老婆，突然出现在丛林中。太突然了。尽管是为二人“同甘共苦”打下基础，但是突然出现的老婆也太令人不可思议了。海盗藏身之所这么容易找得到，为什么雷夫找了这么多年？此处再次验证雷夫是被编剧坑死的。<br />
	接下来，就讲讲雷夫，在这里我觉得他怎么那里不对？为了成为坏人而坏。故事里本身他是和德雷克兄弟一起寻宝。后来出了点事情。狱长要占他们一部分财富。即使当时同意，日后也可以用别的手段干掉狱长。何必非得在我方不利的时候大动干戈呢？好吧，即使杀了狱长，逃了出来，为什么要等到13年才去找山姆德雷克呢？又或者为什么不找内森呢？或者用把哥哥救出来的条件让内森德雷克就范呢？还去拍卖会上面拍卖那个十字架。明明已经知道此时的山姆已经隐匿了。还不提高警觉！生生的让人替他着急！他到底为什么要那么坏呢？剧情告诉我们他是要证明自己的能力，不是一个二世祖！真是任性boy啊！<br />
	所以他最后死在宝藏那里也算是得偿所愿。<br />
	所以故事性这里，坏人的坏有点撑不住场面。和《The Last of Us》里面那个恋童癖大卫比起来，真是差太远。<br />
	最后在说一下，雇佣兵女首领。好帅的一个人。攀岩耍技了得的内森在他面前就像个弱鸡。总是被暴打。<br />
	本来有一个三人对打的场面。我还是很期待的，结果内森又被她打出了窗户外面。估计这段戏也不好处理。于是顽皮狗就剪短了打斗的场面。<br />
!<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/b.gif" alt="b" /></p>

<h2 id="section-3">海盗的故事</h2>
<p>据说顽皮狗这次使用的是历史上真人真事改变的故事。但是对于亨利·埃弗瑞的结局做了另外的处理。<br />
亨利·埃弗瑞和他的船员一起打劫了冈兹威号，也就是莫卧尔王朝的商船。这艘船上有价值4亿美金的财富。然后他的船员被西班牙政府给抓获，被关在了巴拿马监狱旁边的那个古堡里面。并且在里面留下了一个十字架。十字架里面有一封邀请函，是亨利·埃弗瑞发出的。邀请海盗们共建一个世外桃源。在那儿他们平等的生活。于是许多海盗慕名而来。但是不知出于什么原因。一些海盗头目组成了一个联盟，把财富从世外桃源中转移到新德文。把反抗他们的海盗船员统统杀死。但是联盟内部有产生了分歧，互相残杀起来。于是亨利·埃弗瑞设计“冰释前嫌，共享太平”的目的让他们一起来开会，结果却统统把他们毒死了。但是一个叫图的海盗却没有死掉，他找到亨利·埃弗瑞，两人决斗。最终都死在宝藏里。</p>

<p>亨利·埃弗瑞最终也被金钱蒙蔽了双眼。他的故事如果好好挖掘一下，就是一个《霍比特人-五军之战》里面<strong>索林·橡木盾</strong>的故事，索林·橡木盾最后醒悟过来了，而亨利·埃弗瑞没有。</p>

<p>顽皮狗此作给我的感受不如上一作的美国末日。在人物刻画上面，所有觉得都没有达到一定的深度。我不是专业的评论家，只是个人感受。只有攀爬和射击给我带来了快感。其他的似乎是遗忘而过。但是美国末日到现在听到他的音乐，想到乔，想到艾莉最后直视大叔的眼神，这些都让我陷入末日的那种感伤中。非常耐人寻味。<br />
我想游戏给人带来的至高境界大概如此吧。而此作在这一点上差强人意。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC上面搭建PHP开发环境]]></title>
    <link href="http://www.newtomato.me/blog/2016/05/15/mac-apache-php"/>
    <updated>2016-05-15T22:37:05+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/05/15/mac-apache-php</id>
    <content type="html"><![CDATA[<p>最近抽空在MAC上尝试搭建一个PHP开发环境，把从github上找到的一些开源的框架运行起来。<br />
由于曾经做过这样的工作，以为是轻车熟路，结果自己也是踏错不少坑。现在记录总结下来，免于日后辛苦。<br />
<!--more--><br />
首先，我的电脑环境是10.11.4 EI Caption版本。<br />
MAC本身自带了一个php开发环境。如何验证呢？<br />
只要你打开命令行，输入如下命令<br />
<img src="http://www.newtomato.me/images/1463305012104.png" alt="Alt text" /><br />
能看到反馈，就证明电脑自带php，我们只需要做一些Apache的配置即可。<br />
Apache的目录在<code>/etc/apache2</code>，我们通过命令行进入即可。<br />
进去之后，打开http.conf文件，查找到Document这个标签，你会看到他定义的目录位置<br />
<img src="http://www.newtomato.me/images/1463306474896.png" alt="Alt text" /><br />
暂时先不要改这个地方。<br />
我们先到<code>/Library/WebServer/Documents</code>下面看看。这个文件夹下面有什么？<br />
<img src="http://www.newtomato.me/images/1463306562923.png" alt="Alt text" /><br />
这里面有一个index.html.en文件。<br />
ok，此时我们启动Apache<br />
启动命令<code>sudo apachectl start</code><br />
关闭命令<code>sudo apachectl stop</code><br />
重启命令<code>sudo apachectl restart</code></p>

<p>启动Apache之后，打开浏览器，输入<code>http://localhost</code> ，此时我们会看到 <strong>It Works!</strong>。此时Apache就已经正常的启动了。</p>

<p>他的webroot就是上面提到的<code>/Library/WebServer/Documents</code><br />
现在需求是，需要修改这个目录，将他指向到我们要的目录。<br />
直接修改这个文件可以么？<br />
比如我们的目录位置是<br />
%{HOME_PATH}/app<br />
先来尝试修改一下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">DocumentRoot "%{HOME_PATH}/app"
</span><span class="line">&lt;Directory "%{HOME_PATH}/app"&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>%{HOME_PATH}换成你自己的用户目录即可。</p>

<p>然后在这个目录中增加一个index.php文件。内容如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;?php
</span><span class="line">print("hello,world");
</span><span class="line">echo phpinfo();</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ok，准备就绪，重启Apache即可。<br />
然后浏览器打开 <code>http://localhost</code><br />
看到了什么了么？<br />
没错不在是我们上面的It Works而是如下这样的截图，他就是讲Apache的运行配置输出到浏览器中了。<br />
<img src="http://www.newtomato.me/images/1463307832738.png" alt="Alt text" /></p>

<p>这是修改我们目录最简单的一步。<br />
接下来，我们可以尝试修改配置，增加虚拟主机。这个工作大部分Apache都为我们做了，我们现在配置即可。<br />
首先打开httpd.conf,查找到httpd-vhosts这个单词，找到他对应的行，将注释去掉</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># Virtual hosts
</span><span class="line">Include /private/etc/apache2/extra/httpd-vhosts.conf</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后到<code>/etc/apache2/extra</code>下面打开httpd-vhosts.conf这个文件。在里面按照下面这个模板增加一些配置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;VirtualHost *:80&gt;
</span><span class="line">     DocumentRoot "%{your webdocumen name}"
</span><span class="line">     ServerName %{your domain name}
</span><span class="line">     ErrorLog "/private/var/log/apache2/sites-error_log"
</span><span class="line">     CustomLog "/private/var/log/apache2/sites-access_log" common
</span><span class="line">     &lt;Directory /&gt;
</span><span class="line">                Options Indexes FollowSymLinks MultiViews
</span><span class="line">                 AllowOverride None
</span><span class="line">                 Order deny,allow
</span><span class="line">                Allow from all
</span><span class="line">      &lt;/Directory&gt;
</span><span class="line">&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>比如我们此处，将<code>%{your webdocumen name}</code>替换成上面的%{HOME_PAHT}/app，然后<code>%{your domain name}</code>替换成<code>myapp.com</code>。<br />
同时讲myapp.com在<code>/etc/hosts</code>中进行如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">127.0.0.1 myapp.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后重启Apache。浏览器中敲入<code>http://myapp.com</code></p>

<p>如果你能够看到和上面一样的hello，world的输出，那么你就大功告成了！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocos2dx中如何让sqlite3具有加密的功能]]></title>
    <link href="http://www.newtomato.me/blog/2016/05/07/sqlite-cocos2dx"/>
    <updated>2016-05-07T19:00:44+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/05/07/sqlite-cocos2dx</id>
    <content type="html"><![CDATA[<p>sqlite3是一个轻量级的但同时功能完备的数据库系统。既然是数据库，那么他最基本的功能就是为我们存储一些基本的数据。<br />
我们经常遇到能使用它的场景是这样的，比如客户端（包括浏览器，App应用，游戏），需要存储一些数据到本地，这些数据比较大，存储在本地是最合适的。<br />
但是这样的情况下，有很多种手段我们可以使用，比如使用json,或者xml的方式。一般某些引擎都会提供一些接口给我们调用。以往的Adobe Flash就有一个shareData的数据存储。cocos2dx则使用userData，实际就是存储到UserDefault.xml中。<br />
<!--more--><br />
但是这样做有几个缺点:<br />
1. 以上两种方式没有提供加密的功能。也就是我们存储的数据会被别人很容易导出来。<br />
2. 如果数据过多，生成的文件大小势必也会变大。<br />
3. 数据多，还会造成一点，就是系统io时间有所损失。尤其是在启动客户端的时候，不能很快将界面展示出来，就会造成用户体验的损失。</p>

<p>而上面介绍的sqlite3，对于这些问题都能解决。</p>

<p><strong>他首先足够小，简单易操作，且读取写入等操作较快。有自己的压缩算法，因此我们写入的数据不会占据太大的空间。且提供加密的功能，自己的数据库即使被人拿到也不会容易被破解。</strong></p>

<p>在cocos2dx的2.2.6版本中，已经把sqlite3的包引入进来了。因此它的基本功能我们都能看到。</p>

<p>sqlite3的接口<br />
<img src="http://www.newtomato.me/images/1462613459251.png" alt="Alt text" /><br />
database的接口<br />
<img src="http://www.newtomato.me/images/1462613520932.png" alt="Alt text" /></p>

<p>打开sqlite</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local sqlite3 = require("lsqlite3") --创建sqlite3对象
</span><span class="line">local db = sqlite3.open(databasefilename) -- 打开一个db
</span><span class="line">local sql=[[
</span><span class="line">	 		SELECT * FROM userData ;
</span><span class="line">    		]]
</span><span class="line">local ret = db:execute(sql) --执行上面的sql语句。他有自己的返回值。可以打印看看结果
</span><span class="line">db:close()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的方式就是操作sqlite的一个基本模式。<br />
所以说大部分工作，cocos2dx已经替我们实现了。我们只要使用它即可。<br />
但是不足之处在于2.2.6版本并没有提供sqlite3加密的功能。这一部分需要我们自己做。</p>

<p>还好，网上有不少同学对此已经贡献了自己的方法，我也是为此折腾了许久才搞定。所以别人的路我们拿来参考，但是真要弄明白还是需要自己去实践才可以的。</p>

<p>首先，加密可以自己实现，那就需要自己编写c代码，扩展sqlite3。幸运的是，我们有<a href="http://wxcode.sourceforge.net/components/wxsqlite3/">wxSqite3</a>. 站在巨人的肩膀上我们才能看的更远。<br />
下载wxsqlite3之后，将整个文件下放到cocos2dx的项目下面。我放到了external的下面。然后在xcode中只需要引入如下文件。其他文件不需要引用到xcode，但是也需要放在哪个目录下面。工程运行时也会调用。引用sqlite3secure.c这个文件是因为他已经include了其他的文件。（我曾尝试把其他文件也都引用进来，发现许多的报错，于是把报错的文件都挨个删掉，结果剩下这个文件不报错且可以运行）<br />
<img src="http://www.newtomato.me/images/1462615862424.png" alt="Alt text" /><br />
如果项目中有其他的相同的文件，删掉他们即可。<br />
然后只要在我们操作数据库之前，调用一次<strong>sqlite3_key( sqlite3 *db, const void *pKey, int nKey)</strong>，这个函数就是对数据库加密.</p>

<ol>
  <li>sqlite3_key：设置秘钥</li>
  <li>sqlite3_rekey: 重新设置秘钥，可以通过后两个参数为nil来清空数据空的秘钥</li>
</ol>

<p>这里推荐一个工具sqlitebrowser，如果我们的db没有加密，拖入到这个应用中，能够很清楚的看到我们的数据库表，但是如果一旦加密，应用就无法读取这个表。</p>

<p>这样还不算结束，需要将打开它的某些宏定义，这样某些函数我们才能够正确的调用。<br />
<img src="http://www.newtomato.me/images/1462616491431.png" alt="Alt text" /></p>

<p>这样配置之后，在clean工程，然后重新编译运行。差不多就能够运行起来。</p>

<p>下面的话，是我自己在研究wxsqlite3的时候，想到的。如果你的项目已经能够运行起来，那么下面的话可以忽略不看。<br />
仔细看这个wxsqlite3，其实并没有在项目任何地方做设置，也没有被完全引用，但是他是如何运行起来的呢？程序运行的时序，分析下来，应该是如下的顺序：<br />
lua_extension.c先被调用注册了了一些供lua调用的函数。<br />
<img src="http://www.newtomato.me/images/1462617671136.png" alt="Alt text" /></p>

<p>接下来我们调用lsqlite3之后，就按照我上面说的开始注册sqlite3的函数，然后就是db等函数。因此分析可以知道，运行时候已经就是将要wxsqlite3的函数和lsqlite3要调用的函数映射在一起。<br />
因此我的理解是这样，项目在编译期间，由于导入了sqlite3secure.c这个文件，编译器会扫描这个文件引用的其他.h,.c文件，将.h文件转换成同名的.c文件进行编译。如果.h里面声明了一个函数，并且在.c中有相关的实现，那么就可以编译通过。编译成功之后这些函数可能挂在某些命名空间下面，也可能是全局函数，所以我们调用的时候，就能找到这个函数，和是否在同一个目录没有关系。<br />
上面的理解，和后来搜索到的c语言编译刚好不谋而合，本人c语言的基础早在大学就已经还给了老师，毕业之后一直使用面向对象的思想使用语言。由于接触lua才开始研究c和c++，果然是一入编程深似海。惭愧惭愧啊！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[黑暗和希望共生]]></title>
    <link href="http://www.newtomato.me/blog/2016/05/02/limbo-game"/>
    <updated>2016-05-02T20:27:47+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/05/02/limbo-game</id>
    <content type="html"><![CDATA[<p><img src="http://www.newtomato.me/images/地狱边境1.png" alt="Alt text" /></p>

<p>上周通关了《地狱边境》这款游戏。<br />
在最后一刻，我终于踩到了节奏点上，小男孩一下去穿过空间墙。一切都慢了下来。这一刻我紧张的神经更加感动起来。<br />
这个游戏不仅仅是一个操作解密游戏。他的剧情更加的吸引我。<br />
<!--more--></p>

<p>说起剧情，我们不得不先讲讲他的名字《Limbo》，这个名字直译过来就是地狱边境，但它出自宗教术语，也称“灵薄狱”，具有“遗忘之地、囚禁之地、中间过渡状态(或处所)”等含义。也就是说他是一种人死亡之后，灵魂再次过渡的地方，暂时没有去天堂或者地狱，而是游走于这里，等待上帝的救赎。</p>

<p>根据官方的解释，小男孩的姐姐生死不明，他来到Limbo中开始寻找自己的姐姐。<br />
所以据此我们可以推断，小男孩看着姐姐先他“死去”，但是小男孩并不确定或者是孩子他还不懂姐姐其实已经死了，或许他准备去确认，于是自己也踏入了“死亡”，醒来之后，自己已经身在limbo中了。就像是《小岛惊魂》里面的妮可基德曼，她和两个孩子已经死去了，但是她却不知道，于是以鬼的身份生活在自己的房子里面。还以为活在自己房子里面的人是“鬼”。<br />
小男孩就是这种状态，他醒来之后，开始了一系列的冒险。有巨大的蜘蛛，又不怀好意的其他人。还有危险重重的机关。在这里，到处都有死去的人，而能够活在这里的人都已经失去了人性。历经千难万险，小男孩终于找到了自己的姐姐。<br />
<img src="http://www.newtomato.me/images/地狱边境3.png" alt="Alt text" /></p>

<p>这一刻两个人都没有说话或者向前移动。对这个来之不易的重聚都有种失而复得的喜悦和小心翼翼。姐姐一直没有回头，这一刻正如《盗梦空间》里面最后一幕，小李子看到自己的一双儿女在花园里玩耍，但是直到最后两个孩子都没有回头，让观众陷入了一种说不明郎的结局中。此刻姐姐没有回头，也让我感到一种不可名状的忧虑之中。</p>

<p>通关整个游戏之后，我一直被这个故事吸引。最后留下的那段梯子，代表一种希望。可是字幕之后，我们看到梯子已经毁坏。人已经不在了。而上面有一个形状像是车一样的东西。而下面有两团苍蝇。</p>

<p>于是我不得不相信两人已经死去了。</p>

<p>回过头，我们就把故事串联起来。经历Limbo这些关卡的只有小男孩，那么小女孩呢？是否可以说小女孩其实不在Limbo中，那道无形的墙就是隔开了Limbo和其他空间的边界。小女孩一开始就没有死掉，她和小男孩两个人先后掉入了森林中。就是小女孩所在的地方。可能一开始小女孩晕过去了，小男孩以为姐姐死去了，非常紧张于是自己掉下来的时候就很担心姐姐的生死，结果自己掉落下来还有这么强大的意念，于是死后就进入了Limbo中，Limbo并没有困住自己。他一路向前，冲破了Limbo，于是灵魂来到了最初的地方，和姐姐相遇了。两人都没有死去，但是却被困在了这里。梯子是他们向上求生的的希望，但是梯子最终坏掉了。姐弟两人于是困死在这里。没有找到别的出路。</p>

<p>这个故事就像是人在濒死状态前对自己的一种麻醉。我们被困在这里，但是思想却可以无限想象。想象自己能够突破困难找到出路。潜意识无限的遐想，自己很弱小但是强大。自己和姐姐仍然还活着。但是事实却是另外一种样子。</p>

<p>但是从另一方面讲，小男孩最终找到了自己的姐姐，两人无论是去了哪里，也是在一起，这样想反而会有一种温暖。和你在一起，生死不离弃。</p>

<p>整个故事黑暗中透着一股温暖和希望。而希望又夹杂了黑暗。明确又带有模糊。全看观众自己的理解和心境。而小男孩所经历的种种以及最后那点喜悦，整个故事和寂静岭有异曲同工之妙。都是一个人（强大意念寻找他人的角色）寻找和拯救另一个人的故事。直到最后，故事又没有完全朝着大家幸福的生活在一起的基调上走，而是朝着另外的一面既黑暗又不明说的那种故事方向行走。真是让玩家为此揪心不已。</p>

<p>制作这款游戏的公司playdead company，在游戏制作上面，属于深耕细作的那种公司。他们耗时3年才能做上一款游戏。真是匠心别具啊。最近他们又再次推出了一款游戏。《inside》，暂时在steam上没有看到。只在优酷上搜到了他们的<a href="http://v.youku.com/v_show/id_XNzI0MTEzNTQw.html?from=y1.2-1-99.3.7-2.1-1-1-6">预告视频</a>。<br />
从制作人采访手记那里看的这款游戏也是“潜意识迷失的”那种类型的游戏。真是期待万分。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[问题不断的被reopen怎么办？]]></title>
    <link href="http://www.newtomato.me/blog/2016/04/18/problem-reopen"/>
    <updated>2016-04-18T00:12:24+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/04/18/problem-reopen</id>
    <content type="html"><![CDATA[<p>工作中你是否遇到过这样的情况？<br />
分到自己头上的ticket，刚刚被关闭掉，经过QA同学的测试又给reopen了。而且不止一次的reopen。真是恼火啊！<br />
开发同学的工作是修改代码之后，经过自己的开发测试之后，提交到功能分支，QA同学复查的时候往往会找到意外的情况。这种情况我仔细想了一下，总结出能发生这种问题的如下几种情况。<br />
<!--more--></p>

<ol>
  <li>对于需求没有沟通清楚。<br />
这种情况最常见的是在于一个bug没有描述清楚。只有一句话的描述，没有其他辅助的说明性的东西，比如图片，视频之类的。<br />
开发同学按照自己的理解去修改。结果答非所问，于是问题又被reopen了。</li>
  <li>没有经过Review直接提交。<br />
这种情况很常见，尤其是在时间紧任务多还有deadline的情况下，开发的同学也会有种约定俗成的规定，暂时不Review了。直接提交。吃过这方面苦头的不在少数。</li>
  <li>对于某些修改，过于自信。<br />
没有经过自己的测试，直接提交。即使找了其他同学过来Review，由于不熟悉功能，只看代码的语法和规范。结果问题打脸啪啪啪。</li>
  <li>功能测试通过，但是和展示动画等相关的地方被reopen了。<br />
因为这些东西往往容易忽视，没有经过美术同学的Review。</li>
</ol>

<p>不断被reopen的情况是最令人痛苦的，这比要做一个新的功能带来的紧迫感更让人恼火。在一个地方跌倒数次，最容易让我们自己觉得自己是一个傻逼。<br />
可是如何避免发生这种事，找到解决问题的方法，才是此篇文章最要紧的。我想把自己的方法分享出来。希望真心的能够帮到你。<br />
上面4条问题，只要做好严格的code review也就能够保证50%左右的问题被及时的发现。加上在平时开发能够多经过几次的测试，相信剩下也能解决50%的问题。但是就是因为某些测试的步骤太过繁琐，太花费时间。最起来机械性重复性。我相信QA同学对此更有发言权。于是开发测试不彻底就造成了更多的迭代，时间被浪费了。</p>

<p><strong>有的错误我们无法改掉，但是我们可以用更好的方式去检查自己的错误。</strong></p>

<p>这种方法就是检测我们的代码是否正确！<br />
是不是想到了unittest？unittest好用是毋庸置疑的。但是我的方法比unitest简单省事而且更加自动化。</p>

<p>我们大部分的工作场景是需要测试某个功能，比如说购买商品，从一开始点击到最后得到物品以及扣费。这里面包含数值的变化，UI面板，获得物品动画，扣费动画。</p>

<p>涉及到变化的数据包括，数值和背包。因此我们可以从购买开始增加一个检测，在购买之前的数值做一次记录，在购买完成之后，做一次记录。然后比较发生变化的数值，是否是和我们想要的相似。这也就是unittest的思想。（获得物品以及扣费动画最好能够分开做成两个动画。每个动画首先要做的就是保证自己播放没有问题，这样合在一起播放出现错误的概率会降低。）但是如何测试动画没有问题呢？尤其是我们重复的把做相同的事情，测试耗费时间。我能想到的方法就是去调用我们写的这个购买入口函数，然后增加一个try catch finally等事情，将报错的信息弹出来，尽早在开发过程中发现，发现问题。但是测试前端仍然需要重复的点击，这些事情我们可以交给机器去做，比如按键精灵。让他们记住我们的操作，下次再来，直接启动按键精灵的脚本即可。而我们要做的就是观看。（做一个看客有的时候能看到更多的问题）这样好像能解决问题，但是我们眼睛看到的有限，一会儿就过去了，怎么能保证做的没有问题呢？那就让录屏软件来帮助我们吧！itools这个神奇的工具就能够将手机上操作直接录屏同步到电脑上面。</p>

<p>上面的方式看似没有减轻我们的工作，但是实际上确实能为我们节省迭代的时间，而且能够保证由我们交付出去的代码是安全的。<br />
实际的开发工作总是有各种意外和边界条件。可能上面我的方法并不适合你当前的问题。但只要能够善于总结问题，善于使用工具，善于反思自己，总会在这混乱之中找到自己的方法。</p>

<p>祝你好运！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 7 error: “Missing iOS Distribution signing identity for …”]]></title>
    <link href="http://www.newtomato.me/blog/2016/04/02/missing-ios-distribution"/>
    <updated>2016-04-02T14:25:05+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/04/02/missing-ios-distribution</id>
    <content type="html"><![CDATA[<p>最近准备重新打包一次我们的游戏，提交苹果，但是却遇到如下的问题。<br />
<img src="http://www.newtomato.me/images/error.png" alt="Alt text" /><br />
这是个怎么回事？难道我的证书出问题了。<br />
<!--more--><br />
于是到开发者member center去检查证书的过期时间。没问题啊。并且在xcode里面证书和签名文件都是能够对应的上的。keychain中文件也都是存在的。<br />
这就奇怪了？</p>

<p>然后赶紧Google一下。没想到手气好到爆，在stack overflow上立马知道了答案。<br />
<img src="http://www.newtomato.me/images/answer.png" alt="Alt text" /><br />
附上<a href="http://stackoverflow.com/questions/32821189/xcode-7-error-missing-ios-distribution-signing-identity-for">地址 </a>，请笑纳。<br />
翻译一下就是WWDR这个中间第三方的证书文件已经过期了，我们要做的就是把它下载下来，然后重新安装，他会自动放到keychain中。但是原先keychain中的文件需要删掉。怎么删掉呢？就是打开keychain-&gt;System, 在View里面选择Show Expired Certificates,找到那个已经过期的证书，删掉它即可。</p>

<p>这样之后，我们就需要重新编译ipa。不能使用已经编译过的。</p>

<p>那么这个WWDR是做什么用的呢？<br />
因为我们在创建自己开发者证书的时候，一般需要先上传一个自己的Cetefication。这个证书的有效性是谁保证的呢？就是这个WWDR来做的。所以说他相当于验证了我们的身份。因此非常的重要。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动更新的一些思考]]></title>
    <link href="http://www.newtomato.me/blog/2016/04/02/zi-dong-geng-xin-de"/>
    <updated>2016-04-02T14:06:28+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/04/02/zi-dong-geng-xin-de</id>
    <content type="html"><![CDATA[<p>自动更新，也称作热更新，是现在手机游戏最常用的一种做法。类似于当年的页游。打开游戏就能看到最新的游戏。<br />
<!--more--></p>

<p>之所以使用热更新是因为，现在我们提交apk或者ipa给平台，需要的审核期非常的长。有的时候需要长达2周才能通过，这对于我们紧急修复一个bug来说成本太高了。<br />
因此热更新就显得非常必要。</p>

<p>热更新的基本原理是，将此次更新的资源打包。部署到cdn上。游戏启动的时候，带上自己的version参数和服务器通讯。服务器判定版本过低就会把更新包的地址发过来，再由游戏客户端自己去下载处理。<br />
下载完成自后，代码生效。玩家看到的自然就是最新的内容了。</p>

<p>但是最近我们遇到了另一个问题，当时头疼了很长时间，但后来一想这不是一件困难的事情啊，只是没有突破固有的思维导致的固步不前。<br />
问题是这样的，我们每次发完cdn之后，一般再次之前会经过很多的测试，基本问题都会一条条的过。但是发布cdn之后，总是又会发现新的问题。这个时候肯定是要修改的。但是在已经熬夜通宵到第二天早上的时候，每个人都是精疲力尽。都希望能够有更简单，成本更低的方法。<br />
于是乎，在经历过几次熬夜通宵之后，我们开始痛定思痛，找到解决方案。<br />
这种东西不是更新，不需要展示给用户，不需要cdn部署，只能通过服务器发来数据。而服务器能发现来的就是字符串。而刚好，lua有能力通过字符串转换成lua对象，loadstring既可以做到。<br />
但是不是每次服务器都发过来一大堆的字符串吧？因此我们需要把它写到设备的缓存目录中。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local name  = serverData.name
</span><span class="line">local content  = serverData.content
</span><span class="line">io.wirte(name,content)
</span><span class="line">name是一个目录结构
</span><span class="line">name = string.gsub(name,"/",".")
</span><span class="line">_G[name] = nil --这样设置之后，原先的代码不在生效，取而代之的是新的lua代码。</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而不是所有的lua文件都是需要这样处理的。有些仅仅是常量。可以直接</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">_G["name"] = content</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>就可直接替换lua的常量。</p>

<p>那么怎么替换json文件呢？<br />
当玩家已经打开游戏，势必有些json文件已经被读入进来了。要修改这些文件，其实就是替换内存中的json对象。和后端服务器约定好一些协议，按照一定的结构直接替换内存的数据就可以了。</p>

<p>这种方法可以在一定的程度上直接更新游戏，节省部署和测试时间。</p>

<p>这种方式非常适合hotfix。紧急要修复的问题。</p>

<p>这种方法并不难，只是在一开始我们都没有想到这里，我们太依赖于以前的自动更新的内容，对于其他的方式从未有过想法。</p>

<p>而这种解决方法从本质上说和已有的自动更新是一码事。正如同在脚边的一颗宝石，而我们只需要弯腰就能捡起来。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工作记事]]></title>
    <link href="http://www.newtomato.me/blog/2016/02/28/gong-zuo-ji-shi"/>
    <updated>2016-02-28T17:13:23+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/02/28/gong-zuo-ji-shi</id>
    <content type="html"><![CDATA[<p>年后回来，我们为了一次活动更新，又搞到了后半夜才完成了上线。这件事成为了A同事离职的导火索，他对我们这种工作节奏已经忍无可忍。于是第二周上班的时候就此提出了离职。<br />
<!--more--><br />
他的离职在我意料之中也在意料之外。意料之外是我们已经在一起有一年多了。期间摩擦都已经磨合的差不多了，许多烦心的事情到最后都差不多在嘻哈玩笑中解决，并不会影响到团队的情绪。况且差不多要到项目收获的时机了。此时离开，当真为他可惜。但是他还很年轻，有的时候无法控制自己的情绪，有些冲动。特别容易受别人的影响，而且有些固执。</p>

<p>我想尽量挽留他，给他点出此时离职的利弊，但是谈话并不顺利，他仍是坚持要离职。对于理由也只是轻描淡写，似乎另有隐情。<br />
如何劝他留下的，用未来的希望和个人的魅力？在一个人失望至此的情况下，说的都很苍白。情怀已经成了最后一个稻草，但提及情怀，反而让固执的心更加冷漠。</p>

<p><strong>人和人真的不一样，何况他和我们查了一代隔阂。我想将自己的经历讲给他听，做事情要有目标，有了目标就要去坚持。不要被外面的诱惑和流言左右自己的方向。冲动迷失的时候不要做决定。先等等，等上两天自己就会想明白的。<br />
这些话都是我自己生活总结。是跌过跟头，犯过错误总结下来的。讲给他听，换来的是他木然的眼神。</strong></p>

<p>我想他对我们已经是失望之极了吧！<br />
人的缘分很奇妙，能呆一起辛苦一年多，已属不易。分开便是阳关道与独木桥。</p>

<p>谈话完毕之后，我有很多想和他说，但是想想都很没有力量。马云说，员工离职，无非两个原因一个是待遇不好，一个是受委屈了。我想我们现在差的就是待遇了。项目尚未有收益，任何保证都有一些望梅止渴。而我们，暂时无能为力。真是实在抱歉！</p>

<p>在我们创业过程中，离开的员工，我想来都觉得很抱歉。在这样的环境中，你们承担的东西肯定是要比其他正规公司要多，但收益未必多。创业团队也最忌讳团队的不稳定，来来去去，不仅让团队里面的人感到不安，更重要的是让别人看来你们很不靠谱。<br />
这也是我们创业要学的一门必修课，如何保证团队的稳定性和激情活力？<br />
初期创造一个相对开心，被需要，有梦想共筑的环境才成为留住人才的主要手段。但是创业周期一旦拉长，光靠梦想是不现实的。适当的增加薪水也是手段之一。缩减工作时间，适当保证工作和生活的平衡性。找到一个工作的节奏。不让疲惫袭击团队。不然负能量满满，四处都是抱怨的声音。但是这样的时间也不能够太长，没有希望和前途的闷头干下去是很辛苦的。</p>

<p>而这门课我们还在继续，直到创业成功。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目进度的几点想法]]></title>
    <link href="http://www.newtomato.me/blog/2016/02/25/xiang-mu-jin-du-de-ji-dian-xiang-fa"/>
    <updated>2016-02-25T12:26:58+08:00</updated>
    <id>http://www.newtomato.me/blog/2016/02/25/xiang-mu-jin-du-de-ji-dian-xiang-fa</id>
    <content type="html"><![CDATA[<p>将项目从0做到1说简单也简单，说复杂也复杂。这里面的变量不多，但是每一个变化都会影响很多东西。<br />
我将这个过程总结成一个公式，</p>

<pre><code>（需求沟通+进度控制+执行操作）X n = 期望的产品
</code></pre>

<p>所谓的n，就是n次迭代。<br />
<!--more--><br />
产品做得怎么样就看我们怎么控制这几个变量。你想团队都能理解在这里做什么，做到那种细致的程度，那么多和他们沟通，每一个环节的负责人不仅仅知道自己做的，还要了解其他环节的负责的东西，比如简单的来说，就是程序需要知道自己做的功能有哪些，还要知道美术方面需要提供什么资源过来，测试环节做了多少，是否有必要跟进。<br />
沟通是最费劲的也是最基础的事情，把一件事传达给其他人，除有详尽的文档之外，还要需要面对面的将需求说明一番，在scrum中这个环节称之为kick off。此时需求的实施方如果有任何问题都是可以直接问。前期对功能尽量有一个完善的考虑。整理出一份甘特图，这就为后面的<strong>进度控制</strong>开始做准备。</p>

<p>需求讲解的明白清楚，就能够划分的细致到位。方便与施工方开始分配时间。<br />
时间对于一个项目来说，就是金钱。越早把demo做出来，就能越早的发现问题改善问题。一拖再拖的习惯势必增加项目失败的风险。有了甘特图，我们就能知道项目进行到了哪一步，有什么现在阻碍了我们。但是总有意外。比如在开发过程中必然还会遇到其他没有周全的地方，或者需求方想要临时增加需求。这些额外插入进来的问题，分大小和严重程度，与需求方沟通，在保证一个功能完整的情况下，可以将锦上添花的细节，甚至某些优化体验的功能降级处理。保证不要影响项目的进度。</p>

<p>在流程规范，做事严谨的大公司看来上面的事情似乎是顺利成章的。但是在小公司，创业公司。我们往往对需求方提过来的需求没有能力说<strong>不</strong>，只是一味的接受，在已经计划好的时间内增加新的需求。进而为了达到deadline的时间，只好加班通宵来解决问题。（这只是我经历的公司的一些问题，不代表其他公司也是这样的）</p>

<p>无论是什么样的公司，需求沟通之后，总是要制定计划。进而开始<strong>执行开发</strong>。各部门分工协作，将需求分块，指定owner。美术按照程序的要求出资源。程序就如同泥瓦工一般把各个资源用代码粘合起来，联调测试，在交付测试同学。这里面也有很多的规范，比如美术提交资源的命名规范，使用的工具，和资源有效性的测试。程序的代码管理，code reviewer等。</p>

<p>如此一个周期下来，一个功能就能够完成，甚至也可以做好一个demo。就看需要重复多少次n。</p>

<p>上面的步骤如此简单。但是执行起来我们往往会迷失在其中，辨不清方向。</p>

<p>问题很多事是出现沟通上面的。尤其是一对多的情况下。美术程序测试都对需求有不同的理解，更糟糕的是，需求提出方并没有将自己的改正需求通知给所有负责人，而是只告诉某一方，而其他人还在按照以前的需求闷头继续做。做完发现不对，可是时间成本已经浪费掉了！真是要了命的变化！而我们总是在犯这样的错误。<br />
再者，每个人都希望能做成好的优秀的完美的产品，因此需求方会提出很多东西，不仅要一个完整的功能还有不少细节。他们说这样可以提升用户体验！或者开发这边做出许多不在需求列表上的功能，他们可能解释说，他们觉得这样很好，玩家用户需要这样的功能。还有美术部分，想到很炫酷的东西，坚持一定要这么做！或者这么说大家会认为这样也是正确的，每个人都对项目有自己的想法，是好的。但是仔细想想，这就是一种迷失，对于一个从0到1的初期demo来说，为什么不能一切从简，从重呢？只要枝干，去掉旁支杂叶！甚至是一个功能，一个活动。都是可以先做出来一个大概的样子，然后再去替换资源也好，优化界面也罢，改善体验都可。</p>

<pre><code>不识庐山真面目，只缘身在此山中！
</code></pre>

<p>只有被需求虐过无数遍，踏过无数的坑，熬过无数的夜，我们才懂得如何做找到一个项目的脉搏。祝各位也在坑中受虐的同学们能及早认清问题所在，争吵和指责都是没有意义的，只会消耗大家的心情，只有让事情按照一定的规律动起来，朝着目标的方向进行着，我们才能自信的掌握节奏，不会被工作所累。<br />
PS:做事不要只闷头看自己的那方寸之间的事情，要把眼光放得远一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[破解apk文件]]></title>
    <link href="http://www.newtomato.me/blog/2015/12/27/android-2"/>
    <updated>2015-12-27T11:25:19+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/12/27/android-2</id>
    <content type="html"><![CDATA[<p>此篇文章涉及到的工具<br />
1. <a href="http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/ApkTool.shtml#download">apktool</a><br />
2. <a href="http://sourceforge.net/projects/dex2jar/">dex2jar</a><br />
3. <a href="http://jd.benow.ca/">jd-GUI</a></p>

<p>所谓道高一尺魔高一丈，做开发需要有职业道德，我们破解apk只是为了研究和学习而不是为了以此盗取别人的劳动成果用以牟利。<br />
只有知道了apk是怎么被破解的才知道怎么最好防范。才知道我们自己做的加密是否有效。<br />
<!--more--><br />
###查看APK里面的内容<br />
上一篇文章我们提到了如何生成apk文件。但是apk文件里面包含了什么呢？如何查看？</p>

<p>首先，apk也即是一种压缩文件的格式。因此我们可以通过解压缩的方式讲文件先打开。（如果打不开，可以现将apk扩展名改为zip然后再解压缩）<br />
打开之后，我们能够看到的文件内容如下：<br />
<img src="./1450615912267.png" alt="Alt text" /><br />
AndroidManifest是看不到东西的，里面乱码一片。<br />
assets是游戏里面的资源文件夹。c<br />
lasses.dex则是源码压缩文件。同样也是无法打开。lib则是一些依赖的库。比如我们上一张提到的quickcocos2dx.so文件。<br />
res则是Android工程需要用到的资源文件，比如闪屏图片。</p>

<p>因此单纯地通过解压缩是看不出的什么有用的东西的。AndroidManifest是一个工程的描述文件，怎么才能够看得到呢？</p>

<p>###解压缩APK<br />
这个时候就用到了我上面提到的apktool文件！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">apktool d xxxx.apk </span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用这种方式就能够apk破解式的解压缩，直接就可以看到AndroidManifest文件里面的全部内容。<br />
<img src="./38ccc90747d8eb7bb7863e12c397356d" alt="Alt text" /></p>

<p>除了能够看到AndroidManifest文件，还可以看到源代码，但是这种方式查看源代码还是不够直观。因此打开之后看到的源码虽不是乱码但是不够直观。</p>

<p>那么还有什么办法呢？<br />
当然有，还记得上面出现的class.dex文件么？我们可以用的dex2jar命令将这个dex转成jar包，然后使用jd-GUI的工具查看源码即可。<br />
<img src="./a.jpeg" alt="Alt text" /></p>

<p>这样一看，就能够看到我们的java代码并没有被加密。那么接下来就是要去加密！</p>

<p>###加密加密加密</p>

<p>重要的事情说三遍。</p>

<p>Android的加密一般使用ProGuard来进行混淆打包。在混淆过后，可以在工程目录的proguard中的mapping.txt看到混淆后的类名，方法名，变量名和混淆前的类名，方法名，变量名。<br />
<img src="./1" alt="Alt text" /></p>

<p>我们要做的就是在我们proj.android下面的proguard.txt文件里面定义我们自己的混淆规则。同时在project.properties里面写<code>proguard.config=proguard.txt</code></p>

<p>混淆的文件的规则如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-include {filename}    从给定的文件中读取配置参数   
</span><span class="line">-basedirectory {directoryname}    指定基础目录为以后相对的档案名称   
</span><span class="line">-injars {class_path}    指定要处理的应用程序jar,war,ear和目录   
</span><span class="line">-outjars {class_path}    指定处理完后要输出的jar,war,ear和目录的名称   
</span><span class="line">-libraryjars {classpath}    指定要处理的应用程序jar,war,ear和目录所需要的程序库文件   
</span><span class="line">-dontskipnonpubliclibraryclasses    指定不去忽略非公共的库类。   
</span><span class="line">-dontskipnonpubliclibraryclassmembers    指定不去忽略包可见的库类的成员。  
</span><span class="line">  
</span><span class="line">保留选项   
</span><span class="line">-keep {Modifier} {class_specification}    保护指定的类文件和类的成员   
</span><span class="line">-keepclassmembers {modifier} {class_specification}    保护指定类的成员，如果此类受到保护他们会保护的更好  
</span><span class="line">-keepclasseswithmembers {class_specification}    保护指定的类和类的成员，但条件是所有指定的类和类成员是要存在。   
</span><span class="line">-keepnames {class_specification}    保护指定的类和类的成员的名称（如果他们不会压缩步骤中删除）   
</span><span class="line">-keepclassmembernames {class_specification}    保护指定的类的成员的名称（如果他们不会压缩步骤中删除）   
</span><span class="line">-keepclasseswithmembernames {class_specification}    保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后）   
</span><span class="line">-printseeds {filename}    列出类和类的成员-keep选项的清单，标准输出到给定的文件   
</span><span class="line">  
</span><span class="line">压缩   
</span><span class="line">-dontshrink    不压缩输入的类文件   
</span><span class="line">-printusage {filename}   
</span><span class="line">-whyareyoukeeping {class_specification}       
</span><span class="line">  
</span><span class="line">优化   
</span><span class="line">-dontoptimize    不优化输入的类文件   
</span><span class="line">-assumenosideeffects {class_specification}    优化时假设指定的方法，没有任何副作用   
</span><span class="line">-allowaccessmodification    优化时允许访问并修改有修饰符的类和类的成员   
</span><span class="line">  
</span><span class="line">混淆   
</span><span class="line">-dontobfuscate    不混淆输入的类文件   
</span><span class="line">-printmapping {filename}   
</span><span class="line">-applymapping {filename}    重用映射增加混淆   
</span><span class="line">-obfuscationdictionary {filename}    使用给定文件中的关键字作为要混淆方法的名称   
</span><span class="line">-overloadaggressively    混淆时应用侵入式重载   
</span><span class="line">-useuniqueclassmembernames    确定统一的混淆类的成员名称来增加混淆   
</span><span class="line">-flattenpackagehierarchy {package_name}    重新包装所有重命名的包并放在给定的单一包中   
</span><span class="line">-repackageclass {package_name}    重新包装所有重命名的类文件中放在给定的单一包中   
</span><span class="line">-dontusemixedcaseclassnames    混淆时不会产生形形色色的类名   
</span><span class="line">-keepattributes {attribute_name,...}    保护给定的可选属性，例如LineNumberTable, LocalVariableTable, SourceFile, Deprecated, Synthetic, Signature, and   
</span><span class="line">  
</span><span class="line">InnerClasses.   
</span><span class="line">-renamesourcefileattribute {string}    设置源文件中给定的字符串常量  </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使用混淆经常会遇到以下的问题：<br />
1. 混淆之后，类名和函数名发生变化，在lua中无法真确调用。<br />
2. 第三方的类库不要去混淆，容易发生问题，导致无法正确调用，原因也是第一条引发的。</p>

<p>使用混淆之后，重新编译我们的项目，在用上面的方法破解，查看我们的代码，发现不少代码都混淆成了一些abc这样的名字。但是这样的混淆方法并不是唯一的。只是最常用的方法。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[quick cocos2dx 导出Android包记录过程]]></title>
    <link href="http://www.newtomato.me/blog/2015/12/27/android-1"/>
    <updated>2015-12-27T11:23:39+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/12/27/android-1</id>
    <content type="html"><![CDATA[<p>###认识proj.android工程</p>

<p>使用quick cocos2dx的项目可以新建工程，可以看到他已经为我们准备了两个工程一个是ios一个是Android的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$QUICK_COCOS2DX_ROOT/bin/create_project.sh -p com.newtomato.test</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>新建的工程结构如下：<br />
<img src="./1450598436105.png" alt="Alt text" /><br />
<!--more--><br />
由于我们主要目标是将项目打包Android，因此只需关注Android文件夹下面的东西即可。<br />
<img src="./1450598547259.png" alt="Alt text" /></p>

<p>AndroidManifest.xml是一个描述文件，关于此应用的包名<code>package="com.newtomato.test"</code>权限，相关的Activity，以及一些自定义的东西。最重要的是我们看到她定义了一个启动的Activity，<code>.Test</code>。<br />
接下来还有一个clean.sh和build_native.sh文件。<br />
build_native.sh文件负责将quick cocos2dx工程打包成为.so文件。放在<code>libs</code>目录下面。<br />
clean.sh则负责清理libs目录下面的文件，一般希望重新生成so文件的时候就会执行这个命令。</p>

<p>还有一个project.properties文件。这是一个eclipse工程需要的文件。后面我会提到这个文件是怎么变化的。<br />
生成的这个工程，是可以直接导入到eclipse的。<br />
打开Eclipse，点击Project-&gt;Import-&gt;Existing Android Code Into Workspace.<br />
同样地方式将Quick也导入进来。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$QUICK_COCOS2DX_ROOT/lib/cocos2d-x/cocos2dx/platform/android/java</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后右单击我们的Test工程，选择Property-&gt;Android。<br />
将Quick的工程作为library引入进来。<br />
<img src="./1450599581363.png" alt="Alt text" /></p>

<p>这个时候，我们再次打开project.properties文件，看，里面是不是多了quick工程的描述。<br />
同时如果在上面的界面上在此改变我们的Android sdk，在project文件中target就会发生变化。</p>

<p>###运行工程的方法</p>

<p>到此我们就可以将Android工程导出我们的设备或者模拟器上进行测试了。<br />
但是Eclipse自带的Android的模拟器非常的麻烦。启动起来很慢不说，操作起来也很卡顿。因此在搜素无数次之后，也算是找到了几种方式。现在分别分享给大家。<br />
1. 第一个神器那就是<a href="http://www.genymotion.net/question/details/Info_2.shtml">genymotion</a>，并且有详细的中文帮助教程，安装起来也很方便。但是前提就是需要先注册才能够使用。由于他可以和Eclipse绑定，因此在Eclipse上点击运行就可以将工程在genymotion上运行起来。<br />
2. 第二个神奇就是Ant。ant可以用于编译打包一体化的处理！非常的强大。如何使用呢？ant运行需要在当前目录下面有一个build.xml文件。但是我们的quick 工程下面并没有呢？没有我们可以生成！命令如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">andriod update project -p .</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>执行这个命令之后，我们的Test/proj.android目录下面就会有一个build.xml文件。但是我们还有个一java工程，就是quick那个，他也需要被ant编译。这个工程下面也用同样地方式生成build.xml即可。<br />
然后回到我们自己的Test/proj.android目录下面执行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ant clean
</span><span class="line">ant release</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>console下面在输出一大堆得数据之后，我们会看到在bin下面终于生成了我们需要的apk文件！<br />
然后使用adb install bin/Test-Release.apk就可以将这个apk安装到当前连接的设备上。可以是genymotion也可以是自己的设备。</p>

<p>###使用ant进行多渠道的打包</p>

<p>ant的更大的好处不是在于帮助我们的调试，而是在于可以方便我们打包。尤其是我们需要打包多个平台的apk的时候，这个时候ant的优势就明显的体现出来。</p>

<p>使用ant自动打包多个平台的功能，有很多工具可以实现，比如友盟，美团还有360打包服务都已经提供了。大家可以去下载可以使用的工具。我这里将我们用到的方式分享给大家。基本的原理是相似的。<br />
我们首先在AndroidManifest.xml里面使用ANDROID_CHANNEL_SETTING这个自定义的变量代表要替换的字串。然后再build.xml中使用正则表达式替换成真正的变量。</p>

<p>AndroidManifest.xml里面的配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  &lt;meta-data android:name="dksdk_channel" android:value="ANDROID_CHANNEL_SETTING" /&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>build.xml里面的设置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> &lt;property file="ant.properties" /&gt;
</span><span class="line"> 
</span><span class="line"> &lt;target name="deploy" &gt;
</span><span class="line">    &lt;foreach
</span><span class="line">	    delimiter=","
</span><span class="line">        list="${market_channels}"
</span><span class="line">        param="channel"
</span><span class="line">        target="modify_manifest" &gt;
</span><span class="line">    &lt;/foreach&gt;
</span><span class="line"> &lt;/target&gt;
</span><span class="line"> &lt;target name="modify_manifest" &gt;
</span><span class="line">    &lt;replaceregexp file="AndroidManifest.xml"  
</span><span class="line">	  match='ANDROID_CHANNEL_SETTING'  
</span><span class="line">	  replace='${android_channel}'
</span><span class="line">	  encoding="utf-8"/&gt;  
</span><span class="line">	  
</span><span class="line">     &lt;property
</span><span class="line">         name="out.final.file"
</span><span class="line">         location="${apk.dir}/game_${channel}.apk" /&gt;
</span><span class="line">     &lt;antcall target="clean" /&gt;
</span><span class="line">     &lt;antcall target="release" /&gt;
</span><span class="line"> &lt;/target&gt;
</span><span class="line">    </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面需要注意的就是market_channels这个变量，他是在何处定义的呢？<br />
就是在 ant.properties这个文件中定义的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">market_channels=baidu,360,xiaomi</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在命令行下调用</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ant clean
</span><span class="line">ant deploy</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后我们就在bin下面看见已经生成了3个apk文件了！</p>

<p>关于多渠道打包，知道了原理，就想如果能够有现成的工具使用该多好。刚好在github上搜索，果然有不少高人讲自己的成果分享出来。<a href="https://github.com/sinkcup/AntDemo">AntDem</a>是我个人觉得还不错的工具。工具的开发者已经将我们能想到的需求都集成在了自己的工具里面。包括修改包名，修改渠道号，修改生成的apk名称。以及重新签名等。</p>

<p>####遗漏的内容<br />
上面ant打包，需要用到一个签名文件。而anroid得签名生成。既可以通过Eclipse来做。也可以通过命令行的方式。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/* -genkey 产生密钥
</span><span class="line">   -alias game.keystore 别名
</span><span class="line">   -keyalg RSA 使用RSA算法对签名加密
</span><span class="line">   -validity 1000 有效期限1000天
</span><span class="line">   -keystore game.keystore 
</span><span class="line">*/
</span><span class="line">keytool -genkey -alias game -keyalg RSA -validity 1000 -keystore game.keystore
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在命令行中敲入这个命令，则会出现很多问题，比如签名作者，密码，地址，城市等。然后就会在当前目录下生成一个game.keystore的文件和一个ant.properties文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  key.store=game.keystore
</span><span class="line">  #这个名字就是在生成keystore时那个alias字段的值
</span><span class="line">  key.alias=game
</span><span class="line">   
</span><span class="line">  key.store.password=xxxxxx
</span><span class="line">  key.alias.password=xxxxxx</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样当我们调用ant命令的时候，ant会自动读入ant.properties文件。然后对生成的apk文件签名。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[certificate与provision profiles 2]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/29/dev-certification-provision2"/>
    <updated>2015-11-29T20:10:15+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/29/dev-certification-provision2</id>
    <content type="html"><![CDATA[<p>我们在创建Certificate的时候，要求先自己生成一个CSR文件。<br />
<img src="http://www.newtomato.me/images/1448076369836.png" alt="Alt text" /><br />
<!--more--><br />
生成的这个CSR文件，用sublime打开之后，里面的样子如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-----BEGIN CERTIFICATE REQUEST-----
</span><span class="line">MIIByjCCATMCAQAwgYkxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlh
</span><span class="line">MRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRMwEQYDVQQKEwpHb29nbGUgSW5jMR8w
</span><span class="line">HQYDVQQLExZJbmZvcm1hdGlvbiBUZWNobm9sb2d5MRcwFQYDVQQDEw53d3cuZ29v
</span><span class="line">Z2xlLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEApZtYJCHJ4VpVXHfV
</span><span class="line">IlstQTlO4qC03hjX+ZkPyvdYd1Q4+qbAeTwXmCUKYHThVRd5aXSqlPzyIBwieMZr
</span><span class="line">WFlRQddZ1IzXAlVRDWwAo60KecqeAXnnUK+5fXoTI/UgWshre8tJ+x/TMHaQKR/J
</span><span class="line">cIWPhqaQhsJuzZbvAdGA80BLxdMCAwEAAaAAMA0GCSqGSIb3DQEBBQUAA4GBAIhl
</span><span class="line">4PvFq+e7ipARgI5ZM+GZx6mpCz44DTo0JkwfRDf+BtrsaC0q68eTf2XhYOsq4fkH
</span><span class="line">Q0uA0aVog3f5iJxCa3Hp5gxbJQ6zV6kJ0TEsuaaOhEko9sdpCoPOnRBm2i/XRD2D
</span><span class="line">6iNh8f8z0ShGsFqjDgFHyF3o+lUyj+UC6H1QW7bn
</span><span class="line">-----END CERTIFICATE REQUEST-----</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里面包含了什么信息呢 ？<br />
<img src="http://www.newtomato.me/images/1448076787997.png" alt="Alt text" /><br />
<a href="https://www.sslshopper.com/what-is-a-csr-certificate-signing-request.html">来源</a></p>

<p>从上面的表格，我们可以看到这里面包含了我们生成它的时候填写的信息还有一个关键的就是public key。<br />
也就是说我们在生成CSR文件的时候，还声称了一个public key。因此我们可以在keychain中检查以下是否真的有这个public key。<br />
<img src="http://www.newtomato.me/images/1448076932966.png" alt="Alt text" /><br />
果然，在keychain中有一个钥匙对，私钥和公钥。<br />
CSR自动包含了公钥，然后我们将这个CSR文件提交给苹果的member center。<br />
<img src="http://www.newtomato.me/images/1448077003733.png" alt="Alt text" /><br />
此时会生成.cer文件。将此文件下载下来，双击安装。此时在keychain当中就会将我们的私钥和这个certificate绑定起来。<br />
<img src="http://www.newtomato.me/images/1448077535385.png" alt="Alt text" /></p>

<p>这个certificate就是验证开发者身份。</p>

<p>接下来的mobileprovision则是验证开发者权限的。<br />
我们将自己生成的开发版mobileprovision打开看看。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;key&gt;Entitlements&lt;/key&gt;
</span><span class="line">  &lt;dict&gt;
</span><span class="line">    &lt;key&gt;keychain-access-groups&lt;/key&gt;
</span><span class="line">      &lt;array&gt;
</span><span class="line">          &lt;string&gt;L23FMABA6X.*&lt;/string&gt;
</span><span class="line">      &lt;/array&gt;
</span><span class="line">      &lt;key&gt;get-task-allow&lt;/key&gt;
</span><span class="line">      &lt;true/&gt;
</span><span class="line">      &lt;key&gt;application-identifier&lt;/key&gt;
</span><span class="line">      &lt;string&gt;L23FMABA6X.*&lt;/string&gt;
</span><span class="line">      &lt;key&gt;com.apple.developer.team-identifier&lt;/key&gt;
</span><span class="line">      &lt;string&gt;L23FMABA6X&lt;/string&gt;
</span><span class="line">      &lt;key&gt;aps-environment&lt;/key&gt;
</span><span class="line">      &lt;string&gt;development&lt;/string&gt;
</span><span class="line">  
</span><span class="line">  &lt;/dict&gt;
</span><span class="line">	
</span><span class="line">	...
</span><span class="line">
</span><span class="line">  &lt;key&gt;ProvisionedDevices&lt;/key&gt;
</span><span class="line">  &lt;array&gt;
</span><span class="line">      &lt;string&gt;11f30c7340e54187e93e1d085f85574570206cd9&lt;/string&gt;
</span><span class="line">      &lt;string&gt;0545f62295c9f117e2d6c19131df55444b0b8444&lt;/string&gt;
</span><span class="line">      &lt;string&gt;8bcbf9be5476b09969fa597bf38f3949ed9b6e7d&lt;/string&gt;
</span><span class="line">      &lt;string&gt;57a453b5e5f39618c4e09d6399efff2e2d0b59a4&lt;/string&gt;
</span><span class="line">      &lt;string&gt;eff3c07516897e04c5d2aefaf91c2cf05e13a933&lt;/string&gt;
</span><span class="line">      &lt;string&gt;5256d0acb2218cef2748641582c4993c0f193ed9&lt;/string&gt;
</span><span class="line">      &lt;string&gt;030662def7e5fc03311f20891f0944f2b7f73251&lt;/string&gt;
</span><span class="line">      &lt;string&gt;a3216d9f5e611dd1f76e45858432d9c5e945d73c&lt;/string&gt;
</span><span class="line">      &lt;string&gt;cdd59a0a353c66a75a86a8419598a83a4db98e7c&lt;/string&gt;
</span><span class="line">      &lt;string&gt;7001583678ac38d05b18928d049098329531d3e3&lt;/string&gt;
</span><span class="line">      &lt;string&gt;8bd9c88be11675b7ef71de1d6122ba95292a3472&lt;/string&gt;
</span><span class="line">      &lt;string&gt;bd63797509b861368e5a293717537b909d58c846&lt;/string&gt;
</span><span class="line">      &lt;string&gt;89f4b347703111b0067b79d7d4226684d6efe6a3&lt;/string&gt;
</span><span class="line">      &lt;string&gt;01798a0796437ae7eff5dddb3a442912ae57d50e&lt;/string&gt;
</span><span class="line">      &lt;string&gt;6a7cf9c50f068ddcca529f589e3d70141c8f85de&lt;/string&gt;
</span><span class="line">      &lt;string&gt;3c6e42454f9c551abc1738836ebf7a9513a90afa&lt;/string&gt;
</span><span class="line">      &lt;string&gt;cad8d51523e6fdb4d96fc33df65376545a9a683e&lt;/string&gt;
</span><span class="line">      &lt;string&gt;7b3a694a86e1d54e942ae1cbe6498eba4b2e68c6&lt;/string&gt;
</span><span class="line">      &lt;string&gt;8da8d3dd98ed8a0f928003baaa79e8e0aaf432ec&lt;/string&gt;
</span><span class="line">      &lt;string&gt;a262e990b8eec70ebe6bfe94e57b7a4f13ef8e9c&lt;/string&gt;
</span><span class="line">  &lt;/array&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>里面明确的告诉了我们aps-environment和相关的设备序列号。以及keychain-access-groups，在这里他告诉我们要使用keychain当中一个L23FMABA6X的文件。这是什么呢？可以打开keychain到Certificate当中检查一下，这就是我们刚才上面生成的! 如此一来mobileprovision就和我们的Certificate绑定在一起了。</p>

<p>因此一个开发版的mobileprovision包含的内容有，appID, 开发设备，以及Certificate等内容<br />
如果我们生成的是Production版本的证书又该是什么样子呢？这个大家可以去试试看。</p>

<p>最后，<a href="http://0xc010d.net/mobileprovision-files-structure-and-reading/">iDev blog</a>的作者提供了一个工具，用于检测证书的类型。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mobileprovisionParser -f &lt;fileName&gt; [-o &lt;option&gt;]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mobileprovisionParser -f ~/Library/MobileDevice/Provisioning\ Profiles/a7f9bef8-f6b1-46e1-a463-2690b5781a61.mobileprovision
</span><span class="line">
</span><span class="line">debug</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mobileprovisionParser -f ~/Library/MobileDevice/Provisioning\ Profiles/a7f9bef8-f6b1-46e1-a463-2690b5781a61.mobileprovision -o devices
</span><span class="line">
</span><span class="line">11f30c7340e54187e93e1d085f85574570206cd9
</span><span class="line">0545f62295c9f117e2d6c19131df55444b0b8444
</span><span class="line">...
</span><span class="line">8da8d3dd98ed8a0f928003baaa79e8e0aaf432ec
</span><span class="line">a262e990b8eec70ebe6bfe94e57b7a4f13ef8e9c</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样也能够方便的知晓证书的基本信息。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Certificate与provision profiles]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/29/dev-certification-provision1"/>
    <updated>2015-11-29T20:04:52+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/29/dev-certification-provision1</id>
    <content type="html"><![CDATA[<p>作为需要将应用上传到App Store的开发者，我们肯定会遇到一个有意思的问题，那就是申请AppId和开发者证书。</p>

<p>开发者证书主要有两种类型。Developer Program 和Enterprise Program 。前一种就是99美金的开发者证书，而后一种就是299美金的开发者证书，具体的区别请参看下图：<br />
<img src="http://www.newtomato.me/images/iOS.png" alt="Alt text" /><br />
<!--more--></p>

<p>其中有一个AdHoc的发布方式，认为可以将应用发布到100个设备上面，但是必须将这100个设备的UUID也放到证书当中，否则设备是无法运行应用的。<br />
而In House的发布方式，则非常的简单，可以不需要uuid就可以装在设备上。<br />
申请开发者证书 步骤如下：<br />
1. 通过自己的开发者账号进入到个人后台，前提是你已经购买了99美金或者299美金的开发者资格。<br />
2. 进入申请证书界面。<br />
3. 选择Certificates<br />
<img src="http://www.newtomato.me/images/1447855210829.png" alt="Alt text" />。<br />
下面会要求你上传一个签名，此签名作用非常的大，后面我们在说。生成签名的方式也很简单，因为只要你用苹果电脑开发，就会在keychain中申请一个签名。<br />
4. 提交了自己生产的CSR( Certificate Signing Request )文件。就会生成一个p12文件。需要将其下载下来。<br />
5. 接下来生成mobileprovision文件。<br />
<img src="http://www.newtomato.me/images/1447987845690.png" alt="Alt text" /><br />
上面我们看到有identifier和Devices，暂时可以不用设置，我们生成mobileprovision的时候会要求我们设置的。<br />
按照苹果的要求填写，最后会生成一个mobileprovision文件。同样也要下载下来。</p>

<p>接下来就要将其和我们的xcode结合在一起。<br />
1. 双击p12文件安装。他会自动安装到mac电脑的keychain中。用于验证我们的身份。<br />
2. 双击mobileprovision文件。他会自动的安装到~/Library/MobileDevice/Provisioning\ Profiles下面。<br />
也可以通过xcode的账户同步功能，将开发者账号下面的mobileprovision同步下来。<br />
<img src="http://www.newtomato.me/images/1447988460200.png" alt="Alt text" /></p>

<p>这样做了之后，我们点击自己工程的的build setting，在其下面的code signing就可以看到mobileprovision<br />
<img src="http://www.newtomato.me/images/1447988655673.png" alt="Alt text" /><br />
点击选择我们自己的mobileprovision即可！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Last of Us 故事板]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/29/the-last-of-us-story"/>
    <updated>2015-11-29T18:08:09+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/29/the-last-of-us-story</id>
    <content type="html"><![CDATA[<p><img src="http://www.newtomato.me/images/thelou2.jpg" alt="Alt text" /></p>

<p>The Last of Us是由著名工作室顽皮狗第二团队秘密开发两年的作品，讲述了人类因现代传染病而面临绝种危机，当环境从废墟的都市再度自然化时，幸存的人类为了生存而自相残杀的故事。但是和以往的同类题材游戏有着很大的不同，两名主角个性鲜明，在探索困境下人类的心里波动，突出放大主角们的心里活动。<br />
游戏在还未正式发售时，就已经提前征服了各大游戏媒体，截止到2013年6月它已经获得了共计30个媒体的满分。这些给出满分评价的网站媒体中包括IGN、Eurogamer、CVG、Edge等一干著名媒体，[1]  并在2013年大部分游戏媒体中享有极高的评价。</p>

<p>今天我们开始讲讲这部经典之作所讲述的故事。<br />
<!--more--></p>

<p><img src="http://www.newtomato.me/images/15.jpg" alt="Alt text" /><br />
故事一开始是下班回来的大叔乔和自己的女儿sari在聊天，当天晚上是大叔的生日，懂事的sari给大叔送了一块手表。他们的互动和后面几处消息及可以看得出父女两人关系非常亲密。这为后面大叔失去了女儿做了铺垫。</p>

<p><img src="http://www.newtomato.me/images/7.jpg" alt="Alt text" /><br />
接下来，瘟疫爆发了。而人们还在熟睡中。sari被叔叔tommy的电话吵醒。电话打来是找他爸爸乔的。但是乔不在。sari只好下楼找乔。这是电视机里面播放着人们对已经变异的人的一些报到，只是知道他们生病了，并不知道这种病及其具有传染性。上面是我找到的一张人变异之后的样子。</p>

<p>变异大约分为4个阶段，意识变异被咬阶段。此时人还是人，伤口在不断扩散。然后到了第二阶段，人失去了意识，大脑被病毒入侵，如同行尸走肉。但是有意识的到处去找别的活人。吃他们似乎是这种行尸走肉的本能。然后再接着进化，变成第三种，就是上图展示的那种，真个大脑已经裂开，人变得面目全非。此时这种动物无法靠视觉来分辨人，只能靠听觉，因此被成为遁声者。发出滴滴的声音。如果这些遁声者没有死亡，那么接下来就会进化到第四个阶段，他们会在某个地方像发霉腐烂的食物一样开始腐化，并同时散发出孢子，这种东西如果人吸入，就会被感染病毒。因此后面你会看到大叔乔遇到孢子总是要带上防毒面具。而自身有抗体的艾丽则不需要。</p>

<p>罗伯特<br />
时间一晃到了20年之后，乔已经成了大叔。他靠做一些“生意”来为生。图上是他和自己的伙伴泰丝在讨论。他们有一笔枪，是在罗伯特手里，本来罗伯特是要将这笔枪交给他们的，但是罗伯特出于别的考虑给了火莹。并且暗中派人要杀死泰丝。泰丝这种身手矫健，头脑清晰的女人一眼就看破罗伯特的阴谋，因此干死了派来杀死自己的人之后找到了乔。两个人商量去找罗伯特谈谈“生意”。</p>

<p>一路上危险重重自不必说。<br />
<img src="http://www.newtomato.me/images/18.jpg" alt="Alt text" /><br />
<img src="http://www.newtomato.me/images/泰丝.png" alt="泰丝" /><br />
<img src="http://www.newtomato.me/images/若波.png" alt="Alt text" /></p>

<p>最终在找到了罗波之后，从罗波口中得到，原本要给大叔乔他们的那批武器给了firefly皇后。一怒之下泰丝就杀死了罗波。</p>

<p>正在他们苦于怎么找回武器的时候，firefly皇后出现了！<br />
<img src="http://www.newtomato.me/images/firfly.png" alt="Alt text" /></p>

<p>看样子她身受重伤，她来找罗波本想和罗波谈另外一笔生意，但是罗波已近死了，于是她决定让乔和泰丝做这笔生意，就是就“货”运出城。一开始泰丝有些犹豫，但是皇后答应一旦成功，将给与双倍的武器做交换。泰丝便答应了下来。</p>

<p>当然第一次我们的大叔乔和艾丽之间的相处是很不愉快的。大叔心理防备重，他对艾丽身份很好奇。抱有很大的疑问。<br />
接下来按照计划，他们开始运送艾丽出城，当天晚上刚好下雨。在一条排水沟里被巡逻的警察抓到，原本不是很紧张的事情，但却暴露出艾丽感染者的身份。于是三人只好开始躲避巡逻队，逃到了另一个下水道里。泰丝对此有着积极的想法，一定要把艾丽送到指定的地点，而乔却不这么认为。但是最后只要服从了泰丝。于是他们在雨夜继续前行。</p>

<p><img src="http://www.newtomato.me/images/雨夜2.jpg" alt="Alt text" /><br />
<img src="http://www.newtomato.me/images/雨夜3.jpg" alt="Alt text" /></p>

<p>他们将要穿过一座大楼，当然大楼里面也是危机重重，时不时的会有一堆的丧尸等着要打！<br />
<img src="http://www.newtomato.me/images/雨夜大楼.jpg" alt="Alt text" /></p>

<p>最终他们穿过大楼，穿过博物馆，来到了目的地，议会大楼。<br />
<img src="http://www.newtomato.me/images/议会大楼.jpg" alt="Alt text" /></p>

<p>在这里，火莹的接头人已经被军队的人干掉了，同时乔知道了泰丝已经感染。军队的人也发现了他们，泰丝告诉乔，艾丽才是我们的希望，于是让乔和艾丽离开，自己一个人对付将来来临的危险。</p>

<p>乔只好和艾丽离开。接下来，乔决定去找比尔，比尔可以给他弄一辆车。<br />
<img src="http://www.newtomato.me/images/bier.png" alt="Alt text" /><br />
比尔一个人住在一个小镇上，以僵尸为伴，既让他们为自己抵挡外面的危险，又设计重重陷阱，不让僵尸过来伤害自己，是一个非常聪明的发明天才。<br />
他脾气暴躁，但是为人仗义。答应给乔搞到一辆汽车。于是他们三人一起来到了废弃的学校，这里刚好有一辆车，里面有可以启动的电池。<br />
历经磨难，终于在比尔的好基友的屋子里找到了电池和汽车。好基友弗拉克想要离开小镇，于是自己冒着危险去取电池，却感染了病毒。为了防止自己发病，成为不人不鬼的样子，自己上吊死了。<br />
搞到了车，乔和艾丽便离开了小镇。继续寻找火莹。<br />
<img src="http://www.newtomato.me/images/离开比尔.jpg" alt="Alt text" /></p>

<p>他们来到了匹兹堡，这里有更坏的人盘踞在这里。抢劫财物，杀死弱者，用于玩乐。大叔和艾丽也是步步为营小心谨慎的往前走。但是在一个饭店里，大叔乔把艾丽推上去之后，自己从电梯那里掉了下去！两个人第一次分离。大叔寻找从地下室到上面的路。在马上要逃出去的时候，被一个杂兵甲给抓住了，命悬一线，艾丽及时出现。一枪毙命。打死了杂兵！大叔面上不说，但是心里还是很感激的！<br />
<img src="http://www.newtomato.me/images/信任.jpg" alt="Alt text" /><br />
然后大叔和艾丽两人合作把饭店旁边的一干散兵游勇全给干掉了！<br />
<img src="http://www.newtomato.me/images/授枪.jpg" alt="Alt text" /></p>

<p>经此一役，大叔和艾丽之间开启了一种伙伴合作模式。大叔开始教艾丽怎么用枪。双方亲密度明显提升！</p>

<p>继续前行之后，竟然遇到了一辆无敌坦克。大叔和艾丽被追着打。几乎不敢抬头。也由此遇到了亨利汤姆兄弟。两人和自己的队伍冲散了，先下的目标是要找到火莹基地。成为拯救世界的一员。亨利对这个汤姆弟弟真的是关心爱护至极。几次危险都最新考虑的是汤姆，包括后来，本来已经和大叔乔达成一致，一起离开，但是最后架不住后面急切的追兵，最终是丢下了乔，自己带着汤姆先跑了。<br />
后来大叔乔和艾丽一起跳海，躲过了坦克的追击。被海水冲到岸上后与亨利会和。二人再次决定一起合作，寻找出路。于是在经历下水道“意外”后，四人在郊区的一处住宅区被一群敌人再次困住。但是这也难不住大叔乔的。但是不幸的是打死敌人之后，又来了一批僵尸。这次僵尸的袭击，就感染了汤姆。亨利也因此失去了活下去的希望，饮弹自杀。</p>

<p>秋天到了。<br />
冷冷的雨水打湿了乔和艾丽的衣物，两人继续前行。来到一处水坝这里。意外的遇到了大叔乔的弟弟tommy。真是天无绝人之路，tommy和自己的妻子玛利亚在这里带领大家一起保卫家园。正如tommy说的这里给了他们这些人第二次机会。大叔乔和tommy讲了艾丽的事情，希望tommy能够帮忙把艾丽送到火莹那里，因为tommy以前是火莹的成员，因为主张不同，从火莹那里离开了。<br />
<img src="http://www.newtomato.me/images/tommy.png" alt="Alt text" /><br />
大叔本以为会得到tommy的认可，但是tommy已经和以前不同了，他现在更关心自己的家人。两人差一点打起来。刚好出气筒来了，正是附近的一些散兵。二人共同协作一起打败了敌人。或许是往昔那种惺惺相惜的感情又回来了，tommy最终答应了由他来负责把艾丽送到火莹。<br />
这件事情乔并未和艾丽商量，但是机敏的艾丽早就察觉了，愤而离开了。<br />
大叔和tommy只好出去寻找艾丽。<br />
此时是大叔和艾丽第一次发生冲突。此时艾丽认为自己和大叔之间是互相依靠的，是不会抛弃彼此的，但是大叔却把他交给tommy，从此似要分道扬镳了。大叔则担心自己不能完成护送艾丽到火莹基地的任务，交给tommy是正确明智的选择。两人争吵过后，心结也就解开了。</p>

<p>接下来告别弟弟tommy，大叔乔和艾丽去盐湖城寻找火莹的医院，医院在一个大学里面。 大学里面不用说也是陷阱重重，危机四伏，不仅仅要对付僵尸还要对付意外冲进来的散兵。在紧张激烈的冲突下，大叔乔被一个散兵推倒了楼下，被一个钢管贯穿！艾丽一边顾着大叔，一边射杀那些前来杀他们的人。终于保住性命逃了出去。此时冬天也来临了。漫天飘散着冰冷的雪花。<br />
<img src="http://www.newtomato.me/images/1448790842144.png" alt="Alt text" /></p>

<p>大叔的伤非常的重，如果没有抗生素之类的药物恐怕活不下去。艾丽安顿好大叔，便开始四处找药。冬天异常寒冷，但是却没有冻死那些僵尸和前来找麻烦的人。此时艾丽想起自己的好朋友莱利。莱利和自己同时被僵尸感染，但是莱利没有自己幸运。（两人感染后莱利肯定先发病了，身边只有艾丽，我想当时艾丽也是迫不得已只能杀死她，自己的好朋友死在自己手里，估计这种痛要伴随一生的吧。）想到她和大叔乔在大坝附近的农场争吵那次，艾丽说自己认为重要的人一个一个都离开了自己，只剩下孤单的自己。为了不让大叔死去，艾丽真是拼尽所有，先是在一家大型商场找到了一架坠地的急救飞行机，在里面刚好有一个急救包。给大叔争取了一些时间，接下来又遇到了变态恋童癖的大卫。从大卫手里拿到了药。但是也因此暴露了自己的行踪。<br />
<img src="http://www.newtomato.me/images/1448791072332.png" alt="Alt text" /></p>

<p>起初的大卫给人一种和善可靠的感觉，甚至把手里最好用的来福枪给了艾丽，共同击退了一波一波的僵尸和遁声者。但是事实上大卫一开始就认出了艾丽，他的手下就是大叔乔在匹兹堡那里干掉的那一帮人。大卫派他们出去寻找”食物”。结果只一个人活着回来报告了消息。因此大卫是不可能放过大叔乔的，但是他没想到艾丽这么优秀，让他产生了浓厚的兴趣，因此想自己把艾丽招安到自己这里，成为自己的宠物。艾丽发现了真相，开始逃跑，为了不让他们发现大叔乔的落脚点，便以自己为诱饵逃了出去，但毕竟自己是个孩子，很快就又被大卫给抓住了。<br />
<img src="http://www.newtomato.me/images/1448791224205.png" alt="Alt text" /></p>

<p>大卫开始说服她，不然就把她当食物分食。艾丽趁机拗断了大卫的大拇指！惹怒了大卫，大卫便叫来了詹姆斯决定对艾丽开膛破肚。艾丽适时的讲出自己是感染者的事情，刚好为保命拖延时间找准了时机跑了出去。然后大卫便开始让一众人等开始搜寻艾丽，杀无赦！此时天降大雪，狂风席卷暴雪吹得人睁不开眼睛。艾丽在雪中艰难的前行，躲避着那些随时都会要了自己命的敌人。</p>

<p>而此刻的大叔则刚刚醒过来，艾丽不在，他记得艾丽走的时候说的那番话，此时艾丽生死未卜，大叔急忙带上背包出去寻找艾丽。果然外面碰上了那些在寻找自己的大卫的狗腿！从狗腿口中，大叔知道了艾丽的下落。至少艾丽还活着，大叔则往大卫的那个小镇继续前行。</p>

<p>而此时的艾丽则逃到了一个酒吧里，修养片刻，准备出发，没料到竟然被大卫发现，大卫左手持砍刀，右手枪的闯进来要杀死艾丽，艾丽手里则只有一个小刀，因此只能与大卫周旋，不能硬拼。在周旋数次之后，艾丽终于捅死了大卫，但是自己也晕倒了。当她再次苏醒过来的时候，竟然是被大卫踹醒的。大卫还能苟延残喘！大卫想看到艾丽求饶，不停的去踹艾丽。此时编剧惯用伎俩再次显现！眼看没有希望了，总有一线生机，艾丽看到了一把匕首，再次给了大卫致命一击！场面过于血腥！几近逼疯艾丽。<br />
大叔乔恰好赶到！艾丽终于安全了。<br />
<img src="http://www.newtomato.me/images/1448791447750.png" alt="Alt text" /></p>

<p>这个冬天真的很残酷！</p>

<p>冬天过去，春天很快也就来了，大叔乔和艾丽继续赶路，去往火莹的实验室，艾丽和大叔聊起自己做的一个关于飞机的梦。她说自己看到飞机在坠毁，但是自己却无能为力。此处的暗示已经明显不过了。也为后来大叔救出艾丽埋下了一个伏笔。两人前行，途径一处公交车站，里面僵尸boss好多只，潜行火瓶好轻松。过了公交站就遇到了火莹的人。到了实验室！此时艾丽溺水，大叔被火莹逮捕，二人再次分开！</p>

<p>醒来之后，火莹皇后对大叔的勇敢连连称奇！同时也告诉大叔他们拯救人类的方法就是将艾丽体内的抗体提取出来，通过反向工程，研制出对抗病毒的药物，但是由于艾丽体内的病毒已经感染到了脑部，提取抗体，也就意味着艾丽会死去。火莹皇后为此很难过但是她必须这么做，为了人类！但是大叔不这么认为，却已无法阻止。火莹皇后下令杀了大叔乔。于是为拯救艾丽也为拯救自己，大叔乔开始了团灭！从第一层开始，清理火莹的人！直到找到了顶层的手术室。救出了艾丽！但是却在停车场又被火莹皇后给堵住了。她动之以情的期望大叔能够回头是岸！人类需要艾丽，艾丽也希望牺牲自己拯救人类。大叔有点犹豫了！火莹皇后收起了枪，以此想让大叔自愿把艾丽交回来，这正好给了大叔一个反击的机会。乘机给了她一枪！如果让她活着，她会对艾丽穷追不舍！于是大叔只好干掉了火莹皇后！</p>

<p>自己编了一套谎言，但是怎么能够瞒得过聪明的艾丽！艾丽没有戳穿他。大叔以为自己瞒过去了，心情轻松不少，两人决定去tommy的水坝！路上还愉快地和她讲起了自己以前常带着sari一起出去远行！这件事总要有个正式的结尾，艾丽一直想着这件事情，心事重重，快到水坝的时候，她问起了这件事情。大叔不是个善于撒谎的人，艾丽直视大叔的双眼，等待着大叔的答案！</p>

<p>大叔乔的答案是什么已不重要了，重要的是艾丽心中相信的是什么！<br />
<img src="http://www.newtomato.me/images/8.jpg" alt="Alt text" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git如何在本地和远端都删除相关的分支]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/22/git-remove-branch-remotely"/>
    <updated>2015-11-22T17:45:01+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/22/git-remove-branch-remotely</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git branch -r #查看本地和远端同步的分支
</span><span class="line">origin/change_avatar_cloth
</span><span class="line">origin/develop
</span><span class="line">origin/master</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<p>通过命令<code>git branch -rd  branch_name</code>，将存在自己本地的remote分支删除。但是并没有通知远端。因此还需要如下的命令<code>git push origin: branch_name</code> 将本地的分支同步出去。<br />
如果此时想要让别人同步服务器的分支，也就是和服务器保持一样，如果服务器的分支被删除了，本地的分支也照样删除，可以使用如下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git pull --prune</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>后来到stack overflow当中找到了高票答案</p>

<blockquote>
  <p>As of Git v1.7.0, you can delete a remote branch using<br />
git push origin –delete <branchname>
which is easier to remember than
git push origin :<branchname>
which was added in Git v1.5.0 &#8220;to delete a remote branch or a tag.&#8221;</branchname></branchname></p>
</blockquote>

<p>也就是说如果是1.7.0版本的Git，可以通过<code>git push origin --delete branch_name</code> 的方法去删除一个远端分支，而在1.5.0版本的Git重则可以直接使用<code>git push origin: branch_name</code> 的方法</p>

<p>或者就是先批量通过删除本地remote的仓库，然后通过如下的方法<code>git push --prune origin</code>直接和远端和本地仓库做同步。也就是说如果本地remote分支不存在，那么远端也就删除掉。因此这个命令如同放大招，最好慎用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocos2dx如果实现骨骼动画的换装]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/22/cocos2dx-dragebones-huan-zhuang"/>
    <updated>2015-11-22T17:33:52+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/22/cocos2dx-dragebones-huan-zhuang</id>
    <content type="html"><![CDATA[<p>我的工作环境是:<br />
quick cocos2dx 2.2.6<br />
flash IDE dragbone官方的插件</p>

<p>首先我们要知道如何创建一个骨骼动画，主要涉及到两个部分，一部分是做加载资源，一部分是根据刚刚加载的资源创建骨骼动画。</p>

<!--more-->
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#加载资源的函数
</span><span class="line">    void addArmatureFileInfo(const char *configFilePath);
</span><span class="line">
</span><span class="line">    /**
</span><span class="line">     *	@brief	Add ArmatureFileInfo, it is managed by CCArmatureDataManager.
</span><span class="line">     *			It will load data in a new thread
</span><span class="line">     */
</span><span class="line">    void addArmatureFileInfoAsync(const char *configFilePath, CCObject *target, SEL_SCHEDULE selector);
</span><span class="line">
</span><span class="line">    /**
</span><span class="line">     *	@brief	Add ArmatureFileInfo, it is managed by CCArmatureDataManager.
</span><span class="line">     */
</span><span class="line">    void addArmatureFileInfo(const char *imagePath, const char *plistPath, const char *configFilePath);
</span><span class="line">
</span><span class="line">    /**
</span><span class="line">     *	@brief	Add ArmatureFileInfo, it is managed by CCArmatureDataManager.
</span><span class="line">     *			It will load data in a new thread
</span><span class="line">     */
</span><span class="line">    void addArmatureFileInfoAsync(const char *imagePath, const char *plistPath, const char *configFilePath, CCObject *target, SEL_SCHEDULE selector);
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>而创建骨骼动画就很简单了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bool CCArmature::init(const char *name)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们看到按照加载资源的函数要求，我们一般要提供三个文件，png，plist和一个config文件。这三个文件刚好是dragonbone插件为我们生成的。<br />
<img src="http://www.newtomato.me/images/1448177716730.png" alt="Alt text" /></p>

<p>然后就是创建，传入一个name参数，这个那么是什么呢？这就要我们打开生成的xml文件看一下它的结构了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class=""><span class="line">&lt;skeleton name="battles_effect" frameRate="24" version="2.2"&gt;
</span><span class="line">  &lt;armatures&gt;
</span><span class="line">    &lt;armature name="battles_effect"&gt;
</span><span class="line">      &lt;b name="fsa" x="17" y="-52.95" kX="0" kY="0" cX="1" cY="1" pX="150" pY="120" z="0"&gt;
</span><span class="line">        &lt;d name="battles_effect0001" pX="0" pY="0"/&gt;
</span><span class="line">        &lt;d name="battles_effect0002" pX="0" pY="0"/&gt;
</span><span class="line">      &lt;/b&gt;
</span><span class="line">    &lt;/armature&gt;
</span><span class="line">  &lt;/armatures&gt;
</span><span class="line">  &lt;animations&gt;
</span><span class="line">    &lt;animation name="battles_effect"&gt;
</span><span class="line">      &lt;mov name="walk" dr="4" to="6" drTW="4" lp="0" twE="NaN"&gt;
</span><span class="line">        &lt;b name="fsa" sc="1" dl="0"&gt;
</span><span class="line">          &lt;f x="17" y="-52.95" cocos2d_x="-133" cocos2d_y="-172.95" kX="0" kY="0" cX="1" cY="1" pX="150" pY="120" z="0" dI="0" dr="1"/&gt;
</span><span class="line">          &lt;f x="17" y="-52.95" cocos2d_x="-133" cocos2d_y="-172.95" kX="0" kY="0" cX="1" cY="1" pX="150" pY="120" z="0" dI="1" dr="1"/&gt;
</span><span class="line">        &lt;/b&gt;
</span><span class="line">      &lt;/mov&gt;
</span><span class="line">    &lt;/animation&gt;
</span><span class="line">  &lt;/animations&gt;
</span><span class="line">  &lt;TextureAtlas name="battles_effect" width="1024" height="512"&gt;
</span><span class="line">    &lt;SubTexture name="battles_effect0004" width="300" height="240" cocos2d_pX="0" cocos2d_pY="0" x="604" y="0"/&gt;
</span><span class="line">    &lt;SubTexture name="battles_effect0003" width="300" height="240" cocos2d_pX="0" cocos2d_pY="0" x="0" y="242"/&gt;
</span><span class="line">  &lt;/TextureAtlas&gt;
</span><span class="line">&lt;/skeleton&gt;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是一个简单地骨骼动画文件。它分为三个部分，第一个部分是<armatures></armatures>，表示有几个骨骼小人，他的名字就是我们要创建骨骼小人是用到的参数,第二个部分就是<animations></animations>他表示上面对应骨骼小人的动画，位置，缩放，关键帧事件等信息，它里面每一个mov表示小人能做的动作，比如walk，表示小人能播放走路的动画。第三个部分<textureatlas></textureatlas>表示对应的骨骼小人用到的图片资源。</p>

<p>然后，我们将生成的素材资源放到xcode的工程的Resource目录下面，通过上面提供的函数和方法就可以创建出来一个简单的骨骼小人了。</p>

<p>在cocoschina的官方论坛上关于此部分有详细的讲解<a href="http://www.cocoachina.com/bbs/read.php?tid=158607">直达论坛</a></p>

<p>我们今天要讲的就是如果让小人换装。但是保持的动作不变。也就是上面提到了三个文件，只需要变化一个文件即可！<br />
既然要变装，那就是改变显示的样子，只要变化png那个文件即可。这样从应用的size角度考虑，我们能够节省不少的资源。</p>

<p>也就是说动画信息文件不变，也就是里面要求的SubTexture也不会变化，那么怎么做到换装呢？能够想到的就是在解析这个xml文件的时候对其进行修改，到指定的png中去获取对应的图片。而我们在传入参数的时候是不是只要传入新的png地址就可以了呢？理论上是这样的，但是实际做起来又不是这样子。<br />
我们先看加载资源的时候cocos2dx做了什么事情？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void CCArmatureDataManager::addArmatureFileInfo(const char *imagePath, const char *plistPath, const char *configFilePath)
</span><span class="line">{
</span><span class="line">    addRelativeData(configFilePath);
</span><span class="line">
</span><span class="line">    m_bAutoLoadSpriteFile = false;
</span><span class="line">    CCDataReaderHelper::sharedDataReaderHelper()-&gt;addDataFromFile(configFilePath);
</span><span class="line">
</span><span class="line">    addSpriteFrameFromFile(plistPath, imagePath, configFilePath);
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>addRelativeData是以configFilePath为key去检查是否有缓存一个CCRelativeData的数据，如果没有则创建一个。然后CCDataReaderHelper去加载configFilePath文件。<br />
addSpriteFrameFromFile则是根据plist中的配置去切割png图片。</p>

<p>然后再CCDataReaderHelper中我们继续往下看，发现她使用如下命令<code>CCDataReaderHelper::addDataFromCache(load_str.c_str(), &amp;dataInfo);</code>会处理xml文件。<br />
而在这个函数里面则按照我们上面说得讲xml文件分成了三部分进行解析。<br />
并且将解析出来对应的CCArmatureData，CCAnimationData，CCTextureData都存到了以上面提到的CCRelativeData数据中。</p>

<p>而addSpriteFrameFromFile最终调用的就是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">CCSpriteFrameCache::sharedSpriteFrameCache()-&gt;addSpriteFramesWithFile(plistPath, imagePath);</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这样一来我们加载的图片资源都要存到了CCSpriteFrameCache的一个大的表<code>m_pSpriteFrames</code>中。<br />
问题来了，<code>m_pSpriteFrames</code>里是图片的名字为查找索引的，而我们没有改变plist文件，那么也就是两张图片最终会再这里被重叠覆盖。因此也就达不到换装的目的。<br />
那么关键的一步就是让<code>m_pSpriteFrames</code>里面的图片名字发生变化，即我们读到了plist，但不完全plist里面记录的名字为准，还需要我们自己的变化。<br />
由于这里面名字发生了变化，也就是上面那个xml里面SubTexture对应的名字也要发生变化，armature下面d<br />
标签对应的名字也要发生变化。<br />
这样我们只需要在<code>CCDataReaderHelper::addDataFromCache(load_str.c_str(), &amp;dataInfo);</code>函数里面对上面提到的两处进行处理即可。参数dataInfo就是下面提到的DataInfo结构体。</p>

<p>我们只需要需要传入一个参数，用于区分是否是加载换装资源。</p>

<p>CCSpriteFrameCache里面函数</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void addSpriteFrameFromFile(const char *plistPath, const char *imagePath, const char *configFilePath = "",const char *prefix = "");</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>CCArmatureDataManager里面函数处理</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void addArmatureFileInfo(const char *imagePath, const char *plistPath, const char *configFilePath, const char* prefix= "");</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>DataInfo结构体增加一个prefix</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">typedef struct _DataInfo
</span><span class="line">{
</span><span class="line">    AsyncStruct *asyncStruct;
</span><span class="line">    std::queue&lt;std::string&gt;      configFileQueue;
</span><span class="line">    float contentScale;
</span><span class="line">    std::string    filename;
</span><span class="line">    std::string    baseFilePath;
</span><span class="line">    std::string    prefix;
</span><span class="line">    float flashToolVersion;
</span><span class="line">    float cocoStudioVersion;
</span><span class="line">} DataInfo;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>讲到这里，大家是否心里已经对换装有所了解了。上面的方式是从根本上直接解决问题。当然还有另外一种方法。<br />
比如我们只需要换一个头部资源。可以通过对骨骼小人的骨头规则命名拿到头部骨头数据CCBone。</p>

<p>伪代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local headDisplayData = CCDisplayData:create()
</span><span class="line">headDisplayData.displayType = CS_DISPLAY_SPRITE
</span><span class="line">headDisplayData.name = "new_head.png"
</span><span class="line">armature:getBone("head")-&gt;addDisplay(headDisplayData,0); </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是这种方法有个问题就是如果头部骨头，在做动画中又切换了新的图片，你就会非常痛苦，图片又换回去了！<br />
因此需要保证头部骨头不要发生变化。</p>

<p>大家可以根据具体的需求，比较看看那个更符合自己的要求。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[setfenv有何用？]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/18/lua-setfenv"/>
    <updated>2015-11-18T00:39:31+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/18/lua-setfenv</id>
    <content type="html"><![CDATA[<p>上一章，我们提到了模块里面的函数，使用点语法的方式定义函数和变量。点之前的名字类似一个命名空间。比如<code>function A.function() end</code>,此处A就相当于一个命名空间，那么我们能不能有更好地方法不用写这个命名空间呢？当然是可以的。lua提供这样的方式。</p>

<!--more-->

<p>这个方法涉及到一个核心函数<code>setfenv()</code>, 我们看一下这个函数的API：<br />
setfenv(f, table)：设置一个函数的环境<br />
1. 当第一个参数为一个函数时，表示设置该函数的环境<br />
2. 当第一个参数为一个数字时，为1代表当前函数，2代表调用自己的函数，3代表调用自己的函数的函数，以此类推</p>

<p>看第一条，他说到可以设置函数的环境。如果我们不调用setfenv，那么函数的环境是什么呢？其实就是默认的_G.所有已经加载了函数变量模块都会被注册到_G中，因此我们可以在B.lua文件中直接调用A.lua中定义的USER_NAME就不会报错。</p>

<p>但是如果我们调用了setfenv()，会发生什么事情？我们来试试。<br />
A.lua</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">USER_NAME = "jolie"
</span><span class="line">ITEM_NAME = "abc"
</span><span class="line">ITEM_COUNT = 123</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>调用函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require("A")
</span><span class="line">setfenv(1,{})
</span><span class="line">tostring(USER_NAME)
</span><span class="line">print("i want to print user name")</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果会是什么样子的呢？<br />
结果就是tostring，print无法被调用，咦？这是怎么回事呢？其实很简单，原来tostring和print很早就被注册到了_G中，我们把函数环境设成了空表，于是再也找不到了tostring和print了。这就报错了！</p>

<p>因此既然我们用得到print和tostring，我们就把这两个函数保存起来，传递给我们当前的函数环境。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">setfenv(1,{print = _G["print"],tostring = _G["tostring"]})</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再次运行，发现了没有，没有报错。正确打印了。<br />
但是这样会不会因此影响到其他的模块呢？比如有一个B.lua，他是否能够正确执行？</p>

<p>A.lua</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local A = {print = _G["print"],tostring = _G["tostring"]}
</span><span class="line">setfenv(1,A)
</span><span class="line">-- setfenv(1,{})
</span><span class="line">name = "hello,A"
</span><span class="line">function doA( ... )
</span><span class="line">	print("i am A, i call doA function")
</span><span class="line">end
</span><span class="line">
</span><span class="line">function doA2( ... )
</span><span class="line">	print("i am doA2, i call doA2 function")
</span><span class="line">end
</span><span class="line">
</span><span class="line">return A</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>B.lua</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local B = {}
</span><span class="line">function B.doAction()
</span><span class="line">	local a = {}
</span><span class="line">	table.insert(a,1)
</span><span class="line">	table.insert(a,2)
</span><span class="line">	table.insert(a,3)
</span><span class="line">	for k,v in pairs(a) do
</span><span class="line">		print(k,v)
</span><span class="line">	end
</span><span class="line">end
</span><span class="line">return B</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>调用代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">a = require("A")
</span><span class="line">a.doA()
</span><span class="line">a.doA2()
</span><span class="line">print("i want to print user name , "..a.name)
</span><span class="line">b = require("B")
</span><span class="line">b.doAction()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看见打印了么？没错！我们设置了A的函数环境，但是并没有因此而影响到B和调用的地方。这说明setfenv只是对当前的模块函数环境进行了设置，而并没有影响到其他。这就是setfenv第一个参数的作用，它指定了当前函数，而不是全局函数，因此只对A这个当前的函数模块进行了设置。</p>

<p>setfenv()还有什么特别的用处？敬请等待下回分析！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serpent：lua序列化和pretty的输出]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/15/serpent-for-lua"/>
    <updated>2015-11-15T21:32:34+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/15/serpent-for-lua</id>
    <content type="html"><![CDATA[<p><img src="http://www.newtomato.me/images/1447594435836.png" alt="Alt text" /></p>

<p>翻译自http://notebook.kulchenko.com/programming/serpent-lua-serializer-pretty-printer<br />
本人翻译能力有限，如有不妥之处还望指正。</p>

<p>为ZeroBrane Studio我一直开发Lua debugger。我意识到我需要一个table的序列化打印浮躁的结构，例如堆栈和一些在调试器组件使用的表数据。Serpent就是我开发出来的用于lua序列化和pretty的输出。<br />
<!--more--></p>

<p>因为动态变量的要求lua本身几乎不提供内置的方法去序列化table。那样需要被一个函数去处理（我们在this thread讨论过）。我第一步停在了TableSerializaiton 页面上，在处理table序列化方面它提供了几个不错的信息并且带有不少的例子。</p>

<p>看了已有的模块，我发现没有个哪一个满足我的需求<br />
1. 需要是单纯的lua（这条需求排除了类似PlutoLibrary的库）<br />
2. 需要既能够漂亮的输出，又能够强大的序列化。（这条排除了serialize.lua）<br />
3. 需要能够打印共享的handler和自我引用（这条排除了许多的实现）<br />
4. 序列化不同类型的key，包括以table做key（这条排除了pretty.lua）<br />
5. 需要剪短并且不需要太多的依赖。（这条排除了 tserialise/tpretty from lua-nucleo）</p>

<p>metalua的serialize.lua很接近我的需要，但是他不能够处理全局的函数或者math.huge数。而且也不能够漂亮的输出（这个也要求很多不同的方法）；table.tostring和serialize结合起来几乎是我想要的一大半代码了。</p>

<p>Penlight的pretty.lua 能够做到很漂亮的输出，但是依赖两个其他的模块，并且不能够处理boolean值和将table作为key的数据，共享表格以及自身引用。</p>

<p>lua-nucleo的tserialize.lua在序列化不同类型方面做的很出色（能够很好的打印math.huge数字，而另外两个模块就不支持），但是不能够处理作为key或者value的函数。</p>

<p>我更希望结果是可读性很好的，而且我能够使用loadstring得到的依然是一个有效的片段。例如，我想keys能够以数字的方式被列出，比如<code>{'a','b'}</code> 打印之后就是<code>{[1] = 'a', [2] = 'b'}</code>,<code>{1, nil, 3}</code>打印之后就是 <code>{1, [3]=3}</code>,<code>{foo = 'foo'}</code>打印之后就是<code>{['foo'] = 'foo'}.</code></p>

<p>Serpent并不处理upvalues和元表;对于弱引用或者transient 对象（io.stdin和其他userdata的对象是能够通过名字序列化的），函数尽可能序列化，全队函数被他们的名字替代。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local b = {text="ha'ns", ['co\nl or']='bl"ue', str="\"\n'\\\000"}
</span><span class="line">local c = function() return 1 end
</span><span class="line">local a = {
</span><span class="line">  x=1, [true] = {b}, [not true]=2, -- boolean as key
</span><span class="line">  ['true'] = 'some value', -- keyword as a key
</span><span class="line">  z = c, -- function as value
</span><span class="line">  list={'a',nil,nil, -- embedded nils
</span><span class="line">        [9]='i','f',[5]='g',[7]={}, ['3'] = 33}, -- empty table
</span><span class="line">  [c] = print, -- function as key, global as value
</span><span class="line">  [io.stdin] = 3, -- global userdata as key
</span><span class="line">  ['label 2'] = b, -- shared reference
</span><span class="line">  [b] = 0/0, -- table as key, undefined value as value
</span><span class="line">  [math.huge] = -math.huge, -- huge as number value
</span><span class="line">}
</span><span class="line">a.c = a -- self-reference
</span><span class="line">a[a] = a -- self-reference with table as key</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The library provides three functions – dump, line, and block – with the last two being shortcuts for the main dump function.</p>

<p>这个库提供三个函数，dump,line和block，后面两个是dump函数的简易版本。</p>

<p>####漂亮的多行打印</p>

<hr />

<p>调试的时候如果你像看到一个表套表，这个就非常有用了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local serpent = require("serpent")
</span><span class="line">print(serpent.block(a))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结构：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">  [1/0 --[[math.huge]]] = -1/0 --[[-math.huge]],
</span><span class="line">  c = nil --[[ref]],
</span><span class="line">  ["label 2"] = {
</span><span class="line">    ["co\nl or"] = "bl\"ue",
</span><span class="line">    str = "\"\n'\\\000",
</span><span class="line">    text = "ha'ns"
</span><span class="line">  } --[[table: 001752B0]],
</span><span class="line">  list = {
</span><span class="line">    "a",
</span><span class="line">    nil,
</span><span class="line">    nil,
</span><span class="line">    "f",
</span><span class="line">    "g",
</span><span class="line">    nil,
</span><span class="line">    {} --[[table: 00175350]],
</span><span class="line">    [9] = "i",
</span><span class="line">    ["3"] = 33
</span><span class="line">  } --[[table: 00175328]],
</span><span class="line">  ["true"] = "some value",
</span><span class="line">  x = 1,
</span><span class="line">  z = loadstring("LuaQ...",'@serialized') --[[function: 00171020]],
</span><span class="line">  [false] = 2,
</span><span class="line">  [io.stdin --[[file (767D0958)]]] = 3,
</span><span class="line">  [true] = {
</span><span class="line">    nil --[[ref]]
</span><span class="line">  } --[[table: 00175300]]
</span><span class="line">} --[[table: 001752D8]]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>####单行打印</p>

<hr />
<p>这是一个更加紧凑一点的展示。一行就展示出序列化的字符串。<br />
不是一个完全的展示，不包括自我引用，共享数据，循环引用。</p>

<p>local serpent = require(“serpent”)<br />
print(serpent.dump(a, {name = ‘a’}))</p>

<p>输出结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">do local a={[false]=2,[true]={[1]={str="\"\n'\\\000",text="ha'ns",["co\nl or"]
</span><span class="line">="bl\"ue"}},c=nil --[[ref]],["label 2"]=nil --[[ref]],[1/0 --[[math.huge]]]=-1/0
</span><span class="line">--[[-math.huge]],x=1,z=loadstring("LuaQ...",'@serialized'),[io.stdin]=3,list=
</span><span class="line">{[1]="a",[4]="f",[5]="g",[7]={},["3"]=33,[9]="i"},["true"]="some value"};
</span><span class="line">a.c=a;a[a]=a;a["label 2"]=a[true][1];a[a[true][1]]=0/0;a[a.z]=print;return a;end</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
