<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[番茄手册]]></title>
  <link href="http://www.newtomato.me/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2017-12-16T00:04:11+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenGL基础之模板缓存]]></title>
    <link href="http://www.newtomato.me/blog/2017/12/15/openglji-chu-zhi-mo-ban-huan-cun"/>
    <updated>2017-12-15T23:50:52+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/12/15/openglji-chu-zhi-mo-ban-huan-cun</id>
    <content type="html"><![CDATA[<p>一个支持OpenGL绘制的窗口（即一个默认的帧缓存）可以由以下一些组合构成：</p>

<ul>
  <li>多达四个颜色缓存</li>
  <li>一个深度缓存</li>
  <li>一个模板缓存</li>
  <li>一个多重采样（MSAA）缓存</li>
  <li>一个或多个辅助缓存</li>
</ul>

<p>我们今天主要讨论模板缓存。<br />
模版缓冲（STENCIL_BUFFER）通过设置模版缓冲每个像素的值,我们可以指定在渲染的时候只渲染某些像素,从而可以达到一些特殊的效果。</p>

<p>通过对cocos2dx里面遮罩裁剪功能的分析，对模板缓存有个初步认识。<br />
<!--more--></p>

<h2 id="cocos2dx-">cocos2dx 遮罩的实现</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local TestClippingScene  = class("TestClippingScene",cc.load("mvc").ViewBase)
</span><span class="line">
</span><span class="line">function TestClippingScene:onCreate(event)
</span><span class="line">	local mask = display.newSprite("MainSceneBg.jpg")
</span><span class="line">	local sencialnode = display.newSprite("BugSpider.png")
</span><span class="line">
</span><span class="line">	local clippingNode = cc.ClippingNode:create(sencialnode)
</span><span class="line">	
</span><span class="line">            -- clippingNode:setInverted(true) --注释1
</span><span class="line">            -- clippingNode:setAlphaThreshold(0)--注释2
</span><span class="line">            clippingNode:addChild(mask)
</span><span class="line">
</span><span class="line">            self:addChild(clippingNode)
</span><span class="line">            clippingNode:setPosition(display.center)
</span><span class="line">            
</span><span class="line">end
</span><span class="line">
</span><span class="line">return TestClippingScene</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>运行上面的代码得到的如下图像。由于没有Alpha测试，导致以图片的矩形为准做遮罩。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-15-IMG_1426.png" alt="IMG_1426" /><br />
将<strong>注释2</strong>的取消掉。就会如下所示。透明区域不起作用。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-15-IMG_1427.png" alt="IMG_1427" /></p>

<p>将<strong>注释1</strong>的取消掉，则得到如下的效果:<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-15-IMG_1428.png" alt="IMG_1428" /></p>

<p>具体的原理是什么呢？我们需要深入到cocos2dx的源码中。</p>

<h2 id="cocos2dx">cocos2dx中遮罩裁剪的原理</h2>

<h3 id="section">源码阅读</h3>

<p>我们通过阅读ClippingNode.cpp的代码知道，真正实现裁剪的代码是：<code>StencilStateManager::onBeforeVisit()</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void StencilStateManager::onBeforeVisit()
</span><span class="line">{
</span><span class="line">	...
</span><span class="line">
</span><span class="line">	glDepthMask(GL_FALSE);
</span><span class="line">	RenderState::StateBlock::_defaultState-&gt;setDepthWrite(false);
</span><span class="line">	
</span><span class="line">	glStencilFunc(GL_NEVER, mask_layer, mask_layer);
</span><span class="line">	//这里的意思是无论什么像素都不会通过模板测试，也就是全部像素都会失败。
</span><span class="line">	glStencilOp(!_inverted ? GL_ZERO : GL_REPLACE, GL_KEEP, GL_KEEP);
</span><span class="line">	//如果不是_inverted模式，模板填充0，如果是则填充mask_layer。
</span><span class="line">	//因为上面失败，所以这里如果是普通遮罩，_inverted为false，则模板缓存里面会全部设置成0。
</span><span class="line">	//那么也就意味着什么都画不上去。
</span><span class="line">	drawFullScreenQuadClearStencil();    
</span><span class="line">	//画一个全屏的矩形，整理模板缓存。上面代码执行之后，模板缓存的样子如(图1)
</span><span class="line">	
</span><span class="line">	glStencilFunc(GL_NEVER, mask_layer, mask_layer);
</span><span class="line">	glStencilOp(!_inverted ? GL_REPLACE : GL_ZERO, GL_KEEP, GL_KEEP);
</span><span class="line">	//如果是普通遮罩，那么像素上面因为失败，这里会全部替换成mask_layer（glStencilFunc的第二个参数）的值。可参考（图2）
</span><span class="line">	
</span><span class="line">	//下面是Alpha Test。
</span><span class="line">	if (_alphaThreshold &lt; 1) {
</span><span class="line">	#if !CC_CLIPPING_NODE_OPENGLES
</span><span class="line">	    _currentAlphaTestEnabled = glIsEnabled(GL_ALPHA_TEST);
</span><span class="line">	    glGetIntegerv(GL_ALPHA_TEST_FUNC, (GLint *)&amp;_currentAlphaTestFunc);
</span><span class="line">	    glGetFloatv(GL_ALPHA_TEST_REF, &amp;_currentAlphaTestRef);
</span><span class="line">	    glEnable(GL_ALPHA_TEST);
</span><span class="line">	    CHECK_GL_ERROR_DEBUG();
</span><span class="line">	    glAlphaFunc(GL_GREATER, _alphaThreshold);
</span><span class="line">	#endif
</span><span class="line">	}
</span><span class="line">}
</span><span class="line">
</span><span class="line">//渲染结束，之后把模板状态还原，_currentStencilFunc值都是在执行visit之前从opengl里面获取的值。
</span><span class="line">void StencilStateManager::onAfterVisit()
</span><span class="line">{
</span><span class="line">    glStencilFunc(_currentStencilFunc, _currentStencilRef, _currentStencilValueMask);
</span><span class="line">    glStencilOp(_currentStencilFail, _currentStencilPassDepthFail, _currentStencilPassDepthPass);
</span><span class="line">    glStencilMask(_currentStencilWriteMask);
</span><span class="line">    if (!_currentStencilEnabled)
</span><span class="line">    {
</span><span class="line">        glDisable(GL_STENCIL_TEST);
</span><span class="line">    }
</span><span class="line">    s_layer--;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">关键函数：</h3>

<ol>
  <li><code>glStencilFunc</code>:用来规定是否通过了 <code>stencil test</code> 的规则。<br />
<code>glStencilFunc</code>的原形是: <code>glStencilFunc( GLenum func, GLint ref, GLuint mask)</code>;<br />
函数意义：指定模板测试比较函数，<strong>模板值</strong>与要写入的<strong>像素值</strong>做与操作，然后得到的结果，用第一个参数指定的函数和第二参数进行比较。如果满足则通过了模板测试。可以写入。否则不满足。</li>
  <li><code>glStencilOp</code>:向<code>stencil buffer</code> 中写内容的规则。<br />
<code>glStencilOp</code>(GLenum fail , GLenum zfail, GLenum zPss );<br />
函数意义：当某些图元在绘制的时候,如果模板测试失败(或者深度测试失败),它怎么修改其打算写入的位置的模板值</li>
</ol>

<p>如果是不调用了<code>setInverted</code>的话。就如下图所示。<br />
(图1)<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-15-1.png" alt="1" />(图2)<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-15-0.png" alt="0" /></p>

<p>调用<code>setInverted(true)</code>则如下图所示：<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-15-a.png" alt="a" /><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-15-b.png" alt="b" /></p>

<p>鉴于此，我们知道将要draw上去的不会通过模板测试，但是却会将模板留下他的形状（凡是为1的地方才会被绘制）。接下来在绘制其他形状的东西时候。在模板测试这里，直接就会按照模板的样子draw出来。<br />
因此遮罩效果就有了！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[opengl基础之矩阵和坐标]]></title>
    <link href="http://www.newtomato.me/blog/2017/12/09/openglji-chu-ju-zhen-zhi-shi"/>
    <updated>2017-12-09T20:07:39+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/12/09/openglji-chu-ju-zhen-zhi-shi</id>
    <content type="html"><![CDATA[<p>[TOC]</p>

<p>作为游戏开发者，我们将任何显示对象放到舞台上的时候，可能都没有想到在这后面有一套复杂又快速的东西保证了我们能够立马看到想要的效果。而这里背后的东西，我们称之为渲染引擎。</p>

<p><code>cocos2dx</code>使用便是<code>opengl</code>的图形编程接口。我们想要彻底搞懂cocos2dx，就需要了解opengl。而这里会介绍<code>opengl</code>矩阵和坐标的基础知识，最后搞明白上面提到的问题，一张图片是怎么渲染到舞台上的。</p>

<!--more-->

<h2 id="section">齐次坐标</h2>

<p>cocos2dx和opengl中，有大量的数学计算。例如比如位置的变化。通过代码我们知道，这些计算使用都是矩阵。<br />
这些矩阵有什么特别的？他们特别的在于都是4维矩阵。<br />
而cocos2dx最多是3维，opengl也是为3维设计的接口，为什么会有4维？</p>

<p>因为这样的坐标更容易进行矩阵乘法，他们被称之为齐次坐标。</p>

<blockquote>
  <p>在数学里，齐次坐标（homogeneous coordinates），或投影坐标（projective coordinates）是指一个用于投影几何里的坐标系统，如同用于欧氏几何里的笛卡儿坐标一般。该词由奥古斯特·费迪南德·莫比乌斯于1827年在其著作《Der barycentrische Calcul》一书内引入[1][2]。齐次坐标可让包括无穷远点的点坐标以有限坐标表示。使用齐次坐标的公式通常会比用笛卡儿坐标表示更为简单，且更为对称。齐次坐标有着广泛的应用，包括电脑图形及3D电脑视觉。使用齐次坐标可让电脑进行仿射变换，并通常，其投影变换能简单地使用矩阵来表示。<br />
如一个点的齐次坐标乘上一个非零标量，则所得之坐标会表示同一个点。因为齐次坐标也用来表示无穷远点，为此一扩展而需用来标示坐标之数值比投影空间之维度多一。例如，在齐次坐标里，需要两个值来表示在投影线上的一点，需要三个值来表示投影平面上的一点。</p>
</blockquote>

<p>上述介绍来源自维基百科对<strong>齐次坐标</strong>的介绍.<br />
注意，齐次坐标可以比笛卡尔坐标更为简单，且更为对称。事实上也的确如此。</p>

<h3 id="section-1">齐次坐标的特征</h3>

<p>我们举例说明什么是齐次坐标。一个二维坐标（x,y）,如果转为齐次坐标就是（kx,ky,k）。<br />
<code>规律就是他比原来坐标多一维。且有相同的系数。</code><br />
在这个规律下，(3,4)对应的齐次坐标可以是（3，4，1），（6，8，2），（9，12，3）等等。</p>

<h3 id="section-2">齐次坐标如何区分点和向量</h3>

<p>我们向量的表示和点的是一样的。（3，4）可以认为是一个点，也可以认为是从原点出发的一个指向(3,4)的向量。<br />
那么在齐次坐标中，是如何区分这两种不同的表示呢？<br />
向量的意义最重要的不是他的数值而是他的方向。而点没有方向，只有位置。所以上面提到的<code>k=0</code>，则表示此是向量坐标，而<code>k=1</code>表示这是一个点坐标.<br />
[3，4，0]是一个方向向量，而[3,4,1]则是一个位置。</p>

<h2 id="section-3">仿射变换</h2>
<p>向量或者点经过矩阵线性变化加平移之后，转换为另一个向量或者点。<br />
放射变化可以表示成为如下的公式：<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-09-115125390754949.jpg" alt="-w300" /></p>

<p>这个公式是通过矩阵的缩放旋转以及平移之后计算得到的。所以仿射变换是复合变换。是基本矩阵变换相乘得来的。<br />
因此我们先得知道基本的矩阵变换。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-09-15128224606470.jpg" alt="" /></p>

<p>有了上述公式，我们可以基本写仿射变化的公式了。</p>

<p><code>P' = M(平移)*M(旋转) * M(缩放) * P</code></p>

<p><code>P</code>代表原先的坐标，经过缩放，旋转，平移之后转换成了新坐标<code>P'</code>。这里需要注意的一点是矩阵的乘法规则是从右到左，也就是对P坐标先做缩放，在做旋转，最后做平移。</p>

<p>根据矩阵的特性，我们可以知道矩阵平移其实可以做成矩阵相加。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">M0 = M1 + M2(M均是3维矩阵)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>而其缩放和旋转都是矩阵相乘，做成4位齐次坐标最大的好处是将相加的矩阵也可以以相乘的方式来计算。统一的操作方法会带来很多便利。</p>

<p>上面的矩阵转换能够让我们在不同坐标系的点进行转换。举例说明，你在办公室的位置是相对办公室这个房间而言的。房间的原点假设在前台。此时你距离前台位置是（100，200，0）。0代表层级，都是同一层办公室，自然为0。此时如果要计算你在地球上的位置，怎么计算？<br />
自然已经知道地球原点在哪里，按照这个原点计算你的位置。</p>

<p>最简单的方法自然是直接计算，地球原点到你之间的物理距离。<br />
如此自然可以，可是不是最好的，也不是最快的。如果又求你在这个国家的位置，国家的原点在首都。再求你在这一条街的位置，再求你在这个地区的位置，这么多的需求，是不是觉得这个方法不是特别有效？</p>

<p>最有效的方法，就是使用仿射矩阵。</p>

<p>知道自己在办公室的位置，那么直接求办公室前台（办公室原点）对一楼门卫（大楼原点）之间的矩阵转换M1。套用公式就能知道自己在大楼里面的位置。然后在一条街的位置，那就求一楼门卫在这条街原点的矩阵转换M2。剩下的大家举一反三就知道了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">P' = M(n)*M(n-1)*M(n-2)*...*M1*P</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因此可以推论得知，空间坐标转换最重要的就是求解一个仿射矩阵。</p>

<p>在opengl的世界中，我们将要接触到很多空间转换的事情。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">本地屏幕坐标-&gt;世界坐标-&gt;观察坐标(摄像机坐标，eye坐标)-&gt;裁剪坐标-&gt;投影坐标-&gt;标准设备坐标-&gt;屏幕坐标
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-09-115128146409840.png" alt="-w350" /><br />
因此在opengl中他的最终的参见坐标公式如下：</p>

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block">
  <msub>
    <mi>V</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>c</mi>
      <mi>l</mi>
      <mi>i</mi>
      <mi>p</mi>
    </mrow>
  </msub>
  <mo>=</mo>
  <msub>
    <mi>M</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>p</mi>
      <mi>r</mi>
      <mi>o</mi>
      <mi>j</mi>
      <mi>e</mi>
      <mi>c</mi>
      <mi>t</mi>
      <mi>i</mi>
      <mi>o</mi>
      <mi>n</mi>
    </mrow>
  </msub>
  <mo>&#x22C5;<!-- ⋅ --></mo>
  <msub>
    <mi>M</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>v</mi>
      <mi>i</mi>
      <mi>e</mi>
      <mi>w</mi>
    </mrow>
  </msub>
  <mo>&#x22C5;<!-- ⋅ --></mo>
  <msub>
    <mi>M</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>m</mi>
      <mi>o</mi>
      <mi>d</mi>
      <mi>e</mi>
      <mi>l</mi>
    </mrow>
  </msub>
  <mo>&#x22C5;<!-- ⋅ --></mo>
  <msub>
    <mi>V</mi>
    <mrow class="MJX-TeXAtom-ORD">
      <mi>l</mi>
      <mi>o</mi>
      <mi>c</mi>
      <mi>a</mi>
      <mi>l</mi>
    </mrow>
  </msub>
</math>

<h2 id="section-4">坐标</h2>

<p>坐标是相对了坐标系而言的，坐标系最重要就是定义了原点。<br />
对于游戏中的模型或者显示对象，他们都有自己的坐标系。比如我们物体A里面有一个子节点B在位置（100，100）处，那么这里的（100，100）就是相对于A的<strong>本地坐标</strong>计算的来。使用本地坐标是最直观的。<br />
在这个游戏世界中，还有一个<strong>世界坐标系，或者是View坐标系。也可以理解成舞台坐标系</strong>。舞台的物体很多，他们每一个都有相对于舞台原点的坐标。甚至嵌套的子节点也会拥有一个唯一的舞台坐标。计算方法，对应思考上面的仿射矩阵变换。<br />
假设舞台很大，玩家会通过拖拽的方式移动屏幕看到其他部分。<br />
舞台移动之后会影响opengl显示的图像。按照上面的公式，其实变化的只有<code>M(view)</code>。后面和前面的矩阵都没有变化，因此计算位置就会很快。<br />
而这里计算<code>M(view)</code>矩阵，通过摄像机来计算会更快。因为移动物体其实就是反向移动摄像机。</p>

<p>裁剪空间是对世界空间的的范围裁剪。只有在规定范围内的才会被显示出来。这种就是投影。有正交投影和透视投影。<br />
正交投影产生的效果就是前后一致的裁剪。主要用于2D游戏。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-09-115128184208022.png" alt="-w250" />(正交投影)</p>

<p>透视投影会出现近大远小的效果。主要在3D游戏中使用。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-09-115128184007944.png" alt="-w250" />(透视投影)</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-09-115128185556038.png" alt="-w250" />(图1)<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-09-115128157278548.jpg" alt="-w150" />(右手坐标系)</p>

<p>投影裁剪之后，只保留在视椎体内的坐标，然后将坐标转换为opengl要求的[-1，1]标准化设备坐标。<br />
最后<code>opengl</code>通过<code>glViewPort()</code>设定的屏幕分辨率将坐标有转换为屏幕坐标。</p>

<p>在这里使用opengl右手坐标系，因此上面(图1)中所示的坐标系就是opengl的坐标。在视椎体的正中心。因此x的坐标都会标准化成[-1,1]的范围。而y也同样如此。至于z，适用于深度测试来使用的，同一个z轴上的点，具体就是离near面近的点就可能直接使用，而其他的点可能被直接抛弃掉。</p>

<h2 id="section-5">接下来，扩展点什么</h2>

<p>这些矩阵变换和opengl坐标系的基础知识，能够更好的帮助我们理解接下来的矩阵推导。<br />
我们将要涉及的View矩阵(观察矩阵)和投影矩阵推导。<br />
而理解这两种矩阵推导又能帮助我们理解游戏引擎是如何将顶点数据传递给opengl，opengl又是如何处理这些顶点数据，展示到屏幕上来。</p>

<p>最后通过这些，我们会将cocos2dx的opengl渲染流程疏通一遍。更好去理解cocos2dx是如何运作的。</p>

<h2 id="section-6">参考链接</h2>

<ol>
  <li><a href="http://www.songho.ca/opengl/gl_projectionmatrix.html">OpenGL Projection Matrix</a></li>
  <li><a href="https://learnopengl-cn.readthedocs.io/zh/latest/01%20Getting%20started/08%20Coordinate%20Systems/">learnopengl-cn</a></li>
  <li><a href="https://oncemore2020.github.io/blog/homogeneous/">齐次坐标系入门级思考</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在xcode上运行opengl工程-使用Glitter]]></title>
    <link href="http://www.newtomato.me/blog/2017/12/03/opengl-glitter"/>
    <updated>2017-12-03T19:52:27+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/12/03/opengl-glitter</id>
    <content type="html"><![CDATA[<p>鉴于我们一般都是在<code>https://learnopengl-cn.github.io</code>这里学习opengl。这个开源的工程的example是非常好的学习工程。但是在mac上运行起来还是很麻烦。上面提到了glew，glfw以及glad等还不足以运行这些工程，手动安装其他依赖也是很痛苦的过程。<br />
但是<code>glitter</code>帮助我们把这些依赖全部都管理起来了。</p>

<p>githud地址<a href="https://github.com/Polytonic/Glitter">在此</a>.</p>

<!--more-->

<p>git clone之后，在终端中输入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone --recursive https://github.com/Polytonic/Glitter
</span><span class="line">cd Glitter
</span><span class="line">mkdir Build
</span><span class="line">cd Build
</span><span class="line">cmake -G "Xcode" ..</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就可以在Build中生成一个xcode工程。</p>

<p>这里我遇到最大的问题就是clone花费了很长时间，但是没有遇到安装失败的情况。<br />
但是这个工程只是一个壳，我们还需要把learnopengl的源码发进来。<br />
mac上使用的opengl版本过高以及一些屏幕分辨率的问题，我最终尝试到如下工程的修改刚好适合我的测试。作者对learnopengl的源码做了注释和部分修改。在他职业readme上说明了修改的地方：</p>

<p><code>https://github.com/THISISAGOODNAME/learnopengl-glitter</code></p>

<h2 id="learnopengl">如何运行learnopengl</h2>

<p>为了能够运行这些example工程，我们先创建一个<code>target</code>，例如<code>hello_window</code>，然后将hello_window里面的文件全部都拖放进来。<br />
此刻的target的hello_window需要配置很多才能运行，为了方便起见，我们直接复制<code>Glitter</code>出来一份，然后改名为hello_window。<br />
在<code>complie source</code>这里将hello window的文件全部包含进来。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-03-15123014609016.jpg" alt="" /><br />
然后在scheme中选择hello_window，运行即可。</p>

<h2 id="section">需要注意的问题</h2>

<p>在mac创建一个矩阵对象，默认初始化似乎不正确。<br />
为了能够正确展示，凡是出现<code>glm::mat4 trans;</code>这样默认初始化的地方，请一律改为了<code>glm::mat4 trans = glm::mat4(1);</code>.</p>

<p>只有这样才能让矩阵转换生效。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-03-Untitled.gif" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在xcode上运行openGL工程]]></title>
    <link href="http://www.newtomato.me/blog/2017/12/03/macshang-openglhuan-jing"/>
    <updated>2017-12-03T17:36:47+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/12/03/macshang-openglhuan-jing</id>
    <content type="html"><![CDATA[<p>学习opengl最基础的方法就是将新手教程的工程先运行起来，实战才能收获经验。<br />
先介绍我的工作环境。<code>MAC Sierra 10.12.6</code>,<code>xcode 9.2</code>。</p>

<h2 id="section">手动安装依赖库，配置各种环境变量。</h2>

<h3 id="glfwglew">glfw以及glew安装</h3>

<p>自己安装各种依赖工具包，主要有<code>glfw</code>和<code>glew</code>,以及<code>glad</code>。</p>

<p><code>glfw</code>和<code>glew</code>最简单安装方法就是通过<code>brew</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew install glfw
</span><span class="line">brew install glew</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>安装完成之后，会在被存放在<code>/usr/local/Cellar/glew/</code>以及<code>/usr/local/Cellar/glfw</code>这里。</p>

<!--more-->

<h3 id="glad">安装glad</h3>

<p>glad是非常重要的一个工具库，缺失这个库，即使你的工程能够编译通过，也运行不起来。因为opengl的接口函数是需要调用<code>gladLoadGL();</code>被加载进来。</p>

<p>安装的方法：<br />
	1. 到<a href="http://glad.dav1d.de/">http://glad.dav1d.de/</a>选择,3.3版本的opengl，Profile选择<code>Core</code><br />
	2. generate a loader。下载zip文件。<br />
	3. 解压缩之后，待会放到项目中。</p>

<h3 id="xcode">创建一个xcode工程开始配置</h3>

<ol>
  <li>
    <p>选择生成一个command line tool工程。</p>

    <p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-03-15122917458581.jpg" alt="=w300" /></p>
  </li>
  <li>然后打开<code>Preference-&gt;Locations-&gt;Custom Pathes</code>,设置变量如下：<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-03-15122918927071.jpg" alt="" /></li>
  <li>
    <p>然后打开<code>Project</code>的基础配置，在<code>Header search paths</code> 和<code>Library search paths</code>这里设置</p>

    <p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-03-15122921103307.jpg" alt="" /></p>
  </li>
  <li>
    <p>最后将上面的glad文件放入到项目中。</p>

    <p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-03-15122933160778.jpg" alt="" /></p>
  </li>
  <li>最后配置要编译的库文件</li>
</ol>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-03-15122933998643.jpg" alt="" /><br />
6. 修改你的main.cpp文件。例如我这边使用<a href="https://pan.baidu.com/s/1bp548Bd">main.cpp 密码:yud8</a>在此。运行工程你应该可以看到一个三角形。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-12-03-15122935323107.jpg" alt="=" /></p>

<p>至此第一种方法，配置mac上opengl的环境已经结束。虽然很费时间。但是这趟流程走下来确实也是值得的。<br />
下一遍文章我将介绍一个稍微简单的方法。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装pygraphviz遇到的问题]]></title>
    <link href="http://www.newtomato.me/blog/2017/11/21/pygraphviz"/>
    <updated>2017-11-21T16:50:21+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/11/21/pygraphviz</id>
    <content type="html"><![CDATA[<h2 id="section">环境：</h2>

<pre><code>MacOS sierra
python 2.7
</code></pre>

<!--more-->

<h2 id="section-1">使用安装命令：</h2>

<p><code>	sudo pip install pygraphviz</code></p>

<p>命令行报错，不能正确安装。报错日志如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Collecting pygraphviz
</span><span class="line">  Downloading pygraphviz-1.3.1.zip (123kB)
</span><span class="line">    100% |████████████████████████████████| 133kB 1.5MB/s 
</span><span class="line">Installing collected packages: pygraphviz
</span><span class="line">  Running setup.py install for pygraphviz ... error
</span><span class="line">    Complete output from command /usr/bin/python -u -c "import setuptools, tokenize;__file__='/private/tmp/pip-build-qfFpFG/pygraphviz/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))" install --record /tmp/pip-JmwjA6-record/install-record.txt --single-version-externally-managed --compile:
</span><span class="line">    running install
</span><span class="line">    Trying pkg-config
</span><span class="line">    Package libcgraph was not found in the pkg-config search path.
</span><span class="line">    Perhaps you should add the directory containing `libcgraph.pc'
</span><span class="line">    to the PKG_CONFIG_PATH environment variable
</span><span class="line">    No package 'libcgraph' found
</span><span class="line">    Traceback (most recent call last):
</span><span class="line">      File "&lt;string&gt;", line 1, in &lt;module&gt;
</span><span class="line">      File "/private/tmp/pip-build-qfFpFG/pygraphviz/setup.py", line 87, in &lt;module&gt;
</span><span class="line">        tests_require=['nose&gt;=0.10.1', 'doctest-ignore-unicode&gt;=0.1.0',],
</span><span class="line">      File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py", line 151, in setup
</span><span class="line">        dist.run_commands()
</span><span class="line">      File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py", line 953, in run_commands
</span><span class="line">        self.run_command(cmd)
</span><span class="line">      File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py", line 972, in run_command
</span><span class="line">        cmd_obj.run()
</span><span class="line">      File "setup_commands.py", line 44, in modified_run
</span><span class="line">        self.include_path, self.library_path = get_graphviz_dirs()
</span><span class="line">      File "setup_extra.py", line 121, in get_graphviz_dirs
</span><span class="line">        include_dirs, library_dirs = _pkg_config()
</span><span class="line">      File "setup_extra.py", line 44, in _pkg_config
</span><span class="line">        output = S.check_output(['pkg-config', '--libs-only-L', 'libcgraph'])
</span><span class="line">      File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.py", line 573, in check_output
</span><span class="line">        raise CalledProcessError(retcode, cmd, output=output)
</span><span class="line">    subprocess.CalledProcessError: Command '['pkg-config', '--libs-only-L', 'libcgraph']' returned non-zero exit status 1
</span><span class="line">
</span><span class="line">    ----------------------------------------
</span><span class="line">Command "/usr/bin/python -u -c "import setuptools, tokenize;__file__='/private/tmp/pip-build-qfFpFG/pygraphviz/setup.py';f=getattr(tokenize, 'open', open)(__file__);code=f.read().replace('\r\n', '\n');f.close();exec(compile(code, __file__, 'exec'))" install --record /tmp/pip-JmwjA6-record/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /private/tmp/pip-build-qfFpFG/pygraphviz/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看报错的消息应该是没有<code>pkg-config</code>这个命令，于是开始安装它。</p>

<p><code>brew install pkg-config</code></p>

<p>再次运行<code>pygraphviz</code> 安装命令，依然报错。</p>

<h2 id="section-2">最后的大招</h2>

<p>最后，经过各种google搜索和尝试，花费了我一上午的时间。才解决了这个问题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pkg-config --libs-only-L libcgraph
</span><span class="line">pkg-config --cflags-only-I libcgraph
</span><span class="line">pip install pygraphviz --install-option="--include-path='/usr/include/graphviz/'" --install-option="--library-path='/usr/lib/graphviz/'"
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时graphviz成功安装。在python中就可以使用了</p>

<p><code>import pygraphviz as gv</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ETC格式图片最佳实践]]></title>
    <link href="http://www.newtomato.me/blog/2017/11/12/etcge-shi-tu-pian-zui-jia-shi-jian"/>
    <updated>2017-11-12T15:04:27+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/11/12/etcge-shi-tu-pian-zui-jia-shi-jian</id>
    <content type="html"><![CDATA[<p>最近整理android资源，发现有不少可以采用etc格式图片进行优化的地方。所以针对这块技术点进行了一下整理总结。分享给大家。</p>

<p><strong>etc是纹理压缩格式，可以不用cpu解压缩对齐像素而直接上传给GPU读取。GPU可以通过位置索引得到像素信息。也就意味着可以随机读取，快速准确。</strong></p>

<p>一张1024x1024的RGBA格式的图片，内存占用大约是1024x1024x4 = 4M。但是etc的每个像素占用0.5个字节。所以是0.5M。从这一点就有很多大的内存节约。</p>

<p>优点如上。</p>

<p>缺点就是不支持透明像素，而且图片的大小会变大很多。<br />
对于透明，我们可以采用shader的方式，对一张图片的像素处理让他能够呈现出透明。</p>

<p>具体的方案可以看<a href="http://malideveloper.arm.com/develop-for-mali/sample-code/etcv1-texture-compression-and-alpha-channels/">这里</a><br />
<!--more--></p>

<h2 id="section">开始</h2>

<p>我这里使用的是<code>MALI GPU</code> 厂商提供给开发者的工具<code>Mali GPU Texture Compression Tool </code>，可以将图片压缩成ect1或者etc2格式。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-11-12-15104668339680.jpg" alt="" /></p>

<p>在导出的时候我们选择如何处理<code>alpha</code>。</p>

<p>第一种方式方式，放弃alpha通道数据。就是没有alpha也不影响图片显示。只有确定的不需要透明的图片可以才用这样的方式。比如模糊的大块儿图像。<br />
清晰的图像，掉透明会让纹理上出现波纹状的显示。肉眼容易看出来。</p>

<h2 id="section-1">图像和透明纹理合图</h2>

<p>第二种是创建透明和图片纹理的合图。上面是图像纹理，下面是透明纹理，通过shader读取上下对应纹理坐标的数据，相加得到真实的问题数据。<br />
这样的好处就是只要读取一个纹理采样即可。</p>

<p>VerticalShader修改为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">attribute vec4 a_v4Position;
</span><span class="line">attribute vec2 a_v2TexCoord;
</span><span class="line">varying vec2 v_v2TexCoord;
</span><span class="line">varying vec2 v_v2AlphaCoord;
</span><span class="line"> 
</span><span class="line">void main()
</span><span class="line">{
</span><span class="line">    v_v2TexCoord = a_v2TexCoord * vec2(1.0, 0.5);
</span><span class="line">    v_v2AlphaCoord = v_v2TexCoord + vec2(0.0, 0.5);
</span><span class="line">    gl_Position = a_v4Position;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>FragmentShader修改为：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">precision mediump float;
</span><span class="line">uniform sampler2D u_s2dTexture;
</span><span class="line">varying vec2 v_v2TexCoord;
</span><span class="line">varying vec2 v_v2AlphaCoord;
</span><span class="line">void main()
</span><span class="line">{
</span><span class="line">    vec4 v4Colour = texture2D(u_s2dTexture, v_v2TexCoord);
</span><span class="line">    v4Colour.a = texture2D(u_s2dTexture, v_v2AlphaCoord).r;
</span><span class="line">    gl_FragColor = v4Colour;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>## 单独压缩的图像和透明纹理</p>

<p>第三种方式是对图像和透明单独生成两张纹理。当然也是用Shader来实现两个纹理“叠加”，缺点就是需要两个纹理的采样读取。</p>

<p>修改片段着色器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vec4 colour = texture2D(u_s2dTexture, v_v2TexCoord);
</span><span class="line">colour.a = texture2D(u_s2dAlpha, v_v2TexCoord).r;
</span><span class="line">gl_FragColor = colour;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至于最后一种方式，是第三种方式未压缩版本。暂时并未使用。所以在此不做叙述。</p>

<h2 id="section-2">结语</h2>

<p>在cocos2dx，我使用Sprite去使用这样的shader，都表现出我预期的样子。但是使用九宫格Scale9Sprite，则没有达到预期。Scale9Sprite从代码上看，已经对纹理做了切割。因此不满足上面Shader的纹理坐标系。导致读取不正确。</p>

<p>生成pkm图片的工具除了<code>Mali GPU Texture Compression Tool</code>，<code>texturepacker</code>也可以，早期的版本有些问题，但是现在的最新版已经支持导出Alpha通道的纹理图片了。<br />
<code>Mali GPU Texture Compression Tool</code>需要到mali开发者网站上下载，由于国内特殊情况，下载速度几乎回到10年前的速度。为此我放到百度云这里，需要的可以自取。</p>

<p>链接:http://pan.baidu.com/s/1pK8S1mF  密码:cab2</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Maker：blend mode遮挡效果]]></title>
    <link href="http://www.newtomato.me/blog/2017/11/05/blend-modezhe-dang-xiao-guo"/>
    <updated>2017-11-05T22:29:12+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/11/05/blend-modezhe-dang-xiao-guo</id>
    <content type="html"><![CDATA[<p>在FEZ游戏中，经常会有这样的效果。人物移动到某些物品之后，只有形状可见。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-11-05-15098910326144.jpg" alt="=" /></p>

<p>这样的效果，在早期的flash游戏中，会计算两个物品是否发生遮挡，然后对后面的个物品的像素的alpha进行处理。并在前面draw一下。改变遮挡关系。</p>

<p>Game Maker如何实现这样的效果呢？<br />
只用不到10行代码即可。性能远超我所想象。用不到CPU的计算。纯粹的GPU计算。</p>

<p>先看我的演示（请忽略我简单粗糙的画作）<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-11-05-a.gif" alt="a" /></p>

<p>当绿团子躲在障碍物后面，漏出了他的形状。这里用到的就是<code>gpu_set_blendmode_ext()</code> 函数。<br />
<!--more--></p>

<h2 id="section">原理</h2>

<p><code>gpu_set_blendmode_ext(bm_dest_alpha,bm_inv_dest_alpha)</code></p>

<p>这个函数最终起作用是因为如下的公式：</p>

<p><code>final_color = (source_pixel * bm_dest_alpha) + (dest_pixel * bm_inv_dest_alpha)</code></p>

<p>为了能看到前面的灰色的圆肚子，还是需要再次draw一遍。也就是这次draw才是source。下面的场景已经成为dest了。</p>

<p>所以这个你看到效果，按照层次分的话，应该是如下的样子：</p>

<p>最下面的是你能看到绿团子。<br />
绿团子上面是一层你看不到的透明。大小是以绿团子为准。<br />
然后是上面的障碍物。<br />
最后在此draw一个绿团子的形状的灰色形状的物品，完全按照绿团子的形状为准。</p>

<p>当绿团子在障碍物后面的时候，虽然看上去所有都是可见的。实际上，露出来的绿团子的像素对gpu而言“其实”是透明的。而障碍物那里是不透明的。<br />
此时在draw一个灰色团子形状的物品。按照上面的公式，不透明的地方自然就展示出来了。透明的地方，灰色就不展示了。</p>

<h2 id="section-1">源码</h2>

<p>绿团子代码：</p>

<p>draw event：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">draw_self()
</span><span class="line">gpu_set_blendenable(false)
</span><span class="line">
</span><span class="line">gpu_set_colorwriteenable(false,false,false,true)
</span><span class="line">x1 = x - sprite_xoffset
</span><span class="line">y1 = y - sprite_yoffset
</span><span class="line">draw_set_alpha(0)
</span><span class="line">//draw_set_color(c_blue)
</span><span class="line">draw_rectangle(x1,y1,x1+sprite_width,y1+sprite_height,false)
</span><span class="line">
</span><span class="line">draw_set_alpha(1)
</span><span class="line">gpu_set_colorwriteenable(true,true,true,true)
</span><span class="line">gpu_set_blendenable(true)
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>draw end event：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gpu_set_blendmode_ext(bm_dest_alpha,bm_inv_dest_alpha)
</span><span class="line">
</span><span class="line">gpu_set_alphatestenable(true)
</span><span class="line">gpu_set_fog(true,c_gray,0,0.4);
</span><span class="line">draw_set_alpha(0.4)
</span><span class="line">draw_self()
</span><span class="line">gpu_set_fog(false,c_white,0,0)
</span><span class="line">gpu_set_alphatestenable(false)
</span><span class="line">gpu_set_blendmode(bm_normal)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-2">结语：</h2>

<p>game maker很多的黑魔法，都很值得学习。这里推荐几个我经常看的大神的频道。是他们无私的分享，才让我捡到这个漂亮的贝壳。</p>

<ol>
  <li><a href="https://www.youtube.com/user/999Greyfox">Shaun Spalding</a></li>
  <li><a href="https://www.youtube.com/user/uheartbeast">HeartBeast</a></li>
  <li><a href="https://www.youtube.com/user/PixelatedPope">PixelatedPope</a></li>
  <li><a href="http://www.davetech.co.uk/">David</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game maker：Extend blend mode]]></title>
    <link href="http://www.newtomato.me/blog/2017/10/29/gamemakerblendmode"/>
    <updated>2017-10-29T23:00:17+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/10/29/gamemakerblendmode</id>
    <content type="html"><![CDATA[<p>最近看到一款游戏，使用了<code>Extend blend mode</code>做了一个非常牛叉的特效。<br />
特效在此，大家先欣赏一下：<br />
<img src="http://www.davetech.co.uk/pages/gamemakersurfacedamage//twitter3.gif" alt="" /></p>

<p>作者将如何实现的效果在<a href="http://www.davetech.co.uk/gamemakersurfacedamage">这里</a>介绍了一下。</p>

<!--more-->

<p>里面最关键的代码就是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">damagemask = surface_create(room_width, room_height)
</span><span class="line">
</span><span class="line">surface_set_target(damagemask)
</span><span class="line">draw_sprite(spr_room1walls,0,0,0);
</span><span class="line">surface_reset_target();
</span><span class="line">	
</span><span class="line">/// obj_damage – draw
</span><span class="line">if (surface_exists(damagemask)) {
</span><span class="line">    draw_surface(damagemask,x,y)
</span><span class="line">}
</span><span class="line">
</span><span class="line">
</span><span class="line">...
</span><span class="line">draw_set_blend_mode(bm_substract)
</span><span class="line">draw_circle(x,y,random(10))
</span><span class="line">draw_line(...)
</span><span class="line">...
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">原理介绍</h2>

<p><code>game maker</code>中surface是一个独特的存在，可以绘制任何物品上去，也可以将自己绘制到屏幕上。可以看成是画布。</p>

<p><code>game maker</code>的draw也比较独特，普通情况下，我们是<code>bm_normal</code>的模式，既覆盖的绘制。<br />
但是这里使用的是<code>bm_subtract</code>的方式，顾名思义就是将要画上去的东西裁减掉。比如上面绘制的是一个圆形和一条射击冲击波的line。则绘制的时候把这个圆形和line裁剪掉。</p>

<p>由此上面的效果，被枪射中，墙壁上留有痕迹的效果就出来了。</p>

<p>这么高级的功能，还需要继续深入的了解！</p>

<h2 id="drawsetblendmode">draw_set_blend_mode</h2>

<p>这方面的资源网络上比较少，现在在GM 2.0上已经改名为<code>gpu_set_blendmode_ext</code>,由此可以看出这个函数是在绘制的时候设置gpu的绘制模式。也就是不需要cpu的计算。</p>

<p>他有两个重要的参数。<code>gpu_set_blendmode_ext(src,dest)</code>。<br />
src是指：<code>the colour of the pixel we're going to draw</code>，即我们将要绘制的东西。<br />
dest是指：<code>the colour that's already in the pixel we're drawing to</code>，即我们已经绘制的东西，也就是说我们将<code>src</code>绘制到<code>dest</code>上。可以简单的认为dest是一个背景，在后面，src是个道具，在上面。</p>

<p>这里的概念很重要，因为绘制公式是在这个基础上绘制的。</p>

<p>绘制公式如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Rs * factor_src + Rd * factor_desc = new R
</span><span class="line">Gs * factor_src + Gd * factor_desc = new G
</span><span class="line">Bs * factor_src + Bd * factor_desc = new B
</span><span class="line">As * factor_src + Ad * factor_desc = new A
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>某一个像素点是如何被混合绘制出来的呢？就是上面的公式。将背景和前景的像素颜色值，按照上述公式计算出来一个新的颜色值。</p>

<p>两个参数还有一些默认值。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-10-29-15092877037009.jpg" alt="" /></p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-10-29-15092878217711.jpg" alt="=" /><br />
所以如何实现<code>bm_subtract</code>的效果呢？参数就是上面的<code>（bm_zero,bm_inv_src_colour）</code>,<br />
接下来我们套入到公式里面计算一下：</p>

<p>画出来的圆圈和线条，相当于都是遮罩，都是黑色的。因此就是#000000。<br />
<code>公式里面RGB颜色值是用0~1表示，就是百分比</code>。因此每个都是0。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">0 x 0 + Rd * 1 = Rd
</span><span class="line">0 x 0 + Gd * 1 = Gd
</span><span class="line">0 x 0 + Bd * 1 = Bd
</span><span class="line">1 x 0 + Ad * 0 = 0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因此这个像素点就被成了透明的。是不是就实现了画上去的东西，其实被扣除了效果呢？</p>

<h2 id="section-1">后续</h2>

<p>这个功能还没有结束，远远超过你的想象。大名鼎鼎的独立游戏《INK》也是采用这个原理制作的。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-10-29-15092884978865.jpg" alt="" /></p>

<p>作者使用的方式是<code>（bm_dest_alpha ，bm_inv_src_alpha）</code>。</p>

<p>另外，在<code>reddit</code>上找了一份example工程，可以查看不同模式的组合带来不一样的体验哦。再次也分享给大家。<br />
<a href="https://pan.baidu.com/s/1gf1WFyr">百度云盘链接</a>：https://pan.baidu.com/s/1gf1WFyr 密码: 8u98</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为游戏增加记录回放功能]]></title>
    <link href="http://www.newtomato.me/blog/2017/10/08/hui-fang"/>
    <updated>2017-10-08T17:29:29+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/10/08/hui-fang</id>
    <content type="html"><![CDATA[<p>为游戏增加回放功能的主要目的是可以将原来的操作重新播放一遍，很快的定位问题。尤其的不易复现的问题。<br />
早先定位不易复现的问题采用的方法是让服务器记录玩家的操作请求。<br />
如果发生问题，可以根据请求日志做分析。<br />
这种方案一般是用在游戏上线之后。在上线之前，只能靠开发和测试同学大量的测试。<br />
所以当我看到cocos2dx增加一个控制台（<code>Console</code>）类的时候，就突发奇想，是否可以在前端做一个简单的记录回放。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-10-08-柴犬.jpg" alt="柴犬" /><br />
柴柴帮忙镇楼！<br />
<!--more--></p>

<h3 id="section">原理和问题</h3>

<p>记录回放不是游戏业务逻辑，不需要增加额外的代码。它独立于游戏存在。记录玩家的点击操作。保存到本地文件中。然后在游戏启动之后，读取文件内容，挨个播放玩家的点击。以此实现回放功能。</p>

<p>这里涉及到的问题是：</p>

<ol>
  <li>玩家上次操作的游戏和本次回放的游戏内容要一致。现在游戏为了增加趣味性，很多采用随机。比如道具物品的生成，如果不一致，回放肯定出问题。</li>
  <li>记录的点击位置是以当前设备分辨率为准。如果回放设备和当前设备分辨率不一致。位置信息不对，点击也会出问题。</li>
  <li>即使解决了上面两个问题，如果上次点击和这次点击之间用时10s钟（可能是网络卡住，可能是性能出现问题）。当回放的时候，挨个触发的点击之间时长小于10s中，那么点击就不能正确触发。依然会出现问题。</li>
</ol>

<p>这三个问题，最容易的是第二个，只要保证在同一分辨率的设备上播放即可。<br />
第一个问题，我们需要和服务器同学沟通，让他对关卡做一个镜像。开发成本较高。只好放弃。<br />
最后我们在开发模式下，通过客户端的缓存，将服务器的数据全部保存下来。回放的时候，完全是客户端在自己播放。将与服务器请求的数据也缓存起来。虽然开发成本高了，但是基于此，没有任何网络请求的压力，第三个问题也有了解决方案。<br />
第三个问题还涉及性能问题，要快速解决，我们想到的是用一台高端配置的设备，或者直接在模拟器上播放。</p>

<p>至此大问题都已经解决，剩下的就是如何实现回放了。</p>

<h3 id="cocos2dxconsole">cocos2dx提供的console为基础</h3>

<p>在cocos2dx 3.x版本，增加了一个<code>Console</code>功能。提供的基本功能如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">{
</span><span class="line">    createCommandAllocator();
</span><span class="line">    createCommandConfig();
</span><span class="line">    createCommandDebugMsg();
</span><span class="line">    createCommandDirector();
</span><span class="line">    createCommandExit();
</span><span class="line">    createCommandFileUtils();
</span><span class="line">    createCommandFps();
</span><span class="line">    createCommandHelp();
</span><span class="line">    createCommandProjection();
</span><span class="line">    createCommandResolution();
</span><span class="line">    createCommandSceneGraph();
</span><span class="line">    createCommandTexture();
</span><span class="line">    createCommandTouch();
</span><span class="line">    createCommandUpload();
</span><span class="line">    createCommandVersion();
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在项目中增加对端口5678的监听即可。</p>

<p>lua代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cc.Director:getInstance():getConsole():listenOnTCP(5678)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>c++代码</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">auto console = director-&gt;getConsole();
</span><span class="line">console-&gt;listenOnTCP(5678);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>项目启动之后，打开终端：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nc localhost 5678</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果是在手机上启动，则需要手机和电脑连在同一个局域网之内。然后查看手机的ip地址。替换上面的localhost。</p>

<p>敲入命令之后，终端显示connect success。然后输入<code>help</code>。此时cocos2dx提供的定制命令全会罗列出来。</p>

<p>而我们要使用的就是<code>touch</code>命令。</p>

<h3 id="section-1">保存点击位置和回放</h3>

<p>保存的位置，应该是什么位置呢？</p>

<p>因为我们使用的是touch命令，而他需要的位置信息，是以设备坐标系为准的。也就是原点坐标在左上角为准。而cocos2dx的坐标系是以opengl为准，左下角是原点。</p>

<p>所以我们要将点击的opengl坐标转为设备坐标。<br />
这个转换，cocos2dx也提供了对应的接口。代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Vec2 Director::convertToGL(const Vec2&amp; uiPoint)
</span><span class="line">{
</span><span class="line">    Mat4 transform;
</span><span class="line">    GLToClipTransform(&amp;transform);
</span><span class="line">    ...
</span><span class="line">    return Vec2(glCoord.x * factor, glCoord.y * factor);
</span><span class="line">}
</span><span class="line">
</span><span class="line">Vec2 Director::convertToUI(const Vec2&amp; glPoint)
</span><span class="line">{
</span><span class="line">    Mat4 transform;
</span><span class="line">    GLToClipTransform(&amp;transform);
</span><span class="line">		...
</span><span class="line">    return Vec2(glSize.width * (clipCoord.x * 0.5f + 0.5f) * factor, glSize.height * (-clipCoord.y * 0.5f + 0.5f) * factor);
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以记录点击位置的代码很简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local posx,posy = node:getPosition()
</span><span class="line">local pos = node:getParent():convertToWorldSpace(cc.p(posx,posy))
</span><span class="line">local director = cc.Director:getInstance()
</span><span class="line">local uiPos = director:convertToUI(pos)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>记录位置，然后保存。大功完成一半。是不是很简单。</p>

<p>接下来说一下回放。<br />
回放是自动完成，也就意味有一个定时器，定时将位置信息触发。<br />
我的做法是使用<code>python</code>结合<code>nc</code>，<code>touch</code>命令，将位置信息挨个触发。</p>

<p>python可以调用系统命令。我们使用adb命令将保存的位置信息文件读出来，然后<code>nc连接</code>游戏。在nc命令模式下，调用<code>touch</code>命令。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">touch swipe 300 400 300 400</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里touch有一个bug，就是对单点的支持不正确，点击并未触发。于是我尝试使用了多点。就是传递了同一个位置。竟然可以使用。</p>

<p>python代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nc = Netcat(server_address, 5678)
</span><span class="line">while(index &lt; len(recordArray)):
</span><span class="line">    nc.read_until('&gt;')
</span><span class="line">    item = recordArray[index]
</span><span class="line">    cmd = "touch swipe %d %d %d %d \n"  % (item[0],item[1],item[0],item[1])
</span><span class="line">    nc.write(cmd)
</span><span class="line">
</span><span class="line">    index = index + 1
</span><span class="line">    time.sleep(4)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">结语</h3>

<p>至此这个工具的制作过程都讲完了。期间也掉进了坑中，幸运的是和其他同事交流下，脑袋就清晰了一些。慢慢的我的这个大坑也就填上了。<br />
实践过程中也存在一些问题。也在慢慢优化中。期望有一天成熟起来，能给其他项目中带来便利。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-10-08-15074549225204.jpg" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cocos2dx游戏性能优化技巧]]></title>
    <link href="http://www.newtomato.me/blog/2017/10/06/cocos2dxxing-neng-you-hua"/>
    <updated>2017-10-06T22:09:58+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/10/06/cocos2dxxing-neng-you-hua</id>
    <content type="html"><![CDATA[<p>手机游戏性能优化主要有两个方面。一个CPU，一个GPU。</p>

<p>GPU主要用于图像渲染方面。由于现在显卡发展迅速。原本CPU的部分功能，可以转移到GPU上计算运行。这样大大的减轻了CPU的运算压力。提升效率。</p>

<p>GPU和CPU都有各自的性能指标。我们最常优化的地方都是CPU，因此我先从这一部分讲起。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-10-06-15073018470041.jpg" alt="" /><br />
我给你演示一下我做的项目！这…,肯定是环境的问题！<br />
<!--more--></p>

<h3 id="cpu">CPU有关的方法</h3>

<p>cocos2dx在开启debug模式之后，在左下角有三行debug信息。<code>GL vertical</code>，<code>draw call</code>，以及<code>fps</code>.<br />
fps是最常用的指标之一。数值越高游戏运行越流畅。他表示一秒钟能刷新多少帧。<br />
draw call也是性能优化的指标。他表示需要几次draw才能把图片展示出来。<br />
gl vertical不常用，但是也是优化指标之一，他表示当前有多少个顶点数据。</p>

<p>所有的方法就是围绕这三个指标开始展开。</p>

<ol>
  <li>使用<code>batchnode</code>批处理的方式加载图片。因此cocos2dx在这方面做了优化，在同一个<code>batchnode</code>的图片会一次性draw到GPU上，从而降低<code>draw call</code>的调用。从cocos2dx 3.0以后的版本，cocos2dx自动使用batchnode技术，而不需要开发者自己创建。</li>
  <li><code>fps</code>的降低是因为有大量数据的计算，例如对象的生成。因此考虑对象池技术。例如cocos2dx使用的<code>AnimaitonCache</code>，<code>TextureCache</code>，<code>SpriteFrameCache</code>等。例如我们创建很多敌人。敌人消亡之后又会重新创建。实际上可以放到对象池中，默认从池中获取，如果池子里面没有对象，在重新创建。</li>
  <li>加载较大资源，瞬间fps会下降很多。那是因为这个过程是加载图片资源和解析动画数据创建对象。动画资源最好提前加载。
    <ol>
      <li>按照由大到小的顺序加载。加载大的资源会和内存申请资源2倍的内存。但加载完什么时候不会立即释放。接着在依次加载。此时内存已经被撑大，在加载资源也可能不在需要申请新的内存了。</li>
      <li>io读取动画数据信息，使用缓存，这点在cocos studio制作的armature中已经使用。但是Spine动画并未如此。他会每次创建都会重新加载。</li>
      <li>可以用序列帧动画代替复杂的需要计算的动画。序列帧动画资源比较大。加载后压力转嫁给gpu而非cpu。</li>
    </ol>
  </li>
  <li>减少粒子动画的使用。</li>
  <li>图片加载之后，为什么会占据那么高的内存？一张1024x1024的RGB8888，大小200k的图片，加载后，占内存4M，因为图片本身是压缩的数据。在内存中都会被解压缩膨胀起来。他先被CCImage读取解析（它实现了对于不同类型图片得读取、解析、像素信息保存），然后CCTexture2D在根据CCImage又创建了一份数据。因此内存会有2倍的开销，如果我们可以使用gpu直接解析的图片，比如ios平台的pvr tc4格式，或者android的etc格式，则内存只有1倍左右的开销。</li>
  <li>上述提到的pvr tc4格式，也有自己的缺点，它是有损压缩。肉眼可以看得出来，因此只能用于细微的地方。比如特效或者粒子等。</li>
</ol>

<h3 id="gpu">GPU有关的方法</h3>

<p>GPU的优化则要分情况而定。</p>

<p>GPU早期的架构和PC相似，都是IMR（Immediate Mode Rendering），这种架构的GPU渲染有个问题，就是Overdraw过高。因为他将被遮挡的物体也被draw到显卡上。这明显是一种浪费。<br />
现在的GPU在一定程度上可以避免这个问题，但是需要应用程序将物体按照z轴顺序从前往后的顺序提交给GPU，这是一种方案。<br />
另外，现在GPU有三家大的厂商。分别是<code>powervr，高通Adreno，ARM mali</code>。他们采用的是TBR（分块渲染）的架构。在overdraw方面，<code>powervr</code>是做得最好的一家。他使用<code>TBDR（Tile Based DeferredRendering）</code>架构，他增加了一个<code>HSR（Hidden Surface Removal)</code>硬件单元，剔除掉被遮挡的三角形。</p>

<p>因此说GPU的优化分情况而定。而为了降低遮挡，在我们开发游戏中可以通过TexturePacker的多边形裁剪来做到。<br />
说着这个，最常见的情况是有透明的图片，透明也是像素，也需要被读取到显卡上，增加带宽的浪费。而多边形裁剪就是将透明的部分裁掉。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-10-06-15072972637518.jpg" alt="=w300" /></p>

<p>使用cocos2dx打开<code>CC_SPRITE_DEBUG_DRAW</code>,此时你可以看到一个<code>Sprite</code>的三角形不再是两个。而是多个。<br />
但同时，我们也发现他的<code>gl vertcail</code>也变得很大。顶点越多，cpu计算越多。而我们使用了这种多边形裁剪，期初是为了降低GPU的计算和渲染。却带来了另一个问题。</p>

<p>因此又回到那种时间换取空间的问题。可根据具体情况考虑是否使用这种方法。<br />
不过，经过测试这种方法在powervr型号的gpu设备上没有多少成效。</p>

<h3 id="section">其他技巧</h3>

<ol>
  <li>善用dumpCachedTextureInfo，找到那些texture一直未被释放。</li>
  <li>对于只是使用一次的texture，在加载到gpu之后，可以remove内存对他的引用。这不会产生问题。</li>
  <li>善于使用九宫格，降低对同一种资源的频繁加载。</li>
  <li>早期手机部分不支持npot，为了统一资源，都做成了pot的格式，浪费了资源。现在手机大都已经支持npot。所以texturepacker导出可以选择npot，最新的npot的版本已经是anysize了。</li>
  <li>数字字体尽量使用bmffont。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[gamemaker]BounceMover代码阅读]]></title>
    <link href="http://www.newtomato.me/blog/2017/09/03/gamemaker-bouncemoveerdai-ma-yue-du"/>
    <updated>2017-09-03T21:10:41+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/09/03/gamemaker-bouncemoveerdai-ma-yue-du</id>
    <content type="html"><![CDATA[<p>先来看看效果是怎么样的：</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-09-03-aa.gif" alt="aa" /></p>

<p>上代码：<br />
<!--more--><br />
create代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vx = 0;
</span><span class="line">vy = 0;
</span><span class="line">
</span><span class="line">cx = 0;
</span><span class="line">cy = 0;
</span><span class="line">
</span><span class="line">playerAbove = place_meeting(x, y - 1, oPlayer);
</span><span class="line">
</span><span class="line">// Initial fallspeed when player makes contact
</span><span class="line">fallSpd = 8;
</span><span class="line">
</span><span class="line">xscale = 1;
</span><span class="line">yscale = 1;
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>step代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var playerAbovePrev = playerAbove;
</span><span class="line">playerAbove         = place_meeting(x, y - 1, oPlayer);
</span><span class="line">
</span><span class="line">// If it's the first frame of player contact
</span><span class="line">if (playerAbove &amp;&amp; !playerAbovePrev) {
</span><span class="line">    xscale = 1.34;
</span><span class="line">    yscale = 0.67;
</span><span class="line">    
</span><span class="line">    vy = fallSpd;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>step_end代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var vxNew, vyNew;
</span><span class="line">
</span><span class="line">// Handle sub-pixel movement
</span><span class="line">cx += vx;
</span><span class="line">cy += vy;
</span><span class="line">vxNew = round(cx);
</span><span class="line">vyNew = round(cy);
</span><span class="line">cx -= vxNew;
</span><span class="line">cy -= vyNew;
</span><span class="line">
</span><span class="line">repeat (abs(vyNew)) {
</span><span class="line">    if ((y + sign(vyNew) &gt;= ystart) &amp;&amp; (y + sign(vyNew) &lt;= (ystart + abs(vy)))) {
</span><span class="line">        with (oParEntity) {
</span><span class="line">            if (place_meeting(x, y + 1, other.id)) {
</span><span class="line">                if (!PlaceMeetingException(x, y + sign(vyNew), oParSolid, other.id))
</span><span class="line">                    y += sign(vyNew);
</span><span class="line">            }
</span><span class="line">            
</span><span class="line">            if (place_meeting(x, y - 1, other.id))
</span><span class="line">                y += sign(vyNew);
</span><span class="line">            
</span><span class="line">        }
</span><span class="line">        y += sign(vyNew);
</span><span class="line">    }
</span><span class="line">    else {
</span><span class="line">        if (vy &gt;= 0)
</span><span class="line">            vy *= -1;
</span><span class="line">        else
</span><span class="line">            vy *= -0.75;
</span><span class="line">        break;
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">repeat(abs(vxNew)) {
</span><span class="line">    if (!place_meeting(x + sign(vxNew), y, oParSolid)) {
</span><span class="line">        with (oParEntity) {
</span><span class="line">            if (place_meeting(x - sign(vxNew), y, other.id))
</span><span class="line">                x += sign(vxNew);
</span><span class="line">                
</span><span class="line">            if (place_meeting(x + sign(vxNew), y, other.id) &amp;&amp; wallTarget == other.id)
</span><span class="line">                x += sign(vxNew);    
</span><span class="line">            
</span><span class="line">            if (platformTarget != other.id)
</span><span class="line">                continue;
</span><span class="line">                
</span><span class="line">            if (!platformTarget) {
</span><span class="line">                if (place_meeting(x, y + 1, other.id))
</span><span class="line">                    platformTarget = other.id;
</span><span class="line">            }
</span><span class="line">            
</span><span class="line">            if (!place_meeting(x + sign(vxNew), y, oParSolid) &amp;&amp; platformTarget == other.id)
</span><span class="line">                x += sign(vxNew);
</span><span class="line">        }
</span><span class="line">        x += sign(vxNew);
</span><span class="line">    }
</span><span class="line">    else
</span><span class="line">        vx *= -1;
</span><span class="line">}
</span><span class="line">
</span><span class="line">/// Procedural Animation
</span><span class="line">
</span><span class="line">xscale = Approach(xscale, 1, 0.033);
</span><span class="line">yscale = Approach(yscale, 1, 0.033);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个物体就是检查当人物或者<code>oParEntity</code>类型的任何物体，在它上面的时候，就会触发这个上下抖动的效果。<br />
上面最重要的代码在<code>step_end</code>中，由于他可以垂直方向上下抖动（此处忽略水平抖动），也就意味着要修改y值。</p>

<p>修改物体的y，同时也要修改oParEntity类型物体的y值。<br />
此处<code>oParEntity</code>踩到这个物体上，会触发vy变量的变化。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cy+=vy
</span><span class="line">
</span><span class="line">//将cy的近似值给vyNew
</span><span class="line">vyNew = round(cy); 
</span><span class="line">
</span><span class="line">//cy保留一份vy和vyNew之间的差异，用于下一个step事件,保留这个cy的目的是让每一帧变化不同，显得更加自然一些。
</span><span class="line">cy-=vyNew				</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>vyNew</code>就是每个<code>step事件</code>中y要变化的次数。repeat多少次。<br />
如果要偏移的位置在<code>开始ystart</code>和<code>最大偏移（ystart + vy）</code>之间的一个数值。就检查是不是<code>oParEntity</code>是不是只碰到了这个物体，如果是则，跟着<code>vyNew</code>的方向移动1一个像素。如果<code>oParEntity</code>向上移动也碰到了这个物体，则也跟着向上移动。<br />
如果这个物体偏移的位置在偏移范围之外，则让vy开始转变方向。每转一次方向，则缩小可以偏移的距离0.75倍。<br />
这样就达到了这个效果。<br />
而<code>xscale</code>，<code>yscale</code>在step事件中减少或增加0.033，达到缩小放大的目的。<br />
在draw事件中又重新<code>draw_sprite_ext</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">draw_sprite_ext(sprite_index, image_index, x, y, xscale, yscale, 0, c_white, image_alpha);</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[什么才算是好游戏？]]></title>
    <link href="http://www.newtomato.me/blog/2017/09/03/hao-you-xi"/>
    <updated>2017-09-03T16:10:26+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/09/03/hao-you-xi</id>
    <content type="html"><![CDATA[<p>距今为止，我最喜欢玩的游戏，有《Limbo》，《风之旅人》，《the last of us》。也有很多其他优秀的游戏，比如《Fez》，《纪念碑谷》，《kingdom rush》，《血源》，《饥荒》，《肉食男孩》，《terrian》等等。这些确实很优秀，至今都是我推荐给其他人必玩的列表。<br />
但是我脑海中最忘不掉的就是上面那三款。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-09-03-15044260160679.jpg" alt="" /><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-09-03-15044260351285.jpg" alt="" /><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-09-03-15044260553045.jpg" alt="" /></p>

<!--more-->

<h3 id="section">胡思乱想</h3>

<p>操作上，这三款游戏都很简单。Limbo是上下跳跃外加抓取操作解密过关。风之旅人是行走飞行加控制方向。美国末日，是典型的角色扮演游戏，没有复杂的对战，玩家只要会瞄准射击，几个简单的打斗技巧就能过关。</p>

<p>故事叙述上，limbo从头到尾都是迷雾重重。整个游戏氛围也充满了黑暗。故事似乎都说了也似乎什么也没有说。在你心头种下一个疑惑的种子。等在玩家自己去挖掘。你去看一看就知道，大多数人念念不忘的就是游戏隐藏的故事。<br />
风之旅人，故事就明显很多。玩家在第一趟旅途结束就能够知道发生了什么。到最后无限重生之后，玩家则会在同样的故事中体会不一样的感受。所以故事不是他最吸引玩家的因素，而感受才是。这种感受很强烈，体会沙漠上的阳光在玩家身后追赶，体会茫茫沙漠中偶然出现的其他旅人，体会调皮的剪纸人在我们身边小心的靠近。体会在黑暗中出现的机器飞龙在寻找我们。孤独是玩家最大的感受，尤其背景在沙漠中。因此当你看到远处有一个红点在移动的时候，那一刻的心情就像他乡遇故知般的激动。可能人生来就是孤独的。因此对于有一个陪伴有强烈的需求。</p>

<p>美国末日的故事，更像是一部美国电影。完整的三段落结构。角色代入感很强，看得人酣畅淋漓。里面每一个角色都有自己的故事，都很生动饱满。每个人都在乱世中寻找活下去的希望。正义邪恶已经没有边界，为了活下去，许多人做了不得已的事情。人性泯灭，因此当看到joe和艾丽之间存在一份信任，一份依赖，一份为彼此牺牲的感情，谁能不动情？</p>

<h3 id="section-1">浅薄之见</h3>

<p>但是为什么是这三个游戏吸引我呢？<br />
我想了很久，答案是，操作简单，故事性极强，感受强烈。</p>

<p>有些平台跳跃游戏，注重的是玩家的操作，反应速度和智商记忆力等。而这类游戏总打击我的自信心。<br />
limbo不同，他设计的难点的目的是让玩家自己去解谜。飞之旅人同样如此，游戏连引导都没有，所有难点都要考自己解决。这是一种思考解密的过程，是玩家真正和游戏互动的地方。这才是最有意思的！同样出自limbo公司的另一款inside也是我很喜欢的作品，和limbo不相上下，但是之所以选择limbo，可能是先入为主。另外，inside让我深刻的感到了恐惧。尤其是水下遇到水怪姐姐！千万别再深夜玩这这部分。</p>

<p>大部分RPG游戏，高超的技巧，牛逼的装备才是强大的象征。说到底就是数值，在后台存储的数据库中，仅仅就是一串数字。美国末日是RPG的一股清流啊！游戏的目的不是为了让玩家变强，而是让玩家能够在残酷的环境中存活下来。因为你永远不会因为自己多次开枪，技能就熟练了，也不会等级就提升了，更不会有牛逼的装备掉落给你，顶多给你一些弹药。所以你可以潜行，可以采用背后偷袭的方法，只要能够活下来。<br />
这种感受让我觉得自己的渺小和惜命。正如joe说的，我们是靠运气才活下来的。</p>

<p>所以这三个游戏最共同的特点就是通过营造环境和讲故事带给我真实的体验。而且体验做的非常好。<br />
游戏和电影比较起来，我更喜欢游戏的原因是因为我从观众变成了主角。我不是以旁观者的角度来看到这个事情，而是自己参与进来。虽然故事的走向不是我来决定的。但是由于我的参与这个故事才得以推动。</p>

<p>另一个我喜欢的游戏《Fez》,也是很棒的一款游戏，独特的操作和解谜部分都做的很好，可惜就在于他没有剧情，没有故事。我只是惊叹于他独特的视角，但却没有更深层次的感受。</p>

<p>我曾经思考为什么大部分手游，我下载下来，坚持不几天就玩不下去了。什么XX师，天天XX，全民XX，虽然他们制作的也很用心，也帮我消磨了时间。可是却没有任何感受能够留下来。等级，排名，技巧，掉落，抽卡，幸运值等，对我像是一直闹不明白打灯转向，左转右转一样。我随波逐流的也会称赞一下这样的游戏，但大部分是因为深知做这样的游戏非常不易。</p>

<h3 id="section-2">想说的话</h3>

<p>果然玩过才知道什么是适合自己的。什么是自己想要的。所谓故事性或游戏性的争论，我更加偏爱故事性强的游戏。</p>

<p>讲故事是为了让人从他人的经历中感受一些什么，向聆听者表达一些什么。游戏只是想让聆听者更强烈的感受这些故事吧！<br />
并非所有的游戏都是为了讲故事，但是在我心里能够做到这样才是一款非常游戏的游戏吧！<br />
相比于现在的游戏市场，我更期待以后的游戏市场会是什么情况？可能真的是一家公司独大，也可能是细化游戏品类，深耕游戏市场。有许许多多的游戏公司，他们各自有自己的竞争优势。小众游戏有小众的市场，大众有大众的品牌。游戏生态健康一点。让有梦想的人有机会实现自己的梦想，开心快乐的做游戏。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[域名和ip之绑定]]></title>
    <link href="http://www.newtomato.me/blog/2017/09/02/yu-ming-he-ipzhi-bang-ding"/>
    <updated>2017-09-02T18:55:22+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/09/02/yu-ming-he-ipzhi-bang-ding</id>
    <content type="html"><![CDATA[<h3 id="section">原由</h3>

<p>之前帮朋友弄了几个域名和搭建网站，但是最近接连几个朋友遇到域名过期，丢失的情况。<br />
之前为了节省成本用地都是免费域名。<br />
重新注册回来就行。但是总是前后麻烦，也没有很好的和他们解释清楚。弄得自己很疲惫。<br />
域名和ip之间的爱恨情仇不是三言两语就可以解释清楚的。而我自己也不是这方面的专家，只能将自己的理解以通俗的语言说一下。希望能让初次接触互联网的人们有个大概的认识。<br />
<!--more--></p>

<h3 id="section-1">初识</h3>

<p>先分清几个概念，域名注册商和DNS服务商，是可以分开的。<br />
可以在域名注册商那里注册域名，到DNS服务商这里做域名解析的。<br />
当然很多域名注册商也有一条龙服务器，注册域名完了之后，直接帮你做域名解析。但是免费的域名一般都是国外网站，用国外的域名解析有的时候会比较慢。因此可以考虑用国内。比如DNSPod。</p>

<h3 id="section-2">相知</h3>

<p>可是如何让DNSpod知道我们域名在哪里注册的呢？</p>

<p>首先DNSPod有自己的域名解析服务器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">F1G1NS2.DNSPOD.NET
</span><span class="line">F1G1NS1.DNSPOD.NET</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们在域名注册商哪里，先找到域名解析服务(Nameservers)，然后在这里填写上面两个地址。</p>

<p>这样，我们访问一个域名的时候，他找到Nameservers指向的地址，然后就开始让DNSPod来负责解析这个域名。<br />
DNSPod负责将这个域名和ip地址或者另一个域名绑定起来。ip地址就是我们申请空间的时候，空间服务商提供的ip地址。</p>

<p>到此ip地址和我们的域名就绑定起来了。</p>

<p>接下来的事情，就是等待域名生效了。因为修改Nameservers，需要花费10分钟左右的时间才能生效。</p>

<h3 id="section-3">后续</h3>

<p>如果还对网站搭建感兴趣的读者，可以看看我前几篇文章。有静态网站，动态网站的。不同方式任君挑选！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用djnago-blog-zinnia搭建一个博客网站]]></title>
    <link href="http://www.newtomato.me/blog/2017/08/05/djnago-blog-zinnia"/>
    <updated>2017-08-05T18:32:15+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/08/05/djnago-blog-zinnia</id>
    <content type="html"><![CDATA[<p>搭建网站的方法有很多，大致有如下几种方法：</p>

<ol>
  <li>
    <p>在godaddy上申请一个全套的建站服务，从域名到空间，再到网站内容编辑工具。全部都是一步到位。网站的基本要素都是有的。最受大家喜欢的就是<code>WordPress</code>这样的博客网站了。</p>
  </li>
  <li>小白搭建博客必备技能。静态网站搭建。现在比较流行的方法，例如在github上申请一个账户，用github，octpress就可以搭建一个简单的静态网站。虽然是“静态”，但是也可以有很多功能。利用markdown的强大能力，你可以做出漂亮的排版。还可以使用第三方的留言，统计，转发，分享，点赞等功能。我们常常头疼的是怎么找一个合适的插件。有很多插件已经失效。</li>
  <li>最后一种，搭建一个动态网站。简而言之就是，自己申请域名和购买服务器。然后在服务器上架设网站服务，提交和部署代码。将域名和服务器绑定起来，这套流程说是简单，但是一般都是有一定计算机网络知识的同学才能熟练操作的技能。</li>
</ol>

<p>这三种方法都可以将我们网站开放到互联网。没有哪一种是好的，只有适合你的才是好的。我个人常用的是第二种，简单快捷，而且效率高。<br />
但是今天我要要说的是第三种方式。按照我的步骤，你很快就能搭建一个可以访问的网站。</p>

<!--more-->

<h2 id="section">申请域名</h2>

<p>付费域名申请网站<code>godaddy.com</code>。同时他还提供域名隐私服务。不过需要付费。当然也可以申请免费域名。<br />
国内到<code>万网域名申请</code>，需要备案。<br />
我使用的是<a href="http://www.freenom.com/zh/freeandpaiddomains.html">Freenom</a>，免费域名提供商。<br />
只需要注册个账户，然后就可以领走你想要的域名。</p>

<h2 id="section-1">申请空间</h2>

<p>到<a href="https://www.pythonanywhere.com/">pythonanywhere</a>,注册账号。就有免费的空间供你使用。同时他已经实现安装了一套python的库，这对于我们后面搭建博客系统方便了需要。<br />
注册完账户，进入首页,选择web选项卡<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-1501923895242.jpg" alt="=w300" /></p>

<p>此时可以<strong>Add a new web app</strong>.<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-15019239387431.jpg" alt="=w300" /><br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-15019240064418.jpg" alt="=w300" /></p>

<p>最终你会看到如下的界面。这个<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-15019242449324.jpg" alt="" /></p>

<p>点击<code>xxx.pythonanywhere.com</code>链接,打开的就是你的网站<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-15019243247447.jpg" alt="=w300" /></p>

<p>但是是不是少点什么？<br />
是的，那就是这个域名不是你想要的，你的个性化域名还没有和网站有什么关系啊！<br />
接下来就要发生点关系了。</p>

<h2 id="section-2">绑定域名和空间</h2>

<p>我们刚刚申请的域名，需要绑定到空间映射的一个地址。所以我们要得到这个地址。<br />
还得找一个来解析域名和地址对应关系的中间服务。（假设我们现在已经有了这个空间的地址）<br />
<code>DNSPod</code>刚好为我们做了这些。当然我们在申请域名服务的地方,就是上面提到的freenom也可以做这件事。<br />
freenom是个国外的网站，解析起来没有国内的快。所以我选择了DNSPod。<br />
注册DNSPod之后，<strong>添加域名</strong>，在域名解析里面添加记录<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-15019251536702.jpg" alt="=w400" /><br />
其中的记录值需要改成你的空间地址。</p>

<p>获取空间地址的方法:</p>

<p>打开你的终端，然后输入</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ping xxx.pythonanywhere.com</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-15019252613848.jpg" alt="=w400" /></p>

<p>然后等下，访问你的域名试试。是不是打开了<code>It's work</code>的网页！</p>

<h2 id="section-3">在服务器上部署一套博客系统</h2>

<p>此时到这里，就差网站搭建了。我选择<code>djnago-blog-zinnia</code>框架。<br />
最后的效果如下：<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-15019256268930.jpg" alt="=w300" /></p>

<ol>
  <li>进入我们的空间后台<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-1501925720319.jpg" alt="=w300" /></li>
  <li>在终端输入，安装我们需要的模块：
    <ol>
      <li><code>virtualenv --python=python2.7 myvenv</code></li>
      <li><code>source myvenv/bin/activate</code></li>
      <li><code>pip install django whitenoise</code></li>
      <li><code>pip install django-blog-zinnia</code></li>
      <li><code>django-admin startproject mysite .</code></li>
      <li><code>python manage.py migrate</code></li>
      <li><code>python manage.py collectstatic</code></li>
    </ol>
  </li>
  <li>进入mysite文件夹，<code>cd mysite</code>，修改setting.py</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">		INSTALLED_APPS = (
</span><span class="line">		  ...
</span><span class="line">		  'django_comments',
</span><span class="line">		  'mptt',
</span><span class="line">		  'tagging',
</span><span class="line">		  'zinnia',
</span><span class="line">		)	
</span><span class="line">		
</span><span class="line">		TEMPLATES = [
</span><span class="line">		 {
</span><span class="line">		    'BACKEND': 'django.template.backends.django.DjangoTemplates',
</span><span class="line">		    'APP_DIRS': True,
</span><span class="line">		    'OPTIONS': {
</span><span class="line">		      'context_processors': [
</span><span class="line">		       ...
</span><span class="line">		        'zinnia.context_processors.version',  # Optional
</span><span class="line">		      ]
</span><span class="line">		    }
</span><span class="line">		  }
</span><span class="line">		]
</span><span class="line">		</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后修改<code>urls.py</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">	url(r'', include('zinnia.urls')),
</span><span class="line">	url(r'^comments/', include('django_comments.urls'))	</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后配置一个WGSI文件，点击 “WSGI configuration file” 链接。将下面的代码替换进去。</p>

<pre><code>```
import os
import sys

path = 'mysite所在的父文件夹'  # use your own username here
if path not in sys.path:
    sys.path.append(path)

os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

from django.core.wsgi import get_wsgi_application
from whitenoise.django import DjangoWhiteNoise
application = DjangoWhiteNoise(get_wsgi_application())

``` 另外，设置virtualenv，我们在上面已经选择了python2.7，这里配置一下，以后进入后台中断，生效的就是这个python，而不是系统给的python。
</code></pre>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-08-05-15019275863573.jpg" alt="=w300" /><br />
将你的myvenv的目录写在此处。<code>/home/yourname/myvenv</code></p>

<p>所有的步骤基本完成。运行试试看。<code>python manager.py runserver</code></p>

<p>此时的博客看起来，不是很美观，因此我们还需要给他提供一个主题。</p>

<h2 id="section-4">主题安装</h2>

<p>进入虚拟环境终端。输入</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pip install django-app-namespace-template-loader
</span><span class="line">pip install zinnia-theme-bootstrap
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>打开<code>settings.py</code>修改</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">INSTALLED_APPS = [
</span><span class="line">    ...
</span><span class="line">    'zinnia_bootstrap',
</span><span class="line">    'zinnia',
</span><span class="line">]
</span><span class="line">
</span><span class="line">TEMPLATES = [
</span><span class="line">    {
</span><span class="line">        'BACKEND': 'django.template.backends.django.DjangoTemplates',
</span><span class="line">        'DIRS': [],        
</span><span class="line">        'APP_DIRS': False,
</span><span class="line">        'OPTIONS': {
</span><span class="line">            'context_processors': [
</span><span class="line">                ...
</span><span class="line">                'zinnia.context_processors.version',  # Optional
</span><span class="line">            ],
</span><span class="line">
</span><span class="line">            'loaders': [
</span><span class="line">               'app_namespace.Loader',
</span><span class="line">               'django.template.loaders.filesystem.Loader',
</span><span class="line">               'django.template.loaders.app_directories.Loader',
</span><span class="line">            ],
</span><span class="line">
</span><span class="line">        },
</span><span class="line">    },
</span><span class="line">]
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>OK,主题安装成功。这次在重新运行看看吧！</p>

<h2 id="section-5">参考文章</h2>
<ol>
  <li><a href="http://blog.csdn.net/fujianfafu/article/details/58239434">zinnia-theme-bootstrap 使用过程中的问题</a></li>
  <li><a href="http://blog.csdn.net/u014792107/article/details/52458333?locationNum=9"> 使用 django-blog-zinnia 搭建个人博客</a></li>
  <li><a href="http://docs.django-blog-zinnia.com/en/develop/getting-started/install.html">django blog zinnia</a></li>
  <li><a href="https://tutorial.djangogirls.org/zh/deploy/">djangogirls</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为Atom,Sublime增加linter-luacheck插件]]></title>
    <link href="http://www.newtomato.me/blog/2017/07/17/install-luacheck"/>
    <updated>2017-07-17T13:21:18+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/07/17/install-luacheck</id>
    <content type="html"><![CDATA[<p><code>linter-luacheck</code>是一款很酷的插件，它能够检查lua的语法以及对lua未使用过的变量进行提示。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-17-15002679036933.jpg" alt="=" /></p>

<p>还有这样:<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-17-15002679458003.jpg" alt="=" /><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-17-15002679724165.jpg" alt="=" /></p>

<p>因此这款能够实时提醒我们帮助我们的插件，你心动了么？<br />
<!--more--><br />
## 如何安装</p>

<h3 id="lua">安装lua</h3>

<p>atom上找到这款插件。然后安装。如果电脑上没有安装lua命令，那么<code>linter-luacheck</code>不会正常工作。</p>

<p>因此我们需要先安装好lua。</p>

<p>官方网站提供了源码和binary包下载安装。不过我更推荐使用brew安装，方便快捷。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">brew search lua
</span><span class="line">brew install lua51</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重新启动Atom（Sublime）试试。</p>

<p>写个简单的lua，试试是否生效？</p>

<p>好像还没有！怎么回事？</p>

<p>看<code>linter-luacheck</code>的Setting页面上，有一个配置luacheck执行命令的地方。也就是说<code>linter-luacheck</code>，底层调用的是<code>luacheck</code>的命令。</p>

<p>而我们是否安装了这个命令？</p>

<p>在终端上敲入luacheck，检查看看。如果同时没有这个命令，那就是问题的症结所在了。</p>

<h3 id="luacheck">安装luacheck</h3>

<p>我这里使用的是luarocks的安装包管理命令。</p>

<p>MAC上</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">luarocks install luacheck</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Windows：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd luarocks/bin
</span><span class="line">
</span><span class="line">luarocks.bat install luacheck</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>怎么安装luarocks呢？只要打开他的官方网站，下载安装包即可。</p>

<h3 id="section">现在好了么？</h3>

<p>没错，有了luacheck之后，linter-luacheck就可以正常工作了。<br />
现在试试吧？<br />
lua用久了，绝对离不开这样的神兵利器。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用jekins打造一个自动化编译流程]]></title>
    <link href="http://www.newtomato.me/blog/2017/07/15/jekins"/>
    <updated>2017-07-15T20:34:07+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/07/15/jekins</id>
    <content type="html"><![CDATA[<h2 id="jekins">为什么要使用jekins？</h2>

<p>我们假设有这样一种情况，项目有个打包的工作或者导出策划给的配置文件。<br />
这项任务，交给了A同学，A把写了脚本，进行了测试，把里面的坑都填好了。但是每次做这个事情，都需要占用A的时间。<br />
有一天A请假不在，交给B做，B电脑上没有A那样的工作环境，虽然有脚本工具，但是怎么也执行不起来。<br />
这下怎么办好？</p>

<p>解决这个痛点，就是使用jekins。在他这里稍作配置，就可以将A从繁琐重复的劳作中解脱出来。也能让其他人无缝切换的使用它。</p>

<p>这就是jekins的好处。</p>

<p>甚至我们可以通过设置jekins定时开启某个服务。比如我经常使用的使用tomcat启动。<br />
<!--more--></p>

<h2 id="section">欲善其事 必先利其器</h2>

<p>首先让我们先搭建好jekins。到<a href="https://jenkins.io/download/">jekins的官方网站</a>上下载平台对应的版本。<br />
但是我这里推荐使用Generic Java package版本，因为他相当的简单易用。一句命令就可以搞定。<br />
<strong>java版本要求是java7以上。</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java -jar jekins.war </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行此命令之后，在浏览器中执行<code>http://localhost:8080</code>，看看效果吧。<br />
如果8080端口被别的程序占用了。可以改变端口号来启动jekins。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">java -jar jekins.war --httpPort=1000</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>启动后，命令上显示一行明显的<code>secret</code>，用于我们刚才的页面上填写。<br />
然后就开始安装各种插件了。</p>

<h2 id="jekins-1">让我们从一个简单的事情来熟悉jekins</h2>

<p>正如我们经常要做的打包流程。尤其是android打包。涉及到不同平台，不同渠道，有各种配置。<br />
此处我们用gradle命令来做这件事。因此前面要把grdle插件安装上。</p>

<p>因此我们新建一个jekins自由风格的工程。</p>

<p>有两种方式构建我们的应用。一种是有仓库管理，另一种是没有仓库管理。<br />
仓库管理，是需要提供svn地址（Git地址），以及对用的用户名和密码。点击”Credentials”右边的”Add”，输入仓库对用的用户名密码即可。<br />
没有仓库管理，则需要提供一个工作目录。</p>

<p>默认情况，jekins会将自己安装在<code>~/.jekins</code>下面。我们生成的工程也会<code>~/.jekins/workspace/</code>找得到。</p>

<p>构建触发器，可以保持默认即可。在这里我们可以定制自己的服务，比如定时构建项目。</p>

<p>在构建步骤这里，我们可以按照自己的需求，增加多个构建步骤。<br />
像这样：</p>

<ol>
  <li>准备资源。</li>
  <li>开始打包apk</li>
  <li>检查上一步的结果，如果成功，则发邮件通知对应的人，并将最新的地址生成出来。</li>
</ol>

<p>第一步我们可以通过脚本完成。windows上我们使用bat，unix，mac上使用bash脚本。甚至我们可以调用python脚本。只要将python放到对用的目录中即可。</p>

<p>如果是仓库管理，脚本的位置就是刚才提到的~/.jekins/workspace/%{yourProject},这个目录在初始化的时候，会被remove all，所以脚本是需要放在仓库里面的。<br />
如果不是仓库管理方式，那脚本的位置就放在我们提供的工作目录中。</p>

<p>第二步，打包apk，可以使用jekins自己的gradle插件。非常方便。但是gradle需要先指定版本。因此到<code>Manage Jenkins &gt; Configuration Options</code>这里，增加自己要的gradle版本。勾选自动set up选项。然后在构建的时候，指定版本。这样我们在执行到这一步的时候，jenkins会自定下载这个版本。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-15-15001211854325.jpg" alt="" /><br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-15-15001212202303.jpg" alt="" /></p>

<p>剩下的第三步，将apk生成一个新的url地址，这样大家可以在这个地址下载。我使用了一个web服务，apk上传到这里，这样大家都可以在这里下载。启动web服务，很简单。你可以下载tomcat或者使用python的flask。</p>

<p>也有第三方公司提供这样的功能，例如蒲公英，同时他们会自动生成一个二维码，对于测试同学方便很多。</p>

<h2 id="section-1">构建的时候怎么已使用参数？</h2>

<p>在创建项目的时候，下面有一个参数化构建过程。<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-15-15001216832377.jpg" alt="" /></p>

<p>在这里增加几个参数，就行。使用他也是很方便。<br />
比如上面的参数是name，那在脚本中直接把他当做变量使用就行。<code>$name</code></p>

<h2 id="section-2">接下来呢？</h2>

<p>如果你看到这里，基本上可以搭建一个可以使用的jekins了。但是Jenkins还有很多有意思的东西可以整合进来，比如上面提到的邮件。比如如何把参数，传递给gradle配置。<br />
这些都是需要我们在实践中慢慢理解了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何为第三方c++库导出luabinding (Part One)]]></title>
    <link href="http://www.newtomato.me/blog/2017/07/02/ru-he-wei-di-san-fang-c-plus-plus-ku-dao-chu-luabinding"/>
    <updated>2017-07-02T20:26:16+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/07/02/ru-he-wei-di-san-fang-c-plus-plus-ku-dao-chu-luabinding</id>
    <content type="html"><![CDATA[<p>上一篇文章讲到怎么使用<code>liquidfunc</code>,本章节讲述怎么将liquidfun通过luabinding的方式导出给lua使用。</p>

<p>cocos2dx在早期2.x时代，是通过tolua++和pkg的方式，导出成luabinding。现在已经是 3.x版本了，cocos2dx改进了这种导出方式，我们只需要增加一个.ini的配置文件就可以了。</p>

<p>两种方式各有优劣。第一种方式最大的弊病就是花费很多时间在重复做一些事情，麻烦。<br />
第二种方法，看似节省了我们不少时间，但是如果对<code>genbindings.py</code>的原理不熟悉，会让我们对出的错误一头雾水。</p>

<!--more-->
<p>第一种方法按照如下原则，将头文件转为pkg文件即可。</p>

<pre><code>1.    enum keeps the same
2.    remove CC_DLL for the class defines, pay attention to multi inherites
3.    remove inline keyword for declaration and implementation
4.    remove public protect and private
5.    remove the decalration of class member variable
6.    keep static keyword
7.    remove memeber functions that declared as private or protected
</code></pre>

<p>在导出liquidfun的过程中，我采用了第二种方法。在此记录一下过程和遇到的问题。</p>

<h2 id="genbindingspy">使用<code>genbindings.py</code>的方式导出。</h2>

<p>在<code>cocos2d-x/tools/tolua</code>文件夹下面有genbindings.py文件。如果没有，有可能你用的cocos2dx的版本不在3.x以内。</p>

<p>执行py之前，请阅读此处文档，安装相关的工具。<a href="https://github.com/cocos2d/bindings-generator">Requirements</a></p>

<ul>
  <li>先将liquidfun仓库提供的Box2D覆盖cocos2dx原先的Box2D，有一些文件有变化。</li>
  <li>在<code>cocos2d-x/tools/tolua</code>里增加一个<code>cocos2dx_box2d.ini</code>的文件。（因为liquidfun依赖于box2D，因此我们需要先导出box2D）这里提供box2d.ini文件。<a href="media/14989759807211/cocos2dx_box2d.ini">cocos2dx_box2d.ini</a></li>
  <li>修改genbindings.py文件如下：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cmd_args = {'cocos2dx_box2d.ini':('cocos2dx_box2d','lua_cocos2dx_box2d_auto')}</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
  <li>运行如下命令：</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd cocos2d-x/tools/tolua
</span><span class="line">./genbindings.py</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后看到生成了如下文件</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cocos/scripting/lua-bindings/auto/lua_cocos2dx_box2d_auto.cpp
</span><span class="line">cocos/scripting/lua-bindings/auto/lua_cocos2dx_box2d_auto.hpp</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="cpp">使用生成的cpp文件</h2>

<p>将他们添加到工程中，<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-02-14989852241192.jpg" alt="=w250" /><br />
同时在cocos2d_lua_binding工程中<code>building setting-&gt;search paths</code>添加一条搜索路径。<code>$(SRCROOT)/../../../../external/Box2D</code></p>

<p>编译运行一下。</p>

<p>遇到的问题：</p>

<pre><code>1. `luaval_to_object`导出了5个参数，导致不兼容。
2.  enmu没有导出
3.  编译成功，链接失败。
</code></pre>

<p>第一个问题可以通过手动删除第五个参数解决。<br />
第二个问题，可以通过修改lua代码解决。<br />
第三个问题暂时没有找到原因。不知道哪里丢失了路径，导致link总是失败。此处留个坑，待下回处理。</p>

<h2 id="section">参考链接</h2>

<p>1.<a href="https://segmentfault.com/a/1190000000631630">Cocos2d-x下Lua调用自定义C++类和函数的最佳实践</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识liquidFun（流体物理引擎）]]></title>
    <link href="http://www.newtomato.me/blog/2017/06/25/ren-shi-liquidfun"/>
    <updated>2017-06-25T23:24:41+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/06/25/ren-shi-liquidfun</id>
    <content type="html"><![CDATA[<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-06-25-14984044203691.png" alt="" /></p>

<h2 id="section">初识</h2>

<p>在一款名为<a href="http://fingerlab.net/portfolio/yuri">《yuri》</a>的游戏中，发现了点有意思的东西，于是乎各种搜索，终于找到了相关的技术，那就是由google开源的物理引擎<a href="http://google.github.io/liquidfun/">liquidFun</a>。</p>

<p><code>liquidFunc</code>的demo地址<a href="http://google.github.io/liquidfun/testbed/index.html">在此</a>。相信我你看到这个demo之后，绝对会对<code>liquidFun</code>这个引擎产生无比的喜欢。（这里不需要翻墙，只要能打的开github，就能够看得到这个演示。）</p>

<p>先来一睹为快！<br />
<img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-07-02-Untitled.gif" alt="" /></p>

<!--more-->

<p><strong>他</strong>继承自<strong>Box2D</strong>，是Box2D的扩展版本，但增加了粒子的流体和柔软性效果。<br />
<a href="http://google.github.io/liquidfun/API-Ref.html">相关的API文档</a><br />
<a href="http://docs.google.com/presentation/d/1fEAb4-lSyqxlVGNPog3G1LZ7UgtvxfRAwR0dwd19G4g/edit?usp=sharing">具体的实现细节在这里</a></p>

<p>因为支持C++, Java, or JavaScript，因此可以整合到cocos2dx引擎中。方便我们使用。当我想到这里的时候，立马去github上搜索了一下。果然触控已经开始考虑到这点了。</p>

<h2 id="section-1">了解</h2>

<p>于是在github触控这里，找到了一份<a href="https://github.com/cocos2d/cocos2d-x-samples">cocos2dx整合liquidFunc的实例工程。</a></p>

<p>安装方法如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone https://github.com/cocos2d/cocos2d-x-samples
</span><span class="line">cd cocos2d-x-samples
</span><span class="line">python download-engine.py
</span><span class="line">git submodule init
</span><span class="line">git submodule update</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行完上述步骤，就可以在sample中打开<code>LiquidFun - EyeCandy</code>工程了。效果也是震撼。<br />
完全足够我们的使用了。</p>

<p>这个工程的作者<a href="https://github.com/ricardoquesada">Ricardo Quesada</a>在他的的博客中有两篇文章，讲解了整合cocos2dx和liquidFun的细节。</p>

<ul>
  <li>
    <p><a href="https://retro.moe/2014/04/23/integrating-liquidfun-with-cocos2d-x-part-i/">Integrating LiquidFun with Cocos2d-x: Part I</a></p>
  </li>
  <li>
    <p><a href="https://retro.moe/2014/07/30/integrating-liquidfun-with-cocos2d-x-part-ii/">Integrating LiquidFun with Cocos2d-x: Part II</a></p>
  </li>
</ul>

<p>感兴趣的各位同学不妨移步去看看，加深对liquidFunc的理解。</p>

<h2 id="section-2">下一步</h2>

<p>由于我们的项目使用的cocos2dx + lua，因此下一步要考虑的就是通过luabing将<strong>Box2D</strong>和<strong>liquidFunc</strong>的代码注册到lua虚拟机中使用。这部分我将在下一篇文章中讲解。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MAC上安装git-svn未生效的办法]]></title>
    <link href="http://www.newtomato.me/blog/2017/06/11/macshang-an-zhuang-git-svnwei-sheng-xiao-de-ban-fa"/>
    <updated>2017-06-11T20:47:57+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/06/11/macshang-an-zhuang-git-svnwei-sheng-xiao-de-ban-fa</id>
    <content type="html"><![CDATA[<h2 id="git-svn-">git svn 介绍</h2>

<p>git svn的原理就是服务器端还是svn服务器，但是本地使用git，这样可以本地保留git所有的功能，但是代码提交是需要提交给svn服务器的。<br />
git svn的命令可以认为和git是一样的。部分命令有些不同。</p>

<p><img src="https://git-scm.com/images/logo@2x.png" alt="" /> + <img src="https://tortoisesvn.net/assets/img/tortoisesvn_logo_hor468x64.5e0587de.svg" alt="svn" /></p>

<!--more-->
<p>例如克隆代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git svn clone xxxx.git</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>初始化仓库：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git svn init</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>提交代码到服务器：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git svn dcommit</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>平时开发需要用到的命令，创建分支，本地提交，切换分支，合并分支都和git的命令相同。</p>

<h2 id="git-svn">安装git svn</h2>
<p>MAC上默认安装的git，理论上应该自带git svn的功能。但是这只是理论上，验证是否支持svn，只要在terminal测试下。<br />
输入<code>git svn --help</code>没有报错。那恭喜你了，不需要经历我这一番折腾了。</p>

<p>如果不是，请继续往下看。</p>

<p>先说一下我的工作环境，我的操作系统是<code>MAC OS Sierra</code>。Git的版本是通过<code>homebrew</code>安装的，安装版本是<code>2.11.1</code>。<br />
这个版本的git，竟然不支持git svn的命令的。于是到Git的<a href="https://git-scm.com/docs/git-svn/1.8.5">官方网站</a>，搜索了一下，他们从1.8.5版本之后就开始支持这个命令了。<br />
所以我分析有可能brew安装的git只是一个不完整版本。于是我在官方网站重新下载了Git。开始安装。</p>

<p>安装完成之后，通过命令行检查版本，还是老版本。没有变化。于是通过<code>which git</code>发现使用的位置是<code>/usr/local/bin/git</code>，于是将我安装的git做了一个软连接覆盖了这里的git。我安装之后的位置在<code>/usr/local/git</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ln -s /usr/local/git /usr/local/bin/git
</span><span class="line">git --version</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出就是最新的安装版本了。<code>git version 2.13.0</code>。</p>

<h2 id="section">安装完成却遇到了另一个问题</h2>

<p><code>git svn --help</code>之后没有出现我预期的输出，反而报错了。</p>

<p>错误如下：</p>

<pre><code>Can't locate SVN/Core.pm in @INC (you may need to install the SVN::Core module) (@INC contains: /usr/local/git/lib/perl5/site_perl/5.18.2/darwin-thread-multi-2level /usr/local/git/lib/perl5/site_perl/5.18.2 /usr/local/git/lib/perl5/site_perl /Library/Perl/5.18/darwin-thread-multi-2level /Library/Perl/5.18 /Network/Library/Perl/5.18/darwin-thread-multi-2level /Network/Library/Perl/5.18 /Library/Perl/Updates/5.18.2 /System/Library/Perl/5.18/darwin-thread-multi-2level /System/Library/Perl/5.18 /System/Library/Perl/Extras/5.18/darwin-thread-multi-2level /System/Library/Perl/Extras/5.18 .) at /usr/local/git/lib/perl5/site_perl/Git/SVN/Utils.pm line 6.
BEGIN failed--compilation aborted at /usr/local/git/lib/perl5/site_perl/Git/SVN/Utils.pm line 6.
Compilation failed in require at /usr/local/git/lib/perl5/site_perl/Git/SVN.pm line 25.
BEGIN failed--compilation aborted at /usr/local/git/lib/perl5/site_perl/Git/SVN.pm line 32.
Compilation failed in require at /usr/local/git/libexec/git-core/git-svn line 21.
BEGIN failed--compilation aborted at /usr/local/git/libexec/git-core/git-svn line 21.
</code></pre>

<p>这一坨报错消息让人摸不着头脑，于是Google一下，果然有人和我报一样的错误。</p>

<p>解决方案<a href="https://stackoverflow.com/questions/16578465/on-osx-using-sourcetree-git-svn-getting-cant-locate-svn-core-pm-in-inc">在此</a>,如果你打不开，那就按照我下面的命令设置一下。看看效果吧！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo mkdir /Library/Perl/5.18/auto
</span><span class="line">sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi‌-2level/SVN /Library/Perl/5.18/darwin-thread-multi-2level
</span><span class="line">sudo ln -s /Applications/Xcode.app/Contents/Developer/Library/Perl/5.18/darwin-thread-multi‌-2level/auto/SVN /Library/Perl/5.18/auto/</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">结语</h2>

<p>幸运的话，<code>git svn --help</code>就会正确工作了。好了开始享受用Git方式管理svn仓库吧！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unity制作platform游戏]]></title>
    <link href="http://www.newtomato.me/blog/2017/05/24/unityzhi-zuo-platformyou-xi"/>
    <updated>2017-05-24T21:41:16+08:00</updated>
    <id>http://www.newtomato.me/blog/2017/05/24/unityzhi-zuo-platformyou-xi</id>
    <content type="html"><![CDATA[<p>最近抽时间做了一个简单的Platform游戏，待以后有空可将这个demo扩展一下。</p>

<p><img src="http://7xuepc.com1.z0.glb.clouddn.com/2017-05-24-Untitled.gif" alt="" /></p>

<p>这里面涉及到以下的问题：<br />
<!--more--><br />
1. 控制英雄移动。<br />
2. 平台移动。<br />
3. 碰撞检测。<br />
4. 英雄播放特殊动画。<br />
5. 动画中使用了onewaycollision的方式，让能够让平台上面有碰撞体，而下面碰撞不生效。英雄可以直接从下面穿过。采用Unity最新的Platform Effect 2D<br />
6. 场景加载。<br />
7. 实例化面板。<br />
8. 事件通知。</p>

]]></content>
  </entry>
  
</feed>
