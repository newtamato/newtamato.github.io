<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[番茄手册]]></title>
  <link href="http://www.newtomato.me/atom.xml" rel="self"/>
  <link href="http://www.newtomato.me/"/>
  <updated>2015-11-18T00:41:26+08:00</updated>
  <id>http://www.newtomato.me/</id>
  <author>
    <name><![CDATA[newtomato]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[setfenv有何用？]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/18/lua-setfenv"/>
    <updated>2015-11-18T00:39:31+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/18/lua-setfenv</id>
    <content type="html"><![CDATA[<p>上一章，我们提到了模块里面的函数，使用点语法的方式定义函数和变量。点之前的名字类似一个命名空间。比如<code>function A.function() end</code>,此处A就相当于一个命名空间，那么我们能不能有更好地方法不用写这个命名空间呢？当然是可以的。lua提供这样的方式。</p>

<!--more-->

<p>这个方法涉及到一个核心函数<code>setfenv()</code>, 我们看一下这个函数的API：<br />
setfenv(f, table)：设置一个函数的环境<br />
1. 当第一个参数为一个函数时，表示设置该函数的环境<br />
2. 当第一个参数为一个数字时，为1代表当前函数，2代表调用自己的函数，3代表调用自己的函数的函数，以此类推</p>

<p>看第一条，他说到可以设置函数的环境。如果我们不调用setfenv，那么函数的环境是什么呢？其实就是默认的_G.所有已经加载了函数变量模块都会被注册到_G中，因此我们可以在B.lua文件中直接调用A.lua中定义的USER_NAME就不会报错。</p>

<p>但是如果我们调用了setfenv()，会发生什么事情？我们来试试。<br />
A.lua</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">USER_NAME = "jolie"
</span><span class="line">ITEM_NAME = "abc"
</span><span class="line">ITEM_COUNT = 123</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>调用函数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require("A")
</span><span class="line">setfenv(1,{})
</span><span class="line">tostring(USER_NAME)
</span><span class="line">print("i want to print user name")</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果会是什么样子的呢？<br />
结果就是tostring，print无法被调用，咦？这是怎么回事呢？其实很简单，原来tostring和print很早就被注册到了_G中，我们把函数环境设成了空表，于是再也找不到了tostring和print了。这就报错了！</p>

<p>因此既然我们用得到print和tostring，我们就把这两个函数保存起来，传递给我们当前的函数环境。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">setfenv(1,{print = _G["print"],tostring = _G["tostring"]})</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再次运行，发现了没有，没有报错。正确打印了。<br />
但是这样会不会因此影响到其他的模块呢？比如有一个B.lua，他是否能够正确执行？</p>

<p>A.lua</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local A = {print = _G["print"],tostring = _G["tostring"]}
</span><span class="line">setfenv(1,A)
</span><span class="line">-- setfenv(1,{})
</span><span class="line">name = "hello,A"
</span><span class="line">function doA( ... )
</span><span class="line">	print("i am A, i call doA function")
</span><span class="line">end
</span><span class="line">
</span><span class="line">function doA2( ... )
</span><span class="line">	print("i am doA2, i call doA2 function")
</span><span class="line">end
</span><span class="line">
</span><span class="line">return A</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>B.lua</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local B = {}
</span><span class="line">function B.doAction()
</span><span class="line">	local a = {}
</span><span class="line">	table.insert(a,1)
</span><span class="line">	table.insert(a,2)
</span><span class="line">	table.insert(a,3)
</span><span class="line">	for k,v in pairs(a) do
</span><span class="line">		print(k,v)
</span><span class="line">	end
</span><span class="line">end
</span><span class="line">return B</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>调用代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">a = require("A")
</span><span class="line">a.doA()
</span><span class="line">a.doA2()
</span><span class="line">print("i want to print user name , "..a.name)
</span><span class="line">b = require("B")
</span><span class="line">b.doAction()</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看见打印了么？没错！我们设置了A的函数环境，但是并没有因此而影响到B和调用的地方。这说明setfenv只是对当前的模块函数环境进行了设置，而并没有影响到其他。这就是setfenv第一个参数的作用，它指定了当前函数，而不是全局函数，因此只对A这个当前的函数模块进行了设置。</p>

<p>setfenv()还有什么特别的用处？敬请等待下回分析！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serpent：lua序列化和pretty的输出]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/15/serpent-for-lua"/>
    <updated>2015-11-15T21:32:34+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/15/serpent-for-lua</id>
    <content type="html"><![CDATA[<p><img src="http://www.newtomato.me/images/1447594435836.png" alt="Alt text" /></p>

<p>翻译自http://notebook.kulchenko.com/programming/serpent-lua-serializer-pretty-printer<br />
本人翻译能力有限，如有不妥之处还望指正。</p>

<p>为ZeroBrane Studio我一直开发Lua debugger。我意识到我需要一个table的序列化打印浮躁的结构，例如堆栈和一些在调试器组件使用的表数据。Serpent就是我开发出来的用于lua序列化和pretty的输出。<br />
<!--more--></p>

<p>因为动态变量的要求lua本身几乎不提供内置的方法去序列化table。那样需要被一个函数去处理（我们在this thread讨论过）。我第一步停在了TableSerializaiton 页面上，在处理table序列化方面它提供了几个不错的信息并且带有不少的例子。</p>

<p>看了已有的模块，我发现没有个哪一个满足我的需求<br />
1. 需要是单纯的lua（这条需求排除了类似PlutoLibrary的库）<br />
2. 需要既能够漂亮的输出，又能够强大的序列化。（这条排除了serialize.lua）<br />
3. 需要能够打印共享的handler和自我引用（这条排除了许多的实现）<br />
4. 序列化不同类型的key，包括以table做key（这条排除了pretty.lua）<br />
5. 需要剪短并且不需要太多的依赖。（这条排除了 tserialise/tpretty from lua-nucleo）</p>

<p>metalua的serialize.lua很接近我的需要，但是他不能够处理全局的函数或者math.huge数。而且也不能够漂亮的输出（这个也要求很多不同的方法）；table.tostring和serialize结合起来几乎是我想要的一大半代码了。</p>

<p>Penlight的pretty.lua 能够做到很漂亮的输出，但是依赖两个其他的模块，并且不能够处理boolean值和将table作为key的数据，共享表格以及自身引用。</p>

<p>lua-nucleo的tserialize.lua在序列化不同类型方面做的很出色（能够很好的打印math.huge数字，而另外两个模块就不支持），但是不能够处理作为key或者value的函数。</p>

<p>我更希望结果是可读性很好的，而且我能够使用loadstring得到的依然是一个有效的片段。例如，我想keys能够以数字的方式被列出，比如<code>{'a','b'}</code> 打印之后就是<code>{[1] = 'a', [2] = 'b'}</code>,<code>{1, nil, 3}</code>打印之后就是 <code>{1, [3]=3}</code>,<code>{foo = 'foo'}</code>打印之后就是<code>{['foo'] = 'foo'}.</code></p>

<p>Serpent并不处理upvalues和元表;对于弱引用或者transient 对象（io.stdin和其他userdata的对象是能够通过名字序列化的），函数尽可能序列化，全队函数被他们的名字替代。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local b = {text="ha'ns", ['co\nl or']='bl"ue', str="\"\n'\\\000"}
</span><span class="line">local c = function() return 1 end
</span><span class="line">local a = {
</span><span class="line">  x=1, [true] = {b}, [not true]=2, -- boolean as key
</span><span class="line">  ['true'] = 'some value', -- keyword as a key
</span><span class="line">  z = c, -- function as value
</span><span class="line">  list={'a',nil,nil, -- embedded nils
</span><span class="line">        [9]='i','f',[5]='g',[7]={}, ['3'] = 33}, -- empty table
</span><span class="line">  [c] = print, -- function as key, global as value
</span><span class="line">  [io.stdin] = 3, -- global userdata as key
</span><span class="line">  ['label 2'] = b, -- shared reference
</span><span class="line">  [b] = 0/0, -- table as key, undefined value as value
</span><span class="line">  [math.huge] = -math.huge, -- huge as number value
</span><span class="line">}
</span><span class="line">a.c = a -- self-reference
</span><span class="line">a[a] = a -- self-reference with table as key</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The library provides three functions – dump, line, and block – with the last two being shortcuts for the main dump function.</p>

<p>这个库提供三个函数，dump,line和block，后面两个是dump函数的简易版本。</p>

<p>####漂亮的多行打印</p>

<hr />

<p>调试的时候如果你像看到一个表套表，这个就非常有用了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local serpent = require("serpent")
</span><span class="line">print(serpent.block(a))</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>输出结构：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">  [1/0 --[[math.huge]]] = -1/0 --[[-math.huge]],
</span><span class="line">  c = nil --[[ref]],
</span><span class="line">  ["label 2"] = {
</span><span class="line">    ["co\nl or"] = "bl\"ue",
</span><span class="line">    str = "\"\n'\\\000",
</span><span class="line">    text = "ha'ns"
</span><span class="line">  } --[[table: 001752B0]],
</span><span class="line">  list = {
</span><span class="line">    "a",
</span><span class="line">    nil,
</span><span class="line">    nil,
</span><span class="line">    "f",
</span><span class="line">    "g",
</span><span class="line">    nil,
</span><span class="line">    {} --[[table: 00175350]],
</span><span class="line">    [9] = "i",
</span><span class="line">    ["3"] = 33
</span><span class="line">  } --[[table: 00175328]],
</span><span class="line">  ["true"] = "some value",
</span><span class="line">  x = 1,
</span><span class="line">  z = loadstring("LuaQ...",'@serialized') --[[function: 00171020]],
</span><span class="line">  [false] = 2,
</span><span class="line">  [io.stdin --[[file (767D0958)]]] = 3,
</span><span class="line">  [true] = {
</span><span class="line">    nil --[[ref]]
</span><span class="line">  } --[[table: 00175300]]
</span><span class="line">} --[[table: 001752D8]]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>####单行打印</p>

<hr />
<p>这是一个更加紧凑一点的展示。一行就展示出序列化的字符串。<br />
不是一个完全的展示，不包括自我引用，共享数据，循环引用。</p>

<p>local serpent = require(“serpent”)<br />
print(serpent.dump(a, {name = ‘a’}))</p>

<p>输出结果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">do local a={[false]=2,[true]={[1]={str="\"\n'\\\000",text="ha'ns",["co\nl or"]
</span><span class="line">="bl\"ue"}},c=nil --[[ref]],["label 2"]=nil --[[ref]],[1/0 --[[math.huge]]]=-1/0
</span><span class="line">--[[-math.huge]],x=1,z=loadstring("LuaQ...",'@serialized'),[io.stdin]=3,list=
</span><span class="line">{[1]="a",[4]="f",[5]="g",[7]={},["3"]=33,[9]="i"},["true"]="some value"};
</span><span class="line">a.c=a;a[a]=a;a["label 2"]=a[true][1];a[a[true][1]]=0/0;a[a.z]=print;return a;end</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lua一份模板创建多个对象]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/15/lua-object"/>
    <updated>2015-11-15T20:48:08+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/15/lua-object</id>
    <content type="html"><![CDATA[<p>上一章，我们说过reuqire其实就是将一份已经加载过得数据返回，因此多次加载一份文件，其实就是一个数据，而不是多个。<br />
那么如何实现多个呢？</p>

<!--more-->
<p>只要我们脑洞大开，就可以发现其实只要通过setmetatable就能够巧妙地实现这个问题。<br />
只要我们将require进来的数据作为另一个表数据的元数据，是不是就算是已经创建了一个新的对象呢？比如</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">a = require("A")
</span><span class="line">b = {}
</span><span class="line">setmetatable(b,{__index =  a})</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>此时我们require了A，创建了模块A的数据并把它作为b的元表，而B是一个非常干净的table，它是否就相当于a的一个对象呢？<br />
 想想这样和其他语言的创建对象是否如出一辙呢？如此一来，我们就可以多次创建。比如</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">c = {}
</span><span class="line">c.x = 10
</span><span class="line">c.y = 100
</span><span class="line">setmetatable(c,{__index =  a})
</span><span class="line">d = {}
</span><span class="line">setmetatable(d,{__index =  a})</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看，这样b,c,d都是以a为元表。每个表都可以有自己的数据并不影响彼此（只要元表不改变）。<br />
A.lua 的结构如下：<br />
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">local A = {}
</span><span class="line">A.number1 = 1
</span><span class="line">A.number2 = 1
</span><span class="line">function A.doAction()
</span><span class="line">	print(string.format("doAction:%d",(A.number1+A.number2)))
</span><span class="line">end 
</span><span class="line">function A.moveToPosition(x,y)
</span><span class="line">	print(string.format("we want to move to %d,%d",x,y))
</span><span class="line">end 
</span><span class="line">return A</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>但是这个A里面怎么操作我们自己的数据呢？比如我们想在<code>doAction</code>中调用b自己的数据,但是你看这个函数里面定义的是将A的number1和number2进行了加法。如果我们的b也有这两个变量，会不会调用的就是b的变量呢？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">a = require("A")
</span><span class="line">b = {}
</span><span class="line">b.number1 = 10
</span><span class="line">b.number2 = 10
</span><span class="line">setmetatable(b,{__index =  a})
</span><span class="line">b.doAction()</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>但是打印的却是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">doAction:2</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这说明最终使用的还是a的变量，怎么才能让它调用b自身的变量呢？</p>

<p>简单地方法就是将b作为参数传给doAction。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function A.doAction(tableData)
</span><span class="line">	print(string.format("doAction:%d",(tableData.number1+tableData.number2)))
</span><span class="line">end </span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如此当b调用doAction的时候，就需要<code>b.doAction(b)</code>这样子！这非常奇怪，但也能够容忍。<br />
有没有别的方法呢？<br />
是的，有。lua提供另外一种语法来解决这个问题。可以讲调用者自己传到函数中做第一个参数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function A:doAction()
</span><span class="line">	print(string.format("doAction:%d",(self.number1+self.number2)))
</span><span class="line">end </span></code></pre></td></tr></table></div></figure></notextile></div>
<p>仔细看，这个函数和上面的定义最大的区别就是用了冒号。如此一来，在函数里面就可以用self来指示函数的调用者。<br />
因此，我们的调用方式就变成了<code>b:doAction()</code>即可！</p>

<p>讲到此处，你是否对lua有一个整体的感受了。如果不懂也没有关系，报错也没有关系，请下载我上一篇文章推荐的zerobrain studio编辑器。通过断点调试一点点的尝试，你就能够很快明白的！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lua中require到底做了什么事情？]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/15/lua-require"/>
    <updated>2015-11-15T20:47:27+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/15/lua-require</id>
    <content type="html"><![CDATA[<p>require到底做了什么呢？起初我认为他和其他的语言的require是一样的，即将另一个模块导入进来。比如有一个如下的A.lua文件<br />
<!--more--></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">DEBUG = false
</span><span class="line">USER_NAME = "newtomao"
</span><span class="line">USER_IMAGE = "cat.png"
</span><span class="line">VERSION = ""
</span><span class="line">
</span><span class="line">function printBool(boolValue)
</span><span class="line">	print("[printBook]:" .. tostring(boolValue))
</span><span class="line">end
</span><span class="line">
</span><span class="line">function getRandomNumber()
</span><span class="line">	return  math.random(100)
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当我在另一个文件B.lua里面<code>require("A")</code>的时候，我们可以直接调用<code>getRandomNumber</code>和上面定义的常量。因此我们可以任务require就是将另一个文件注册到全局表_G中。这样我们就可以在全局范围内的使用A文件中定义的函数和变量。</p>

<p>我们讲require”A”的结果打印出来如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">retA = require("A")
</span><span class="line">dump(retA)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">"require之后的结果" = true</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是如果A文件不是上面的样子，而是如下的样子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">local A = {}
</span><span class="line">A.userName = "hello"
</span><span class="line">function A.doAction()
</span><span class="line">	print("doAction")
</span><span class="line">end
</span><span class="line">return A</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时我们require(A.lua)之后，是否可以也直接调用doAction呢？且慢。仔细看下面有一个<code>return</code>, 这表示这个lua文件如果被require进来，返回的是A，就是一个完整的模块table。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">retA = require("A")
</span><span class="line">dump(retA,"require之后的结果")</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打印的结果如下：<br />
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class=""><span class="line">"require之后的结果" = {
</span><span class="line">    "doAction" = function: 0x7fcc024dddb0
</span><span class="line">    "userName" = "hello"
</span><span class="line">}</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;</p>

<p>你看她返回的结果是一个table，打印了A的结构。此时我们就可以通过<code>retA.doAction()</code>的形式去调用。<br />
retA就是类似一个对象，但是又不完全是对象，它更像是一个命名空间。规定了函数和变量的上下文环境是在A这个空间内。如果外面想要访问userName，需要在前面加上命名空间的限定。<br />
如果A被我们require多次结果会不会不同呢？比如如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">a = require("A")
</span><span class="line">a2 = require("A")
</span><span class="line">print(a == a2)</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果是怎么样的呢？答案就是true，是的，a和a2是一个地址。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">print(a)
</span><span class="line">table: 0x7fac50500ad0
</span><span class="line">print(a2)
</span><span class="line">table: 0x7fac50500ad0</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么这样看来你require多次和require一次的结果是一样的。那么require到底做了什么？<br />
我们来看lua中对require函数的实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class=""><span class="line">static int ll_require (lua_State *L) {
</span><span class="line">  const char *name = luaL_checkstring(L, 1);
</span><span class="line">  int i;
</span><span class="line">  lua_settop(L, 1);  /* _LOADED table will be at index 2 */
</span><span class="line">  lua_getfield(L, LUA_REGISTRYINDEX, "_LOADED");
</span><span class="line">  lua_getfield(L, 2, name);
</span><span class="line">  if (lua_toboolean(L, -1)) {  /* is it there? */
</span><span class="line">    if (lua_touserdata(L, -1) == sentinel)  /* check loops */
</span><span class="line">      luaL_error(L, "loop or previous error loading module " LUA_QS, name);
</span><span class="line">    return 1;  /* package is already loaded */
</span><span class="line">  }
</span><span class="line">  /* else must load it; iterate over available loaders */
</span><span class="line">  lua_getfield(L, LUA_ENVIRONINDEX, "loaders");
</span><span class="line">  if (!lua_istable(L, -1))
</span><span class="line">    luaL_error(L, LUA_QL("package.loaders") " must be a table");
</span><span class="line">  lua_pushliteral(L, "");  /* error message accumulator */
</span><span class="line">  for (i=1; ; i++) {
</span><span class="line">    lua_rawgeti(L, -2, i);  /* get a loader */
</span><span class="line">    if (lua_isnil(L, -1))
</span><span class="line">      luaL_error(L, "module " LUA_QS " not found:%s",
</span><span class="line">                    name, lua_tostring(L, -2));
</span><span class="line">    lua_pushstring(L, name);
</span><span class="line">    lua_call(L, 1, 1);  /* call it */
</span><span class="line">    if (lua_isfunction(L, -1))  /* did it find module? */
</span><span class="line">      break;  /* module loaded successfully */
</span><span class="line">    else if (lua_isstring(L, -1))  /* loader returned error message? */
</span><span class="line">      lua_concat(L, 2);  /* accumulate it */
</span><span class="line">    else
</span><span class="line">      lua_pop(L, 1);
</span><span class="line">  }
</span><span class="line">  lua_pushlightuserdata(L, sentinel);
</span><span class="line">  lua_setfield(L, 2, name);  /* _LOADED[name] = sentinel */
</span><span class="line">  lua_pushstring(L, name);  /* pass name as argument to module */
</span><span class="line">  lua_call(L, 1, 1);  /* run loaded module */
</span><span class="line">  if (!lua_isnil(L, -1))  /* non-nil return? */
</span><span class="line">    lua_setfield(L, 2, name);  /* _LOADED[name] = returned value */
</span><span class="line">  lua_getfield(L, 2, name);
</span><span class="line">  if (lua_touserdata(L, -1) == sentinel) {   /* module did not set a value? */
</span><span class="line">    lua_pushboolean(L, 1);  /* use true as result */
</span><span class="line">    lua_pushvalue(L, -1);  /* extra copy to be returned */
</span><span class="line">    lua_setfield(L, 2, name);  /* _LOADED[name] = true */
</span><span class="line">  }
</span><span class="line">  return 1;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个函数并不复杂，但是对于初学者来说可能看到之后会被吓到，大部分都是出栈入栈的操作。我们先看前几行</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lua_settop(L, 1);  /* _LOADED table will be at index 2 */
</span><span class="line">  lua_getfield(L, LUA_REGISTRYINDEX, "_LOADED");
</span><span class="line">  lua_getfield(L, 2, name);
</span><span class="line">  if (lua_toboolean(L, -1)) {  /* is it there? */
</span><span class="line">    if (lua_touserdata(L, -1) == sentinel)  /* check loops */
</span><span class="line">      luaL_error(L, "loop or previous error loading module " LUA_QS, name);
</span><span class="line">    return 1;  /* package is already loaded */
</span><span class="line">  }</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>不用看函数，且看注释，他的意思就是先将栈指针移到第一个位置，由于lua所以从1开始，移到1即意味着要讲栈里面的元素清空，然后将LUA_REGISTRYINDEX执行的表数据里面名字是“_LOADED” 这个数据放到第2个位置，接下来讲在第2位的数据里面，名字叫做name的数据放到第三位。那么在第二位的不正是loaded的数据嘛！<br />
接下来，lua检查栈顶元素是否是bool类型，那么栈顶元素是哪一个呢?不正是第三步放进来的数据嘛！<br />
检查这个数据是否是boolean类型，只要存在，也就是加载过这个name模块，那么就任务已经被加载过了。就直接返回无需再次加载。</p>

<p>而如果没有数据，那么就需要检查是否能够正确地加载。</p>

<p>这就解释了为什么多次require其实并没有什么意义。</p>

<p>接下来代码会寻找一个有效地loader加载器加载lua模块然后讲模块加载的结果放到了_LOADED中。因此我们在require之后，可以通过打印package.loaded来检查。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> "package.loaded" = {
</span><span class="line">     "A" = {
</span><span class="line">         "doAction" = function: 0x7f88fec5c2d0
</span><span class="line">         "userName" = "hello"
</span><span class="line">     }
</span><span class="line">     "B" = true
</span><span class="line">    }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看到这里，各位同学应该已经了解这个reuqire之后，其实并未创建新的对象，而是将lua文件运行之后的结果返回来了。那么这个已经被放到了loaded的“A”更像是一个类文件的模板。而不是对象。</p>

<p>那么这对于我们习惯面向对象开发的同学来说，如何用lua来实现面向对象的开发呢？<br />
别急，请看下一篇文章。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua脚本在C++下的舞步（三）]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/12/lua-deep-3"/>
    <updated>2015-11-12T21:48:47+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/12/lua-deep-3</id>
    <content type="html"><![CDATA[<p>转帖来自：http://www.acejoy.com/bbs/viewthread.php?tid=1931&amp;extra=page%3D1</p>

<p>上一讲我把Lua基本的栈规则讲了一下，然后完善了一下我的CLuaFn类。让它可以支持任意参数数量和函数名称的传值。当然，这些功能是为了今天这篇文章而铺路的。 </p>

<p>看了七猫的回帖，呵呵，确实应该说一下SWIG这个工具，说真的，我对这个工具理解不深，因为没有怎么用过，读过一些关于它的文章，似乎是帮你把C++的功能封装成一个Lua基本库的东西，但是后来研究，他可以很轻松帮你把公用函数封装成一个Lua的基本库(类似C++的dll)，但是对于我的需求而言，可能不太一样。因为我大量的是需要在C++里面进行数据传输以及变量的交互，所以为了紧贴C++，我需要很多关联数据的处理。 <br />
我是一名C++程序员，所以在很多时候，不想过多的使用Lua的特性，因为个人感觉，Lua的语法要比C++的更加灵活。而我更希望，在函数调用的某些习惯上，遵循一些C++的规则。 </p>

<!--more-->

<p>好了，废话少说，我们先来看一个类（头文件）。假设我们要把这个对象，传输给Lua进行调用。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#ifndef _TEST_H 
</span><span class="line">#define _TEST_H
</span><span class="line">class CTest 
</span><span class="line">{ 
</span><span class="line">public: 
</span><span class="line">        CTest(void); 
</span><span class="line">        ~CTest(void);
</span><span class="line">        char* GetData(); 
</span><span class="line">        void SetData(const char* pData);
</span><span class="line">private: 
</span><span class="line">        char m_szData[200]; 
</span><span class="line">}; 
</span><span class="line">#endif</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个类里面有两个函数，一个是GetData()，一个是SetData()，之所以这么写，我要让Lua不仅能使用我的类，还可以给这个类使用参数。 <br />
那么，cpp文件，我们姑且这样写。（当然，你可以进行修改，按照你喜欢的方式写一个方法，呵呵）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">char* CTest::GetData() 
</span><span class="line">{ 
</span><span class="line">        printf(“[CTest::GetData]%s./n”, m_szData); 
</span><span class="line">        return m_szData; 
</span><span class="line">}
</span><span class="line">
</span><span class="line">void CTest::SetData(const char* pData) 
</span><span class="line">{ 
</span><span class="line">        sprintf(m_szData, “%s”, pData); 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是一个标准的类，我需要这个类在Lua里面可以创造出来，并赋予数值，甚至我可以把CTest作为一个Lua函数参数，传给Lua函数让它去给我处理。让我们来看看怎么做。如果使用标准的Lua语法，有点多，所以我就借用一下上次提到的tolua来做到这一切，我一句句的解释。姑且我们把这些代码放在LuaFn.cpp里面。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">tolua_new_CTest</span><span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">pState</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="n">CTest</span><span class="o">*</span> <span class="n">pTest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CTest</span><span class="p">();</span>
</span><span class="line">        <span class="n">tolua_pushusertype</span><span class="p">(</span><span class="n">pState</span><span class="p">,</span> <span class="n">pTest</span><span class="p">,</span> <span class="err">“</span><span class="n">CTest</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">tolua_delete_CTest</span><span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">pState</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="n">CTest</span><span class="o">*</span> <span class="n">pTest</span> <span class="o">=</span> <span class="p">(</span><span class="n">CTest</span><span class="o">*</span> <span class="p">)</span><span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">pState</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">pTest</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">                <span class="k">delete</span> <span class="n">pTest</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">tolua_SetData_CTest</span><span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">pState</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="n">CTest</span><span class="o">*</span> <span class="n">pTest</span> <span class="o">=</span> <span class="p">(</span><span class="n">CTest</span><span class="o">*</span> <span class="p">)</span><span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">pState</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">        <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">pData</span> <span class="o">=</span> <span class="n">tolua_tostring</span><span class="p">(</span><span class="n">pState</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">pData</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">pTest</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">                <span class="n">pTest</span><span class="o">-&gt;</span><span class="n">SetData</span><span class="p">(</span><span class="n">pData</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">static</span> <span class="kt">int</span> <span class="nf">tolua_GetData_CTest</span><span class="p">(</span><span class="n">lua_State</span><span class="o">*</span> <span class="n">pState</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="n">CTest</span><span class="o">*</span> <span class="n">pTest</span> <span class="o">=</span> <span class="p">(</span><span class="n">CTest</span><span class="o">*</span> <span class="p">)</span><span class="n">tolua_tousertype</span><span class="p">(</span><span class="n">pState</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">pTest</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">                <span class="kt">char</span><span class="o">*</span> <span class="n">pData</span> <span class="o">=</span> <span class="n">pTest</span><span class="o">-&gt;</span><span class="n">GetData</span><span class="p">();</span>
</span><span class="line">                <span class="n">tolua_pushstring</span><span class="p">(</span><span class="n">pState</span><span class="p">,</span> <span class="n">pData</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看看这几个静态函数在干什么。 <br />
我要在Lua里面使用CTest，必须让Lua里这个CTest对象能够顺利的创造和销毁。<code>tolua_new_CTest()</code>和<code>tolua_delete_CTest()</code>就是干这个的。 <br />
<code>tolua_pushusertype(pState, pTest, “CTest”);</code> 这句话的意思是，将一个已经在Lua注册的”CTest”对象指针，压入数据栈。 <br />
同理，<code>CTest* pTest = (CTest* )tolua_tousertype(pState, 1, 0);</code>是将数据栈下的对象以(CTest* )的指针形式弹出来。 </p>

<p><code>tolua_SetData_CTest()</code>函数和<code>tolua_GetData_CTest</code>分别对应CTest的SetData方法和GetData()方法。因为我们的SetData方法里面存在变量，那么同样，我们需要使用<code>const char* pData = tolua_tostring(pState, 2, 0);</code>将参数弹出来，然后输入到<code>pTest-&gt;SetData(pData);</code>对象中去，当然，你可以有更多若干个参数。随你的喜好。这里只做一个举例。 </p>

<p>好了，你一定会问，这么多的静态函数，用在哪里？呵呵，当然是给Lua注册，当你把这些数据注册到Lua里面，你就可以轻松的在Lua中使用它们。 <br />
让我们看看，注册是怎么做到的。</p>

<p>还是在CLuaFn类里面，我们增加一个函数。比如叫做bool InitClass();</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="kt">bool</span> <span class="n">CLuaFn</span><span class="o">::</span><span class="n">InitClass</span><span class="p">()</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span> <span class="o">==</span> <span class="n">m_pState</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">                <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="p">[</span><span class="n">CLuaFn</span><span class="o">::</span><span class="n">InitClass</span><span class="p">]</span><span class="n">m_pState</span> <span class="n">is</span> <span class="nb">NULL</span><span class="p">.</span><span class="o">/</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">                <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="n">tolua_open</span><span class="p">(</span><span class="n">m_pState</span><span class="p">);</span>
</span><span class="line">        <span class="n">tolua_module</span><span class="p">(</span><span class="n">m_pState</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class="line">        <span class="n">tolua_beginmodule</span><span class="p">(</span><span class="n">m_pState</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">tolua_usertype</span><span class="p">(</span><span class="n">m_pState</span><span class="p">,</span> <span class="err">“</span><span class="n">CTest</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">        <span class="n">tolua_cclass</span><span class="p">(</span><span class="n">m_pState</span><span class="p">,</span> <span class="err">“</span><span class="n">CTest</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">CTest</span><span class="err">”</span><span class="p">,</span> <span class="err">“”</span><span class="p">,</span> <span class="n">tolua_delete_CTest</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">tolua_beginmodule</span><span class="p">(</span><span class="n">m_pState</span><span class="p">,</span> <span class="err">“</span><span class="n">CTest</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">        <span class="n">tolua_function</span><span class="p">(</span><span class="n">m_pState</span><span class="p">,</span> <span class="err">“</span><span class="k">new</span><span class="err">”</span><span class="p">,</span> <span class="n">tolua_new_CTest</span><span class="p">);</span>
</span><span class="line">        <span class="n">tolua_function</span><span class="p">(</span><span class="n">m_pState</span><span class="p">,</span> <span class="err">“</span><span class="n">SetData</span><span class="err">”</span><span class="p">,</span> <span class="n">tolua_SetData_CTest</span><span class="p">);</span>
</span><span class="line">        <span class="n">tolua_function</span><span class="p">(</span><span class="n">m_pState</span><span class="p">,</span> <span class="err">“</span><span class="n">GetData</span><span class="err">”</span><span class="p">,</span> <span class="n">tolua_GetData_CTest</span><span class="p">);</span>
</span><span class="line">        <span class="n">tolua_endmodule</span><span class="p">(</span><span class="n">m_pState</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">tolua_endmodule</span><span class="p">(</span><span class="n">m_pState</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的代码，就是我把上面的几个静态函数，绑定到Lua的基础对象中去。 <br />
<code>tolua_beginmodule(m_pState, “CTest”);</code>是只注册一个模块，比如，我们管CTest叫做”CTest”，保持和C++的名称一样。这样在Lua的对象库中就会多了一个CTest的对象描述，等同于string,number等等基本类型，同理，你也可以用同样的方法，注册你的MFC类。是不是有点明白了？这里要注意，<code>tolua_beginmodule()</code>和<code>tolua_endmodule()</code>对象必须成对出现，如果出现不成对的，你注册的C++类型将会失败。 <br />
<code>tolua_function(m_pState, “SetData”, tolua_SetData_CTest);</code>指的是将Lua里面CTest对象的”SetData”绑定到你的<code>tolua_SetData_CTest()</code>函数中去。</p>

<p>好的，让我们来点激动人心的东西。还记得我们的Simple.lua的文件么。我们来改一下它。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">function</span> <span class="nf">func_Add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class="line">  <span class="n">local</span> <span class="n">test</span> <span class="o">=</span> <span class="nl">CTest</span><span class="p">:</span><span class="k">new</span><span class="p">();</span>
</span><span class="line">  <span class="nl">test</span><span class="p">:</span><span class="n">SetData</span><span class="p">(</span><span class="err">“</span><span class="n">I</span><span class="err">’</span><span class="n">m</span> <span class="n">freeeyes</span><span class="o">!</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">  <span class="nl">test</span><span class="p">:</span><span class="n">GetData</span><span class="p">();</span>
</span><span class="line">  <span class="k">return</span> <span class="n">x</span><span class="p">..</span><span class="n">y</span><span class="p">;</span>
</span><span class="line"><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我在这个函数里面，New了一个CTest对象，并进行赋值操作，最后把结果打印在屏幕上。你或许会问，最后一句不是x+y么，怎么变成了x..y，呵呵，在Lua中，..表示联合的意思，就好比在C++里面， string strName += “freeeyes”。原来觉得x+y有点土，索性返回一个两个字符串的联合吧。 </p>

<p>好了，我们已经把我们的这个CTest类注册到了Lua里面，让我们来调用一下吧。修改一下Main函数。变成以下的样子。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="kt">int</span> <span class="nf">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">_TCHAR</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="n">CLuaFn</span> <span class="n">LuaFn</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">InitClass</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">LoadLuaFile</span><span class="p">(</span><span class="err">“</span><span class="n">Sample</span><span class="p">.</span><span class="n">lua</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">CParamGroup</span> <span class="n">ParamIn</span><span class="p">;</span>
</span><span class="line">        <span class="n">CParamGroup</span> <span class="n">ParamOut</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span> <span class="n">szData1</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="o">/</span><span class="mi">0</span><span class="err">′</span><span class="p">};</span>
</span><span class="line">        <span class="n">sprintf</span><span class="p">(</span><span class="n">szData1</span><span class="p">,</span> <span class="err">“</span><span class="p">[</span><span class="n">freeeyes</span><span class="p">]</span><span class="err">“</span><span class="p">);</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">szData1</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">szData1</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamIn</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span> <span class="n">szData2</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="o">/</span><span class="mi">0</span><span class="err">′</span><span class="p">};</span>
</span><span class="line">        <span class="n">sprintf</span><span class="p">(</span><span class="n">szData2</span><span class="p">,</span> <span class="err">“</span><span class="p">[</span><span class="n">shiqiang</span><span class="p">]</span><span class="err">“</span><span class="p">);</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">szData2</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">szData2</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamIn</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam2</span><span class="p">);</span>
</span><span class="line">        <span class="kt">char</span> <span class="n">szData3</span><span class="p">[</span><span class="mi">40</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="o">/</span><span class="mi">0</span><span class="err">′</span><span class="p">};</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">szData3</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
</span><span class="line">        <span class="n">ParamOut</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam3</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">CallFileFn</span><span class="p">(</span><span class="err">“</span><span class="n">func_Add</span><span class="err">”</span><span class="p">,</span> <span class="n">ParamIn</span><span class="p">,</span> <span class="n">ParamOut</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span><span class="o">*</span> <span class="n">pData</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="p">)</span><span class="n">ParamOut</span><span class="p">.</span><span class="n">GetParam</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetParam</span><span class="p">();</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[Main]Sum = %s./n&quot;</span><span class="p">,</span> <span class="n">pData</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">getchar</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果你完全按照我的，你就可以编译你的工程了，运行一下，看看是啥结果？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="p">[</span><span class="n">CTest</span><span class="o">::</span><span class="n">GetData</span><span class="p">]</span><span class="n">I</span><span class="err">’</span><span class="n">m</span> <span class="n">freeeyes</span><span class="o">!</span><span class="p">.</span>
</span><span class="line"><span class="p">[</span><span class="n">Main</span><span class="p">]</span><span class="n">Sum</span> <span class="o">=</span> <span class="p">[</span><span class="n">freeeyes</span><span class="p">][</span><span class="n">shiqiang</span><span class="p">].</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看看，是不是和我输出的一样？<br />
呵呵，有意思吧，你已经可以在Lua里面用C++的函数了，那么咱们再增加一点难度，比如，我有一个CTest对象，要作为一个参数，传输给func_Add()执行，怎么办？ <br />
很简单，如果你对上面的代码仔细阅读，你会发现下面的代码一样简洁。为了支持刚才要说的需求，我们需要把Sample.lua再做一点修改。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="n">function</span> <span class="nf">func_Add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span><span class="line">  <span class="nl">f</span><span class="p">:</span><span class="n">SetData</span><span class="p">(</span><span class="err">“</span><span class="n">I</span><span class="err">’</span><span class="n">m</span> <span class="n">freeeyes</span><span class="o">!</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">  <span class="nl">f</span><span class="p">:</span><span class="n">GetData</span><span class="p">();</span>
</span><span class="line">  <span class="k">return</span> <span class="n">x</span><span class="p">..</span><span class="n">y</span><span class="p">;</span>
</span><span class="line"><span class="n">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>f假设就是我们要传入的CTest对象。我们要在Lua里面使用它。（我们的CLuaFn都不用改，把main函数稍微改一下即可，来看看怎么写。）</p>

<p>LuaSample.cpp : 定义控制台应用程序的入口点。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include “stdafx.h” </span>
</span><span class="line"><span class="cp">#include “LuaFn.h”</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="nf">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">_TCHAR</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="n">CLuaFn</span> <span class="n">LuaFn</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">InitClass</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">LoadLuaFile</span><span class="p">(</span><span class="err">“</span><span class="n">Sample</span><span class="p">.</span><span class="n">lua</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">CParamGroup</span> <span class="n">ParamIn</span><span class="p">;</span>
</span><span class="line">        <span class="n">CParamGroup</span> <span class="n">ParamOut</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span> <span class="n">szData1</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="o">/</span><span class="mi">0</span><span class="err">′</span><span class="p">};</span>
</span><span class="line">        <span class="n">sprintf</span><span class="p">(</span><span class="n">szData1</span><span class="p">,</span> <span class="err">“</span><span class="p">[</span><span class="n">freeeyes</span><span class="p">]</span><span class="err">“</span><span class="p">);</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">szData1</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">szData1</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamIn</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span> <span class="n">szData2</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="o">/</span><span class="mi">0</span><span class="err">′</span><span class="p">};</span>
</span><span class="line">        <span class="n">sprintf</span><span class="p">(</span><span class="n">szData2</span><span class="p">,</span> <span class="err">“</span><span class="p">[</span><span class="n">shiqiang</span><span class="p">]</span><span class="err">“</span><span class="p">);</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">szData2</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">szData2</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamIn</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//只追加了这里 </span>
</span><span class="line">        <span class="n">CTest</span><span class="o">*</span> <span class="n">pTest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CTest</span><span class="p">();</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">pTest</span><span class="p">,</span> <span class="err">“</span><span class="n">CTest</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CTest</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamIn</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam3</span><span class="p">);</span>
</span><span class="line">       <span class="c1">//追加结束 </span>
</span><span class="line">        <span class="kt">char</span> <span class="n">szData4</span><span class="p">[</span><span class="mi">40</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="o">/</span><span class="mi">0</span><span class="err">′</span><span class="p">};</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">szData4</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="p">,</span> <span class="mi">40</span><span class="p">);</span>
</span><span class="line">        <span class="n">ParamOut</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam4</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">CallFileFn</span><span class="p">(</span><span class="err">“</span><span class="n">func_Add</span><span class="err">”</span><span class="p">,</span> <span class="n">ParamIn</span><span class="p">,</span> <span class="n">ParamOut</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span><span class="o">*</span> <span class="n">pData</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="p">)</span><span class="n">ParamOut</span><span class="p">.</span><span class="n">GetParam</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetParam</span><span class="p">();</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="p">[</span><span class="n">Main</span><span class="p">]</span><span class="n">Sum</span> <span class="o">=</span> <span class="o">%</span><span class="n">s</span><span class="p">.</span><span class="o">/</span><span class="n">n</span><span class="err">”</span><span class="p">,</span> <span class="n">pData</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">getchar</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>好了，就这么点代码，改好了，我们再Build一下，然后点击运行。看看输出结果，是不是和以前的一样？ <br />
恩，是不是有点兴奋了？你成功的让Lua开始调用你的C++对象了！并且按照你要的方式执行！还记得我曾在第一篇文章里面许诺过，我会让你画出一个MFC窗体么？呵呵，如果你到现在依然觉得很清晰的话，说明你的距离已经不远了。</p>

<p>既然已经到了这里，我们索性再加点难度，如果我要把CTest作为一个对象返回回来怎么做？很简单，且看。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="kt">int</span> <span class="nf">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">_TCHAR</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">        <span class="n">CLuaFn</span> <span class="n">LuaFn</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">InitClass</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">LoadLuaFile</span><span class="p">(</span><span class="err">“</span><span class="n">Sample</span><span class="p">.</span><span class="n">lua</span><span class="err">”</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">CParamGroup</span> <span class="n">ParamIn</span><span class="p">;</span>
</span><span class="line">        <span class="n">CParamGroup</span> <span class="n">ParamOut</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span> <span class="n">szData1</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="o">/</span><span class="mi">0</span><span class="err">′</span><span class="p">};</span>
</span><span class="line">        <span class="n">sprintf</span><span class="p">(</span><span class="n">szData1</span><span class="p">,</span> <span class="err">“</span><span class="p">[</span><span class="n">freeeyes</span><span class="p">]</span><span class="err">“</span><span class="p">);</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">szData1</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">szData1</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamIn</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam1</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="kt">char</span> <span class="n">szData2</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="err">‘</span><span class="o">/</span><span class="mi">0</span><span class="err">′</span><span class="p">};</span>
</span><span class="line">        <span class="n">sprintf</span><span class="p">(</span><span class="n">szData2</span><span class="p">,</span> <span class="err">“</span><span class="p">[</span><span class="n">shiqiang</span><span class="p">]</span><span class="err">“</span><span class="p">);</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">szData2</span><span class="p">,</span> <span class="err">“</span><span class="n">string</span><span class="err">”</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">szData2</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamIn</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam2</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">CTest</span><span class="o">*</span> <span class="n">pTest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CTest</span><span class="p">();</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">pTest</span><span class="p">,</span> <span class="err">“</span><span class="n">CTest</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CTest</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamIn</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam3</span><span class="p">);</span>
</span><span class="line">        <span class="n">CTest</span><span class="o">*</span> <span class="n">pTestRsult</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class="line">        <span class="n">_ParamData</span><span class="o">*</span> <span class="n">pParam4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_ParamData</span><span class="p">(</span><span class="n">pTestRsult</span><span class="p">,</span> <span class="err">“</span><span class="n">CTest</span><span class="err">”</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">pTestRsult</span><span class="p">));</span>
</span><span class="line">        <span class="n">ParamOut</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">pParam4</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">LuaFn</span><span class="p">.</span><span class="n">CallFileFn</span><span class="p">(</span><span class="err">“</span><span class="n">func_Add</span><span class="err">”</span><span class="p">,</span> <span class="n">ParamIn</span><span class="p">,</span> <span class="n">ParamOut</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//接受Lua返回参数为CTest类型，并调用其中的方法。 </span>
</span><span class="line">        <span class="n">pTestRsult</span> <span class="o">=</span> <span class="p">(</span><span class="n">CTest</span><span class="o">*</span> <span class="p">)</span><span class="n">ParamOut</span><span class="p">.</span><span class="n">GetParam</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">GetParam</span><span class="p">();</span>
</span><span class="line">        <span class="n">pTestRsult</span><span class="o">-&gt;</span><span class="n">GetData</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">getchar</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好，编译，执行。呵呵，看到了吧。</p>

<p>看到这里，如果你能看的明白，说明你已经对Lua如何调用C++接口，以及C++如何调用Lua有了一定的理解。当然，我写的这个类也不是很完善，不过做一半的Lua开发，应该是够用了。以以上的方式，你可以使用Lua驾驭你的C++代码。 </p>

<p>好了，咱们既然已经说到这里了，再深一步，如果我的类是继承的，怎么办？呵呵，很好的问题。 <br />
比如，我的CTest继承了一个CBase，我的CBase又继承了一个。。。 <br />
在Lua里面，一样简单，我拿MFC的例子来举例吧，想必大家更喜欢看。 比如 CCmdTarget继承自CObject。 <br />
那么我在注册的时候可以这么写。<br />
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="c++"><span class="line"><span class="n">tolua_cclass</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span> <span class="err">“</span><span class="n">CCmdTarget</span><span class="err">”</span><span class="p">,</span>      <span class="err">”</span><span class="n">CCmdTarget</span><span class="err">”</span><span class="p">,</span>      <span class="err">”</span><span class="n">CObject</span><span class="err">”</span><span class="p">,</span>            <span class="nb">NULL</span><span class="p">);</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;<br />
这个表示CCmdTarget继承自CObject对象。 <br />
当然，MFC里面还会有很多类型，比如常数，Lua一样能处理。 <br />
举个例子说。<br />
&lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span></span>&lt;/figcaption&gt;&lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="c++"><span class="line"><span class="n">tolua_constant</span><span class="p">(</span><span class="n">tolua_S</span><span class="p">,</span> <span class="err">“</span><span class="n">ES_AUTOHSCROLL</span><span class="err">”</span><span class="p">,</span>   <span class="n">ES_AUTOHSCROLL</span><span class="p">);</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;</figure></notextile>&lt;/div&gt;<br />
这样注册，你就可以在 Lua里面使用ES_AUTOHSCROLL这个常数，它会自动绑定ES_AUTOHSCROLL这个C++常数对象。<br />
呵呵，说了这么多，让我们来点实际的。我给大家一个我以前写的MFC封装类（由于代码太多，我变成附件给大家），你们可以调用，当然，如果你有兴趣，就用我的MFC类，来做一个你喜欢的窗体吧，当然，你必须要用Lua脚本把它画出来，作为最后的考验，呵呵。</p>

<p><img src="http://www.newtomato.me/images/HelloLua_01_03.rar" alt="附带全部工程（附带Lua及tolua++）" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua脚本在C++下的舞步（二）]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/12/lua-deep-2"/>
    <updated>2015-11-12T21:47:58+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/12/lua-deep-2</id>
    <content type="html"><![CDATA[<p>转帖来自：http://www.acejoy.com/bbs/viewthread.php?tid=1931&amp;extra=page%3D1</p>

<p>上一节讲了一些基本的Lua应用，或许你会说，还是很简单么。呵呵，恩，是的，本来Lua就是为了让大家使用的方便快捷而设计的。如果设计的过为复杂，就不会有人使用了。 <br />
下面，我要强调一下，Lua的栈的一些概念，因为这个确实很重要，你会经常用到。熟练使用Lua，最重要的就是要时刻知道什么时候栈里面的数据是什么顺序，都是什么。如果你能熟练知道这些，实际你已经是Lua运用的高手了。</p>

<!--more-->

<p>说真的，第一次我接触栈的时候，没有把它想的很复杂，倒是看了网上很多的关于Lua的文章让我对栈的理解云里雾里，什么元表，什么User，什么局部变量，什么全局变量位移。说的那叫一个晕。本人脑子笨，理解不了这么多，也不知道为什么很多人喜欢把Lua栈弄的七上八下，代码晦涩难懂。后来实在受不了了，去Lua网站下载了Lua的文档，写的很清晰。Lua的栈实际上几句话足以。 <br />
当你初始化一个栈的时候，它的栈底是1，而栈顶相对位置是-1，说形象一些，你可以把栈想象成一个环，有一个指针标记当前位置，如果-1，就是当前栈顶，如果是-2就是当前栈顶前面一个参数的位置。以此类推。当然，你也可以正序去取，这里要注意，对于Lua的很多API，下标是从1开始的。这个和C++有些不同。而且，在栈的下标中，正数表示绝对栈底的下标，负数表示相对栈顶的相对地址，这个一定要有清晰的概念，否则很容易看晕了。 <br />
让我们看一些例子，加深理解。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lua_pushnumber(m_pState, 11); 
</span><span class="line">lua_pushnumber(m_pState, 12);
</span><span class="line">int nIn = lua_gettop(m_pState); </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里加了一行， lua_gettop()这个API是告诉你目前栈里元素的个数。 <br />
如果仅仅是Push两个参数，那么nIn的数值是2，对。没错。那么咱们看看栈里面是怎么放的。我再加两行代码。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int nData1 = lua_tonumber(m_pState, 1);     //读取栈底第一个绝对坐标中的元素 
</span><span class="line">int nData2 = lua_tonumber(m_pState, 2);     //读取栈底第二个绝对坐标中的元素 
</span><span class="line">printf(“[Test]nData1  = %d, nData2  = %d./n”); </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果是你，凭直觉，告诉我答案是什么？ <br />
现在公布答案，看看是不是和你想的一样。 <br />
[Test]nData1  = 11, nData2  = 12 </p>

<p>呵呵，那么，如果我把代码换成</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lua_pushnumber(m_pState, 11); 
</span><span class="line">lua_pushnumber(m_pState, 12);
</span><span class="line">
</span><span class="line">int nIn = lua_gettop(m_pState)
</span><span class="line">
</span><span class="line">int nData1 = lua_tonumber(m_pState, -1);     &lt;–读取栈顶第一个相对坐标中的元素 
</span><span class="line">int nData2 = lua_tonumber(m_pState, -2);     &lt;–读取栈顶第二个相对坐标中的元素 
</span><span class="line">printf(“[Test]nData1  = %d, nData2  = %d./n”);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>请你告诉我输出是什么？ <br />
答案是 <br />
[Test]nData1  = 12, nData2  = 11 </p>

<p>呵呵，挺简单的吧，对了，其实就这么简单。网上其它的高阶运用，其实大部分都是对栈的位置进行调整。只要你抓住主要概念，看懂还是不难的。什么元表，什么变量，其实都一样，抓住核心，时刻知道栈里面的样子，就没有问题。 <br />
好了，回到我上一节的那个代码。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bool CLuaFn::CallFileFn(const char* pFunctionName, int nParam1, int nParam2) 
</span><span class="line">{ 
</span><span class="line">        int nRet = 0; 
</span><span class="line">        if(NULL == m_pState) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]m_pState is NULL./n”); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        lua_getglobal(m_pState, pFunctionName);
</span><span class="line">
</span><span class="line">        lua_pushnumber(m_pState, nParam1); 
</span><span class="line">        lua_pushnumber(m_pState, nParam2);
</span><span class="line">
</span><span class="line">        int nIn = lua_gettop(m_pState); &lt;–在这里加一行。
</span><span class="line">
</span><span class="line">        nRet = lua_pcall(m_pState, 2, 1, 0); 
</span><span class="line">        if (nRet != 0) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]call function(%s) error(%d)./n”, pFunctionName, nRet); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        if (lua_isnumber(m_pState, -1) == 1) 
</span><span class="line">        { 
</span><span class="line">                int nSum = lua_tonumber(m_pState, -1); 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]Sum = %d./n”, nSum); 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        int nOut = lua_gettop(m_pState); &lt;–在这里加一行。
</span><span class="line">
</span><span class="line">        return true; 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>nIn的答案是多少？或许你会说是2吧，呵呵，实际是3。或许你会问，为什么会多一个？其实我第一次看到这个数字，也很诧异。但是确实是3。因为你调用的函数名称占据了一个堆栈的位置。其实，在获取nIn那一刻，堆栈的样子是这样的（函数接口地址，参数1，参数2），函数名称也是一个变量入栈的。而nOut输出是1，lua_pcall()函数在调用成功之后，会自动的清空栈，然后把结果放入栈中。在获取nOut的一刻，栈内是这幅摸样(输出参数1)。</p>

<p>这里就要再迁出一个更重要的概念了，Lua不是C++，对于C++程序员而言，一个函数会自动创建栈，当函数执行完毕后会自动清理栈，Lua可不会给你这么做，对于Lua而言，它没有函数这个概念，一个栈对应一个lua_State指针，也就是说，你必须手动去清理你不用的栈，否则会造成垃圾数据占据你的内存。 </p>

<p>不信？那么咱们来验证一下，就拿昨天的代码吧，你用for循环调用100万次。看看nOut的输出结果。。我相信，程序执行不到100万次就会崩溃，而你的内存也会变的硕大无比。而nOut的输出也会是这样的 1,2,3,4,5,6。。。。。 <br />
原因就是，Lua不会清除你以前栈内的数据，每调用一次都会给你生成一个新的栈元素插入其中。 <br />
那么怎么解决呢？呵呵，其实，如果不考虑多线程的话，在你的函数最后退出前加一句话，就可以轻松解决这个问题。(Lua栈操作是非线程安全的！)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lua_settop(m_pState, -2); </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这句话的意思是什么？lua_settop()是设置栈顶的位置，我这么写，意思就是，栈顶指针目前在当前位置的-2的元素上。这样，我就实现了对栈的清除。仔细想一下，是不是这个道理呢？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bool CLuaFn::CallFileFn(const char* pFunctionName, int nParam1, int nParam2) 
</span><span class="line">{ 
</span><span class="line">        int nRet = 0; 
</span><span class="line">        if(NULL == m_pState) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]m_pState is NULL./n”); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        lua_getglobal(m_pState, pFunctionName);
</span><span class="line">
</span><span class="line">        lua_pushnumber(m_pState, nParam1); 
</span><span class="line">        lua_pushnumber(m_pState, nParam2);
</span><span class="line">
</span><span class="line">        int nIn = lua_gettop(m_pState); &lt;–在这里加一行。
</span><span class="line">
</span><span class="line">        nRet = lua_pcall(m_pState, 2, 1, 0); 
</span><span class="line">        if (nRet != 0) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]call function(%s) error(%d)./n”, pFunctionName, nRet); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        if (lua_isnumber(m_pState, -1) == 1) 
</span><span class="line">        { 
</span><span class="line">                int nSum = lua_tonumber(m_pState, -1); 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]Sum = %d./n”, nSum); 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        int nOut = lua_gettop(m_pState); &lt;–在这里加一行。 
</span><span class="line">        lua_settop(m_pState, -2);             &lt;–清除不用的栈。
</span><span class="line">
</span><span class="line">        return true; 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>好了，再让我们运行100万次，看看你的程序内存，看看你的程序还崩溃不？ <br />
如果你想打印 nOut的话，输出会变成1,1,1,1,1。。。。 <br />
最后说一句，lua_tonumber()或lua_tostring()还有以后我们要用到的lua_touserdata()一定要将数据完全取出后保存到你的别的变量中去，否则会因为清栈操作，导致你的程序异常，切记！</p>

<p>呵呵，说了这么多，主要是让大家如何写一个严谨的Lua程序，不要运行没两下就崩溃了。好了，基础栈的知识先说到这里，以后还有一些技巧的运用，到时候会给大家展示。 </p>

<p>下面说一下，Lua的工具。（为什么要说这个呢？呵呵，因为我们下一步要用到其中的一个帮助我们的开发。） <br />
呵呵，其实，Lua里面有很多简化开发的工具，你可以去http://www.sourceforge.net/去找一下。它们能够帮助你简化C++对象与Lua对象互转之间的代码。 <br />
这里说几个有名的，当然可能不全。</p>

<blockquote>
  <p>(lua tinker)如果你的系统在windows下，而且不考虑移植，那么我强烈推荐你去下载一个叫做lua tinker的小工具，整个工具非常简单，一个.h和一个.cpp。直接就可以引用到你的工程中，连独立编译都不用，这是一个韩国人写的Lua与 C++接口转换的类，十分方便，代码简洁（居家旅行，必备良药）。它是基于模板的，所以你可以很轻松的把你的C++对象绑定到Lua中。代码较长，呵呵，有兴趣的朋友可以给我留言索要lua tinker的例子。就不贴在这里了。不过我个人不推荐这个东西，因为它在Linux下是编译不过去的。它使用了一种g++不支持的模板写法，虽然有人在尝试把它修改到Linux下编译，但据我所知，修改后效果较好的似乎还没有。不过如果你只是在  windows下，那就没什么可犹豫的，强烈推荐，你会喜欢它的。</p>
</blockquote>

<blockquote>
  <p>(Luabinder)相信用过Boost库的朋友，或许对这个家伙很熟悉。它是一个很强大的Linux下Lua扩展包，帮你封装了很多Lua的复杂操作，主要解决了绑定C++对象和Lua对象互动的关系，非常强大，不过嘛，对于freeeyes而言，还是不推荐，因为freeeyes很懒，不想为了一个Lua还要去编译一个庞大的boost库，当然，见仁见智，如果你的程序本身就已经加载了boost，那么就应该毫不犹豫的选择它。</p>
</blockquote>

<blockquote>
  <p>(lua++)呵呵，这是我最喜欢，也是我一直用到现在的库，比较前两个而言，lua++的封装性没有那么好，很多东西还是需要一点代码的，不过之所以我喜欢，是因为它是用C写的，可以在windows下和linux下轻松转换。如果鱼与熊掌不能兼得，那么我宁愿选择一个兼顾两者的东西，如果有的话，呵呵。当然，lua++就是这么一个东西，如果你继续看我的文章，或许你也会喜欢它的。</p>
</blockquote>

<p>好了，废话少说，就让我选择lua++作为我们继续进行下去的垫脚石吧。 <br />
说到<a href="http://www.codenix.com/~tolua/">Lua++</a>，这个东西还是挺有渊源的，请你先下载一个。我教你怎么编译。</p>

<p>还记得我昨天说过如何编译Lua么，现在请你再做一遍，不同的是，请把lua++的程序包中的src/lib中的所有h和cpp，还有include下的那个.h拷贝到你上次建立的lua工程中。然后全部添加到你的静态链接库工程中去，重新编译。会生成一个新的lua.lib，这个lua就自动包含了lua++的功能。最后记得把tolua++.h放在你的Include文件夹下。 <br />
行了，我们把上次CLuaFn类稍微改一下。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extern “C” 
</span><span class="line">{ 
</span><span class="line">        #include “lua.h” 
</span><span class="line">        #include “lualib.h” 
</span><span class="line">        #include “lauxlib.h” 
</span><span class="line">        #include “tolua++”   //这里加一行 
</span><span class="line">};
</span><span class="line">
</span><span class="line">class CLuaFn 
</span><span class="line">{ 
</span><span class="line">public: 
</span><span class="line">        CLuaFn(void); 
</span><span class="line">        ~CLuaFn(void);
</span><span class="line">
</span><span class="line">        void Init();            //初始化Lua对象指针参数 
</span><span class="line">        void Close();         //关闭Lua对象指针
</span><span class="line">		//加载指定的Lua文件 
</span><span class="line">        bool LoadLuaFile(const char* pFileName);                              
</span><span class="line">        //执行指定Lua文件中的函数
</span><span class="line">        bool CallFileFn(const char* pFunctionName, int nParam1, int nParam2);        
</span><span class="line">private: 
</span><span class="line">        lua_State* m_pState;   //这个是Lua的State对象指针，你可以一个lua文件对应一个。 
</span><span class="line">};</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>行了，这样我们就能用Lua++下的功能了。</p>

<p>昨天，大家看到了 bool CallFileFn(const char* pFunctionName, int nParam1, int nParam2);这个函数的运用。演示了怎么调用Lua函数。 <br />
下面，我改一下，这个函数。为什么？还是因为freeeyes很懒，我可不想每有一个函数，我都要写一个C++函数去调用，太累！我要写一个通用的！支持任意函数调用的接口！ <br />
于是我创建了两个类。支持任意参数的输入和输出，并打包送给lua去执行，说干就干。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#ifndef _PARAMDATA_H 
</span><span class="line">#define _PARAMDATA_H
</span><span class="line">
</span><span class="line">#include &lt;vector&gt;
</span><span class="line">
</span><span class="line">#define MAX_PARAM_200 200
</span><span class="line">
</span><span class="line">using namespace std;
</span><span class="line">
</span><span class="line">struct _ParamData 
</span><span class="line">{ 
</span><span class="line">public: 
</span><span class="line">        void* m_pParam; 
</span><span class="line">        char  m_szType[MAX_PARAM_200]; 
</span><span class="line">        int   m_TypeLen;
</span><span class="line">
</span><span class="line">public: 
</span><span class="line">        _ParamData() 
</span><span class="line">        { 
</span><span class="line">                m_pParam    = NULL; 
</span><span class="line">                m_szType[0] = ‘/0′; 
</span><span class="line">                m_TypeLen   = 0; 
</span><span class="line">        };
</span><span class="line">
</span><span class="line">        _ParamData(void* pParam, const char* szType, int nTypeLen) 
</span><span class="line">        { 
</span><span class="line">                SetParam(pParam, szType, nTypeLen); 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        ~_ParamData() {};
</span><span class="line">
</span><span class="line">        void SetParam(void* pParam, const char* szType, int nTypeLen) 
</span><span class="line">        { 
</span><span class="line">                m_pParam = pParam; 
</span><span class="line">                sprintf(m_szType, “%s”, szType); 
</span><span class="line">                m_TypeLen = nTypeLen; 
</span><span class="line">        };
</span><span class="line">
</span><span class="line">        bool SetData(void* pParam, int nLen) 
</span><span class="line">        { 
</span><span class="line">                if(m_TypeLen &lt; nLen) 
</span><span class="line">                { 
</span><span class="line">                        return false; 
</span><span class="line">                }
</span><span class="line">
</span><span class="line">                if(nLen &gt; 0) 
</span><span class="line">                { 
</span><span class="line">                        memcpy(m_pParam, pParam, nLen); 
</span><span class="line">                } 
</span><span class="line">                else 
</span><span class="line">                { 
</span><span class="line">                        memcpy(m_pParam, pParam, m_TypeLen); 
</span><span class="line">                } 
</span><span class="line">                return true; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        void* GetParam() 
</span><span class="line">        { 
</span><span class="line">                return m_pParam; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        const char* GetType() 
</span><span class="line">        { 
</span><span class="line">                return m_szType; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        bool CompareType(const char* pType) 
</span><span class="line">        { 
</span><span class="line">                if(0 == strcmp(m_szType, pType)) 
</span><span class="line">                { 
</span><span class="line">                        return true; 
</span><span class="line">                } 
</span><span class="line">                else 
</span><span class="line">                { 
</span><span class="line">                        return false; 
</span><span class="line">                } 
</span><span class="line">        } 
</span><span class="line">};
</span><span class="line">
</span><span class="line">class CParamGroup 
</span><span class="line">{ 
</span><span class="line">public: 
</span><span class="line">        CParamGroup() {}; 
</span><span class="line">        ~CParamGroup() 
</span><span class="line">        { 
</span><span class="line">                Close(); 
</span><span class="line">        };
</span><span class="line">
</span><span class="line">        void Init() 
</span><span class="line">        { 
</span><span class="line">                m_vecParamData.clear(); 
</span><span class="line">        };
</span><span class="line">
</span><span class="line">        void Close() 
</span><span class="line">        { 
</span><span class="line">                for(int i = 0; i &lt; (int)m_vecParamData.size(); i++) 
</span><span class="line">                { 
</span><span class="line">                        _ParamData* pParamData = m_vecParamData; 
</span><span class="line">                        delete pParamData; 
</span><span class="line">                        pParamData = NULL; 
</span><span class="line">                } 
</span><span class="line">                m_vecParamData.clear(); 
</span><span class="line">        };
</span><span class="line">
</span><span class="line">        void Push(_ParamData* pParam) 
</span><span class="line">        { 
</span><span class="line">                if(pParam != NULL) 
</span><span class="line">                { 
</span><span class="line">                        m_vecParamData.push_back(pParam); 
</span><span class="line">                } 
</span><span class="line">        };
</span><span class="line">
</span><span class="line">        _ParamData* GetParam(int nIndex) 
</span><span class="line">        { 
</span><span class="line">                if(nIndex &lt; (int)m_vecParamData.size()) 
</span><span class="line">                { 
</span><span class="line">                        return m_vecParamData[nIndex]; 
</span><span class="line">                } 
</span><span class="line">                else 
</span><span class="line">                { 
</span><span class="line">                        return NULL; 
</span><span class="line">                } 
</span><span class="line">        };
</span><span class="line">
</span><span class="line">        int GetCount() 
</span><span class="line">        { 
</span><span class="line">                return (int)m_vecParamData.size(); 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">private: 
</span><span class="line">        typedef vector&lt;_ParamData*&gt; vecParamData; 
</span><span class="line">        vecParamData m_vecParamData; 
</span><span class="line">};
</span><span class="line">
</span><span class="line">#endif
</span><span class="line">#endif</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我创建了两个类，把Lua要用到的类型，数据都封装起来了。这样，我只需要这么改写这个函数。 <br />
bool CallFileFn(const char* pFunctionName, CParamGroup&amp; ParamIn, CParamGroup&amp; ParamOut); <br />
它就能按照不同的参数自动给我调用，嘿嘿，懒到家吧！ <br />
其实这两个类很简单，_ParamData是参数类，把你要用到的参数放入到这个对象中去，标明类型的大小，类型名称，内存块。而CParamGroup负责将很多很多的_ParamData打包在一起，放在vector里面。</p>

<p>好了，让我们看看CallFileFn函数里面我怎么改的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bool CLuaFn::CallFileFn(const char* pFunctionName, CParamGroup&amp; ParamIn, CParamGroup&amp; ParamOut) 
</span><span class="line">{ 
</span><span class="line">        int nRet = 0; 
</span><span class="line">        int i    = 0; 
</span><span class="line">        if(NULL == m_pState) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]m_pState is NULL./n”); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        lua_getglobal(m_pState, pFunctionName);
</span><span class="line">
</span><span class="line">        //加载输入参数 
</span><span class="line">        for(i = 0; i &lt; ParamIn.GetCount(); i++) 
</span><span class="line">        { 
</span><span class="line">                PushLuaData(m_pState, ParamIn.GetParam(i)); 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        nRet = lua_pcall(m_pState, ParamIn.GetCount(), ParamOut.GetCount(), 0); 
</span><span class="line">        if (nRet != 0) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]call function(%s) error(%s)./n”, pFunctionName, lua_tostring(m_pState, -1)); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        //获得输出参数 
</span><span class="line">        int nPos = 0; 
</span><span class="line">        for(i = ParamOut.GetCount() – 1; i &gt;= 0; i–) 
</span><span class="line">        { 
</span><span class="line">                nPos–; 
</span><span class="line">                PopLuaData(m_pState, ParamOut.GetParam(i), nPos); 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        int nCount = lua_gettop(m_pState); 
</span><span class="line">        lua_settop(m_pState, -1-ParamOut.GetCount());
</span><span class="line">
</span><span class="line">        return true; 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>呵呵，别的没变，加了两个循环，因为考虑lua是可以支持多结果返回的，所以我也做了一个循环接受参数。 <br />
lua_settop(m_pState, -1-ParamOut.GetCount());这句话是不是有些意思，恩，是的，我这里做了一个小技巧，因为我不知道返回参数有几个，所以我会根据返回参数的个数重新设置栈顶。这样做可以返回任意数量的栈而且清除干净。 <br />
或许细心的你已经发现，里面多了两个函数。恩，是的。来看看这两个函数在干什么。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bool CLuaFn::PushLuaData(lua_State* pState, _ParamData* pParam) 
</span><span class="line">{ 
</span><span class="line">        if(pParam == NULL) 
</span><span class="line">        { 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        if(pParam-&gt;CompareType(“string”)) 
</span><span class="line">        { 
</span><span class="line">                lua_pushstring(m_pState, (char* )pParam-&gt;GetParam()); 
</span><span class="line">                return true; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        if(pParam-&gt;CompareType(“int”)) 
</span><span class="line">        { 
</span><span class="line">                int* nData = (int* )pParam-&gt;GetParam(); 
</span><span class="line">                lua_pushnumber(m_pState, *nData); 
</span><span class="line">                return true; 
</span><span class="line">        } 
</span><span class="line">        else 
</span><span class="line">        { 
</span><span class="line">                void* pVoid = pParam-&gt;GetParam(); 
</span><span class="line">                tolua_pushusertype(m_pState, pVoid, pParam-&gt;GetType()); 
</span><span class="line">                return true; 
</span><span class="line">        } 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>参数入栈操作，呵呵，或许你会问tolua_pushusertype(m_pState, pVoid, pParam-&gt;GetType());这句话，你可能有些看不懂，没关系，我会在下一讲详细的解释Lua++的一些API的用法。现在大概和你说一下，这句话的意思就是，把一个C++对象传输给Lua函数。 <br />
再看看，下面一个。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bool CLuaFn:: PopLuaData(lua_State* pState, _ParamData* pParam, int nIndex) 
</span><span class="line">{ 
</span><span class="line">        if(pParam == NULL) 
</span><span class="line">        { 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        if(pParam-&gt;CompareType(“string”)) 
</span><span class="line">        { 
</span><span class="line">                if (lua_isstring(m_pState, nIndex) == 1) 
</span><span class="line">                { 
</span><span class="line">                        const char* pData = (const char*)lua_tostring(m_pState, nIndex); 
</span><span class="line">                        pParam-&gt;SetData((void* )pData, (int)strlen(pData)); 
</span><span class="line">                } 
</span><span class="line">                return true; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        if(pParam-&gt;CompareType(“int”)) 
</span><span class="line">        { 
</span><span class="line">                if (lua_isnumber(m_pState, nIndex) == 1) 
</span><span class="line">                { 
</span><span class="line">                        int nData = (int)lua_tonumber(m_pState, nIndex); 
</span><span class="line">                        pParam-&gt;SetData(&amp;nData, sizeof(int)); 
</span><span class="line">                } 
</span><span class="line">                return true; 
</span><span class="line">        } 
</span><span class="line">        else 
</span><span class="line">        { 
</span><span class="line">                pParam-&gt;SetData(tolua_tousertype(m_pState, nIndex, NULL), -1); 
</span><span class="line">                return true; 
</span><span class="line">        } 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>弹出一个参数并赋值。pParam-&gt;SetData(tolua_tousertype(m_pState, nIndex, NULL), -1);这句话同样，我在下一讲中详细介绍。 <br />
呵呵，好了，我们又进了一步，我们可以用这个函数绑定任意一个Lua函数格式。而代码不用多写，懒蛋的目的达到了。 <br />
呵呵，这一讲主要是介绍了一些基本知识，或许有点多余，但是我觉得是必要的，在下一讲中，我讲开始详细介绍如何绑定一个C++对象给Lua，并让Lua对其修改。然后返回结果。休息一下，休息一下先。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lua脚本在C++下的舞步(入门指引)（转）]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/12/lua-deep"/>
    <updated>2015-11-12T21:46:51+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/12/lua-deep</id>
    <content type="html"><![CDATA[<p>转帖来自：http://www.acejoy.com/bbs/viewthread.php?tid=1931&amp;extra=page%3D1</p>

<p>现在，越来越多的C++服务器和客户端融入了脚本的支持，尤其在网游领域，脚本语言已经渗透到了方方面面，比如你可以在你的客户端增加一个脚本，这个脚本将会帮你在界面上显示新的数据，亦或帮你完成某些任务，亦或帮你查看别的玩家或者NPC的状态。。。如此等等。</p>

<p>但是我觉得，其实脚本语言与C++的结合，远远比你在游戏中看到的特效要来的迅猛。它可以运用到方方面面的领域，比如你最常见的应用领域。比如，你可以用文本编辑器，写一个脚本语言，然后用你的程序加载一下，就会产生出很绚丽的界面。亦或一两句文本语言，就会让你的程序发送数据给服务器，是不是很酷呢？ </p>

<!--more-->

<p>本来我想，写一篇关于主流脚本语言Lua和Python的文章，但是感觉这样过于乏味，于是分开来一一介绍，相信对C++了解的你，看过我的文章后会对脚本语言这种东西产生浓厚的兴趣，我想起以前听的一个故事，当年Java的创造者讲课的时候，一开始先拿一个简单的不能简单的小例子，不断的扩展，最后成为一个复杂而完美的程序。今天我也就这样实验一下吧，呵呵。</p>

<p>当然，我本人不敢说对脚本语言了如指掌，只能说略微掌握一些，用过几年，偏颇之处请大家指正。 <br />
下面，开始吧，先说LUA！（本文面向初学者）<br />
Lua语言（http://www.lua.org/），想必不少程序员都听过，据我所知，由于《魔兽世界》里面对它的加载，它一下子变成了很多游戏开发者竞相研究的对象，至于这个巴西创造者么，我不过多介绍，大家有兴趣可以谷歌一下。其实网上有很多关于lua的教材和例子，说真的，对于当年的我而言，几乎看不懂，当时很郁闷，感觉Lua复杂的要命，有些惧怕，后来沉下心来一点点研究，觉得其实还是蛮简洁的。只是网上的资料或许偏向于某些功能，导致了逻辑和代码的复杂。后来总结，其实学习一种脚本语言，完全可以抱着放松的心态一点点的研究，反而效果会更好。</p>

<p>在讲代码之前，我要说Lua的一些特点，这些特点有利于你在复杂的代码调用中，清晰的掌握中间的来龙去脉。实际上，你能常常用到的lua的API，不过超过10个，再复杂的逻辑。基本上也是这么多API组成的。至于它们是什么，下面的文章会介绍。另外一个重要之重要的概念，就是栈。Lua与别的语言交互以及交换数据，是通过栈完成的。其实简单的解释一下，你可以把栈想象成一个箱子，你要给他数据，就要按顺序一个个的把数据放进去，当然，Lua执行完毕，可能会有结果返回给你，那么Lua还会利用你的箱子，一个个的继续放下去。而你取出返回数据呢，要从箱子顶上取出，如果你想要获得你的输入参数呢？那也很简单，按照顶上返回数据的个数，再按顺序一个个的取出，就行了。不过这里提醒大家，关于栈的位置，永远是相对的，比如-1代表的是当前栈顶，-2代表的是当前栈顶下一个数据的位置。栈是数据交换的地方，一定要有一些栈的概念。</p>

<p>好了，基础的lua语法不在这里讲，百度一下有很多。 <br />
先去http://www.lua.org/ 去下载一个最新的Lua代码（现在稳定版是lua-5.1.4）。它的代码是用C写的，所以很容易兼容很多平台。 </p>

<p>在linux下，目录src下就有专门的Makefile。很简单，啥都不用做，指定一下位置编译即可。 <br />
在windows下，以VS2005为例，建立一个空的静态库工程（最好不使用预编译头，把预编译头的选项勾去掉），然后把src下的所有文件（除了Makefile）一股脑拷到工程中去。然后将这些文件添加到你的工程中，编译，会生成一个<em>.llib(</em>是你起的lua库名)，行了，建立一个目录lib，把它拷过去，然后再建立一个include的文件夹，把你工程目录下的lua.h，lualib.h，lauxlib.h，拷贝过去。行了，拿着这两个文件夹，你就可以在你的工程里使用lua了。 <br />
行了，材料齐了，我们来看看怎么写一个简单的lua程序吧。<br />
建立一个文件，起名Sample.lua <br />
里面添加这样的代码。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function func_Add(x, y) 
</span><span class="line">   return x+y; 
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是一个标准的lua语法，一个函数，实现简单的a+b操作，并返回操作结果。 <br />
保存退出。 <br />
多一句嘴，在Lua里面，是可以支持多数据返回的。 <br />
比如你这么写： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function func_Add(x, y) 
</span><span class="line">   return x+y, x-y; 
</span><span class="line">end</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>意思是返回第一个参数是相加的结果，第二个是相减的结果，也是可以的。在lua里面没有类型的概念。当然，在C++接受这样的返回值的时候，也很简单，请往下看。 <br />
好了，材料齐备了，咱们来看看C++程序怎么调用它。 <br />
首先，建立一个类，负责加载这个lua文件，并执行函数操作，我们姑且叫做CLuaFn <br />
要加载这个lua文件，按照正常的思路，我们应该先加载，然后再调用不同的函数。恩，对了，咱们就这么做。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">extern “C” 
</span><span class="line">{ 
</span><span class="line">        #include “lua.h” 
</span><span class="line">        #include “lualib.h” 
</span><span class="line">        #include “lauxlib.h” 
</span><span class="line">};
</span><span class="line">
</span><span class="line">class CLuaFn 
</span><span class="line">{ 
</span><span class="line">public: 
</span><span class="line">        CLuaFn(void); 
</span><span class="line">        ~CLuaFn(void);
</span><span class="line">
</span><span class="line">        void Init();            //初始化Lua对象指针参数 
</span><span class="line">        void Close();         //关闭Lua对象指针
</span><span class="line">
</span><span class="line">		//加载指定的Lua文件 
</span><span class="line">        bool LoadLuaFile(const char* pFileName); 
</span><span class="line">        //执行指定Lua文件中的函数
</span><span class="line">        bool CallFileFn(const char* pFunctionName, int nParam1, int nParam2);
</span><span class="line">private: 
</span><span class="line">        lua_State* m_pState;   //这个是Lua的State对象指针，你可以一个lua文件对应一个。 
</span><span class="line">};</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>恩，头文件就这么多，看看，一点也不复杂吧，看了cpp我想你会更高兴，因为代码一样很少。我一个个函数给你们介绍。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void CLuaFn::Init() 
</span><span class="line">{ 
</span><span class="line">        if(NULL == m_pState) 
</span><span class="line">        { 
</span><span class="line">                m_pState = lua_open(); 
</span><span class="line">                luaL_openlibs(m_pState); 
</span><span class="line">        } 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>初始化函数，标准代码，没啥好说的，lua_open()是返回给你一个lua对象指针，luaL_openlibs()是一个好东西，在lua4，初始化要做一大堆的代码，比如加载lua的string库，io库，math库等等等等，代码洋洋洒洒一大堆，其实都是不必要的，因为这些库你基本都需要用到，除了练习你的打字能力别的意义不大，因为代码写法都是固定的。于是在5以后，Lua的创造者修改了很多，这就是其一，一句话帮你加载了所有你可能用到的Lua基本库。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void CLuaFn::Close() 
</span><span class="line">{ 
</span><span class="line">        if(NULL != m_pState) 
</span><span class="line">        { 
</span><span class="line">                lua_close(m_pState); 
</span><span class="line">                m_pState = NULL; 
</span><span class="line">        } 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>顾名思义，我用完了，关闭我的Lua对象并释放资源。呵呵，标准写法，没啥好说的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bool CLuaFn:: LoadLuaFile(const char* pFileName) 
</span><span class="line">{ 
</span><span class="line">        int nRet = 0; 
</span><span class="line">        if(NULL == m_pState) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn:: LoadLuaFile]m_pState is NULL./n”); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        nRet = luaL_dofile(m_pState, pFileName); 
</span><span class="line">        if (nRet != 0) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn:: LoadLuaFile]luaL_loadfile(%s) is file(%d)(%s)./n”, pFileName, nRet, lua_tostring(m_pState, -1)); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        return true; 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>呵呵，这个有点意思，加载一个Lua文件。 <br />
这里我要详细的说一下，因为Lua是脚本语言，加载lua文件本身的时候才会编译。 <br />
所以，推荐大家在加载文件的时候尽量放在程序的初始化中，因为当你执行luaL_dofile()函数的时候，Lua会启用语法分析器，去分析你的脚本语法是否符合Lua规则，如果你胡乱的传一个文件过去，Lua就会告诉你文件语法错误，无法加载。如果你的Lua脚本很大，函数很多，语法分析器会比较耗时，所以，加载的时候，尽量放在合适的地方，而且，对于一个Lua文件而言，反复加载luaL_dofile()除了会使你的CPU变热没有任何意义。</p>

<p>许你对printf(“[CLuaFn:: LoadLuaFile]luaL_loadfile(%s) is file(%d)(%s)./n”, pFileName, nRet, lua_tostring(m_pState, -1));这句话很感兴趣，这个在干什么？这里我先说lua_tostring(m_pState, -1)这是在干什么，还记得我说的Lua是基于栈传输数据的么？那么，如果报错，我怎么知道错误是什么？luaL_dofile标准返回一个int，我总不能到lua.h里面遍历这个nRet 是啥意思吧，恩，Lua创造者早就为你想好了，只不过你需要稍微动一下你的脑筋。Lua的创造者在语法分析器分析你的语法的时候，发现错误，会有一段文字告诉你是什么错误，它会把这个字符串放在栈顶。那么，怎么取得栈顶的字符串呢？lua_tostring(m_pState, -1)就可以，-1代表的是当前栈的位置是相对栈顶。当然，你也可以看看栈里面还有一些什么其他古怪的数据，你可以用1,2,3（这些是绝对位置，而-1是相对位置）去尝试，呵呵。不过，相信你得到的也很难看懂，因为一个Lua对象执行的时候，会用很多次栈进行数据交换，而你看到的，有可能是交换中的数据。那么，话说回来，这句话的意思就是”[CLuaFn:: LoadLuaFile]luaL_loadfile(文件名) is file(错误编号)(错误具体描述文字)./n”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bool CLuaFn::CallFileFn(const char* pFunctionName, int nParam1, int nParam2) 
</span><span class="line">{ 
</span><span class="line">        int nRet = 0; 
</span><span class="line">        if(NULL == m_pState) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]m_pState is NULL./n”); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        lua_getglobal(m_pState, pFunctionName);
</span><span class="line">
</span><span class="line">        lua_pushnumber(m_pState, nParam1); 
</span><span class="line">        lua_pushnumber(m_pState, nParam2);
</span><span class="line">
</span><span class="line">        nRet = lua_pcall(m_pState, 2, 1, 0); 
</span><span class="line">        if (nRet != 0) 
</span><span class="line">        { 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]call function(%s) error(%d)./n”, pFunctionName, nRet); 
</span><span class="line">                return false; 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        if (lua_isnumber(m_pState, -1) == 1) 
</span><span class="line">        { 
</span><span class="line">                int nSum = lua_tonumber(m_pState, -1); 
</span><span class="line">                printf(“[CLuaFn::CallFileFn]Sum = %d./n”, nSum); 
</span><span class="line">        }
</span><span class="line">
</span><span class="line">        return true; 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个函数是，传入函数名称和参数，去你的Lua文件中去执行。 <br />
lua_getglobal(m_pState, pFunctionName); <br />
这个函数是验证你的Lua函数是否在你当前加载的Lua文件中，并把指针指向这个函数位置。</p>

<p>lua_pushnumber(m_pState, nParam1);   &lt;—对应你的x参数 <br />
lua_pushnumber(m_pState, nParam2);   &lt;—对应你的y参数</p>

<p>这就是著名的压栈操作了，把你的参数压入Lua的数据栈。供Lua语法器去获得你的数据。 <br />
lua_pushnumber()是一个压入数字，lua_pushstring()是压入一个字符串。。。</p>

<p>那么你会问，如果我有一个自己的类型，一个类指针或者别的什么，我怎么压入？别着急，方法当然是有的，呵呵，不过你先看看如果简单的如何做，在下几讲中，我会告诉你更强大的Lua压栈艺术。 <br />
这里需要注意的是，压栈的顺序，对，简单说，就是从左到右的参数，左边的先进栈，右边的最后进栈。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">nRet = lua_pcall(m_pState, 2, 1, 0); </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这句话的意思是，执行这个函数，2是输入参数的个数，1是输出参数的个数。当然，如果你把Lua函数改成 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">return x+y, x-y; </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>代码需要改成nRet = lua_pcall(m_pState, 2, 2, 0); <br />
明白了吧，呵呵，很简单吧。 </p>

<p>当然，如果函数执行失败，会触发nRet，我这里偷了个懒，如果你想得到为什么错了？可以用lua_tostring(m_pState, -1)去栈顶找，明白？是不是有点感觉了？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lua_isnumber(m_pState, -1) </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这句话是判定栈顶的元素是不是数字。因为如果执行成功，栈顶就应该是你的数据返回值。 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int nSum = lua_tonumber(m_pState, -1); 
</span><span class="line">printf(“[CLuaFn::CallFileFn]Sum = %d./n”, nSum); </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个nSum就是返回的结果。 <br />
当然，你会问，如果 return x+y, x-y;我该怎么办？ </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">int nSum = lua_tonumber(m_pState, -1); 
</span><span class="line">int nSub = lua_tonumber(m_pState, -2); </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>搞定，看见没。按照压栈顺序。呵呵，是不是又有感觉了，对，栈就是数据交互的核心。对Lua的理解程度和运用技巧，其实就是对栈的灵活运用和操作。 </p>

<p>好了。你的第一个Lua程序大功告成！竟然不是Hello world，呵呵。 <br />
好了，我们看看Main函数怎么写吧，相信大家都会写。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#include “LuaFn.h”
</span><span class="line">
</span><span class="line">int _tmain(int argc, _TCHAR* argv[]) 
</span><span class="line">{ 
</span><span class="line">        CLuaFn LuaFn;
</span><span class="line">
</span><span class="line">        //LuaFn.InitClass();
</span><span class="line">
</span><span class="line">        LuaFn.LoadLuaFile(“Sample.lua”); 
</span><span class="line">        LuaFn.CallFileFn(“func_Add”, 11, 12); 
</span><span class="line">        getchar();
</span><span class="line">
</span><span class="line">        return 0; 
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>行了，Build一下，看看，是不是你要的结果？如果是，贺喜你，你已经迈出了Lua的第一步。 <br />
洋洋洒洒写了一个小时，喝口水吧，呵呵，下一讲，我将强化这个LuaFn类，让它给我做更多的事情。呵呵，最后，我会让你打到，用Lua文件直接画出一个Windows窗体来。并在上面画出各种按钮，列表，以及复选框。是不是感觉很酷？用文本去创造一个程序？很激动吧，恩，确实，Lua能给你做到。只要你有耐心看下去。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function, Closures, up values ]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/11/function-closure-upvalue"/>
    <updated>2015-11-11T19:01:05+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/11/function-closure-upvalue</id>
    <content type="html"><![CDATA[<p>未找到原文出处，从网络博客<a href="http://blog.chinaunix.net/uid-52437-id-2108789.html">天道酬勤,重剑无锋</a>上转载。</p>

<p>Lua 中的函数是一阶类型值(first-class value)，定义函数就象创建普通类型值一样(只不过函数类型值的数据主要是一条条指令而已)，所以在函数体中仍然可以定义函数。<br />
<!--more--></p>

<p>假设函数f2定义在函数f1中，那么就称f2为f1的内嵌(inner)函数，f1为f2的外包(enclosing)函数，外包和内嵌都具有传递性，即f2的内嵌必然是f1 的内嵌，而f1的外包也一定是f2的外包。内嵌函数可以访问外包函数已经创建的所有局部变量，这种特性便是所谓的词法定界(lexical scoping)，而这些局部变量则称为该内嵌函数的外部局部变量(external local variable)或者upvalue(这个词多少会让人产生误解，因为upvalue实际指的是变量而不是值)。试看如下代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function f1(n) -- 函数参数也是局部变量
</span><span class="line">  local function f2()
</span><span class="line">   print(n) -- 引用外包函数的局部变量 
</span><span class="line">  end 
</span><span class="line">  return f2
</span><span class="line">end
</span><span class="line">g1 = f1(1979)
</span><span class="line">g1() -- 打印出1979
</span><span class="line">g2 = f1(500)
</span><span class="line">g2() -- 打印出500</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>当执行完g1 = f1(1979)后，局部变量n的生命本该结束，但因为它已经成了内嵌函数f2(它又被赋给了变量g1)的upvalue，所以它仍然能以某种形式继续“存活”下来，从而令g1()打印出正确的值。</p>

<p>可为什么g2与g1的函数体一样(都是f1的内嵌函数f2的函数体)，但打印值不同？这就涉及到一个相当重要的概念——闭包(closure)。<br />
事实上，Lua编译一个函数时，会为它生成一个原型(prototype)，其中包含了函数体对应的虚拟机指令、函数用到的常量值(数，文本字符串等等)和一些调试信息。在运行时，每当Lua执行一个形如function…end 这样的表达式时，它就会创建一个新的数据对象，其中包含了相应函数原型的引用、环境(environment，用来查找全局变量的表)的引用以及一个由所有upvalue引用组成的数组，而这个数据对象就称为闭包。由此可见，函数是编译期概念，是静态的，而闭包是运行期概念，是动态的。</p>

<p>g1和g2的值严格来说不是函数而是闭包，并且是两个不相同的闭包，而每个闭包可以保有自己的upvalue值，所以g1和g2打印出的结果当然就不一样了。虽然闭包和函数是本质不同的概念，但为了方便，且在不引起混淆的情况下，我们对它们不做区分。</p>

<p>使用upvalue很方便，但它们的语义也很微妙，需要引起注意。比如将f1函数改成：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function f1(n) 
</span><span class="line">  local function f2() 
</span><span class="line">     print(n) 
</span><span class="line">     end
</span><span class="line">   n = n + 10 
</span><span class="line">   return f2
</span><span class="line">end
</span><span class="line">g1 = f1(1979)
</span><span class="line">g1() -- 打印出1989</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>内嵌函数定义在n = n + 10这条语句之前，可为什么g1()打印出的却是1989？upvalue实际是局部变量，而局部变量是保存在函数堆栈框架上(stack frame)的，所以只要upvalue还没有离开自己的作用域，它就一直生存在函数堆栈上。这种情况下，闭包将通过指向堆栈上的upvalue的引用来访问它们，一旦upvalue即将离开自己的作用域(这也意味着它马上要从堆栈中消失)，闭包就会为它分配空间并保存当前的值，以后便可通过指向新分配空间的引用来访问该upvalue。</p>

<p>当执行到f1(1979)的n = n + 10时，闭包已经创建了，但是n并没有离开作用域，所以闭包仍然引用堆栈上的n，当return f2完成时，n即将结束生命，此时闭包便将n(已经是1989了)复制到自己管理的空间中以便将来访问。弄清楚了内部的秘密后，运行结果就不难解释了。</p>

<p>upvalue还可以为闭包之间提供一种数据共享的机制。试看下例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">function Create(n) 
</span><span class="line">  local function foo1() 
</span><span class="line">    print(n) 
</span><span class="line">  end
</span><span class="line">  local function foo2() 
</span><span class="line">    n = n + 10 
</span><span class="line">  end
</span><span class="line">  return foo1,foo2
</span><span class="line">end
</span><span class="line">f1,f2 = Create(1979)
</span><span class="line">f1() -- 打印1979 
</span><span class="line">f2() f1() -- 打印1989 
</span><span class="line">f2() f1() -- 打印1999</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>f1, f2这两个闭包的原型分别是Create中的内嵌函数foo1和foo2，而foo1和foo2引用的upvalue是同一个，即Create的局部变量 n。<br />
前面已说过，执行完Create调用后，闭包会把堆栈上n的值复制出来，那么是否f1和f2就分别拥有一个n的拷贝呢？其实不然，当Lua发现两个闭包的upvalue指向的是当前堆栈上的相同变量时，会聪明地只生成一个拷贝，然后让这两个闭包共享该拷贝，这样任一个闭包对该upvalue进行修改都会被另一个探知。<br />
上述例子很清楚地说明了这点：每次调用f2都将upvalue的值增加了10，随后f1将更新后的值打印出来。upvalue的这种语义很有价值，它使得闭包之间可以不依赖全局变量进行通讯，从而使代码的可靠性大大提高。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通关The Last of US的感悟]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/01/the-last-of-us-you-xi"/>
    <updated>2015-11-01T19:31:52+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/01/the-last-of-us-you-xi</id>
    <content type="html"><![CDATA[<p><img src="http://www.newtomato.me/images/1446377446064.jpg" alt="Alt text" /></p>

<p>今年年初的时候，在同事那里听说了the last of us的这款游戏，同事说的眉飞色舞，吹捧拔高至此毫不吝啬，甚至不惜把他家里的PS3拿给我让我玩。当时的我甚至没有买过一台PS3，或者一张游戏碟片。<br />
自然一点想玩的想法都没有，婉言谢绝了同事的好意。</p>

<!--more-->

<p>直到很多人都在讨论这款游戏，正巧顽皮狗重制版的the last of us开卖， 可以在PS4上看到更清晰的画面了，于是自己也就开始卖了一台。</p>

<p>顺便在淘宝上买了一个数字版本的游戏。非常便宜才花费了30元。此处真的应该良心的说，这款游戏做的不知比别的手游或者网游高多少档次了，那些动辄就有玩家充值上千上万。而这款游戏你只要花费30元就能玩的超爽，从头到尾不需要在冲任何钱。真的是良心到家了呀。</p>

<p>由于是第一次上手玩这样的游戏，起初的镜头摇晃是非常不适应的。但是玩上几关就被剧情吸引到了。简直是停不下手。时间悄无声的就到了夜里3点，在玩一会儿，就到了4点。真的是非常的让人欲罢不能。除了最后一个绝地模式没有玩之外。剩下的模式全被我一一通关。甚至已经玩过十几篇普通难度。痴迷到的程度已经让我决定顽皮狗一生的粉！</p>

<p>再次我也做一次推荐。甚至终身的推荐！是真正爱玩游戏的人，都应该是尝试一下这款游戏。绝对会给你难以言明的感受。<br />
这款游戏好在什么地方呢？我没有玩过其他的PS游戏，所以我的理由仅代表我个人的感受。</p>

<blockquote>
  <p>游戏的操作。游戏的操作相当的简单，几个按键就能快速的反应。相对于我后来玩到的其他PS游戏真的是很简单。游戏是简洁的UI界面。快速切换武器，镜头移动，都很简单舒服。我想应该是顽皮狗想让玩家的注意力更多的放在故事剧情上而不要被过多的UI操作挡在了外面。</p>
</blockquote>

<blockquote>
  <p>故事的剧情。在末日残酷中失去心爱女儿的大叔乔，残忍冷酷内敛，话不多但是杀人不眨眼。和自己的伙伴泰丝无意中接了一桩“偷运货物”到城外的活儿。而这个货就是我们的女主人公小女孩艾丽。小女孩艾丽在末世中出生，性格独立好强，面对残酷的环境，比大叔更有过之而无不及的样子。两个人经历种种，从一开始泰丝，后来的比尔，和汤姆兄弟以及大叔的弟弟以及后来的食人者大卫和火影皇后的故事。从一开始的陌生，彼此嫌隙。到后来相互扶持，相互照顾的深刻感情。都让给我感动到哭！游戏后来还有专门的一个DLC章节，讲述大叔受重伤。艾丽出去给他找药那段。那个冬天真的是非常的残酷。她独自一个人四处躲避出现的僵尸和前抢他们人。以前光看到大叔对艾丽的照顾，而此时我们才真正感受到了艾丽对大叔的照顾和无所畏惧的勇气。两个人的感情已经不能够用简单的伙伴关系来界定了。</p>
</blockquote>

<blockquote>
  <p>游戏的音乐。<strong>《最后生还者》的音乐作曲家古斯塔沃·桑塔欧拉拉（Gustavo Santaolalla）是一位具有多重身份的音乐人：电影配乐、专辑制作、组建另类电音摇滚探戈乐队Bajofondo等；并曾两度问鼎奥斯卡最佳电影配乐奖与金球奖最佳配乐奖。</strong> 这是我在百度百科上找到的注释。配乐简直大赞！游戏通关后，那种末日的苍凉悲壮孤独绝望的音乐响起的时候，我真个人呆在沙发里，无法自拔。故事似乎未完，可是故事已经结束。接下来呢？内心缺失了好大一块，急需找人来填补。</p>
</blockquote>

<p>如今，我已经几个月没有在摸过the last of us了。但是想到这个游戏，我心依然澎湃的想要推荐给大家。他不仅仅是一款游戏作品，更是一场惊险的冒险。玩家参与进来，一关一关的通过，它带给我们通关的成就感之外，还有对两位主人公的牵挂和担心。每个人在末世中都想活下来，僵尸不是最可怕的，可怕的是人心。僵尸在明处，而人在暗处给我们一刀。乔也曾说过自己做过那种事。他也不是好人。好人在末世中只有被人吊打烧死的结局。人性一直如此，这也为乔最终没有拯救人类买下了伏笔。</p>

<p>这个故事值得细想和回味的故事太多，泰丝和乔的故事，他们是一对生意伙伴，是患难之交，彼此依靠。彼此之间是否还有更深刻的感情呢？泰丝似乎有很多感情债，为什么和乔之间没有呢？乔主动给泰丝让路，说女士优先，乔说过，我也是很浪漫的。这明显是赤裸裸的勾引。说明乔有意和泰丝发展关系。但是泰丝并不同意。我想泰丝是真的把乔看成了自己的生死之交。是非常相信乔的，才不会和乔之间产生多余的感情。这样会对他们彼此都会产生更多的麻烦。像泰丝那样处处留情的人，和乔如果有一段，那么以后他们之间不再是伙伴，或者就成了路人了。我想泰丝想的非常明白。</p>

<p>乔的朋友比尔，一个同性恋。这个小小的细节还是在后来玩过很多遍才看明白。里面有一个小小的剧情就是乔找到了一封比尔伙伴查尔斯的信交给了比尔。以及效果娘艾丽偷拿了比尔的肌肉男漫画。我才明白比尔是这么一个人。比尔是非常聪明的人，会利用僵尸来为自己做掩护。懂得制作炸弹。给乔弄到了可以发动的汽车。同时你能看出比尔是一个很讲义气的人，乔来要求比尔还人情，比尔大可以不换，但是他答应了。还有后面，他扔给乔一个油管，都让我觉得比尔是个好人，只是面容凶煞了点。桥走后，我反而更加担心比尔，他一个人留在了小镇上。小镇上只剩下僵尸与他为伴。以后他怎么活下去呢？泰丝死了，他的Parter去了，会有人来看他吗？这样活下去有什么意义呢？看到乔和艾丽在外面遇到的麻烦，我想比尔这样也挺好，至少他擅长和僵尸打交道，他可以杀死僵尸。而不用被其他人类杀死。</p>

<p>后面遇到的汤姆兄弟，在下水道那一段，又不少细节我们会发现有一个艾需的人。他来自大海，发生人类末日危机的时候，他在海里捕鱼，躲过了一劫，后来他用光所有的物资，来到了岸上，找到了一个下水道，他躲在了里面，然后遇到了其他人类，他便和他们一起住在了下水道里，这似乎是一个躲避外界最好的世外桃源。这里有儿童，有教室，还有收集雨的装置，看得出来没有被感染的时候，他们在里面过了一段幸福快乐的时光了，但是不幸最后还是发生了。艾需和几个同伴一起逃了出来。至于是否活了下来，真的不可而知。这些小小的细节都是顽皮狗很用心之处，他寥寥几笔，便将艾需这个人饱满的出现在我们面前。</p>

<p>最让我印象深刻的要数小姑娘艾丽一个人对付食人大叔大卫了。在那个咖啡馆里，我简直是吓坏了，手紧张的握不住手柄。尤其是在后面的一个模式，没有了聆听功能。我无法判定大叔在那个方位，只能靠眼睛去观察。那一刻我就是艾丽，躲是躲不过的，只能坚持的玩下去，我把希望寄托在大叔乔身上，但是最后绕来绕去大叔乔还是没来，游戏半点提示没有，我找准机会捅了大卫一刀。但是他这个大boss竟然没死。还拿起砍刀对准我。被砍死无数次才明白，只能靠自己。真是紧张刺激。现在我已经顺利通关很多次，但是每次玩到杀死大卫那关，我还是不自主的紧张起来。大卫曾说过，这个冬天非常残酷。想来也是顽皮狗的伏笔，这个冬天过去之后，艾丽真的变得不同了。很少再吹起口哨。</p>

<p>到最后的解决，乔一层层的杀过去，救出了艾丽。而我也不自主的为其叫好。他放弃拯救人类，他只想救出艾丽。人类有自身的命运，不是艾丽一个人可以拯救的。这不是她一个人的责任，为何要她来背负。聪明的艾丽醒来就知道乔在撒谎。但是她没有戳破，她死死的盯着乔，要乔给她承诺，那个眼神真的好特别，就像我自己撒了谎，我自己都犹豫起来。而她说，ok。看似她不在问，但是更像是弄了一把锁深深的把我锁在了这个秘密中。不知以后会如何？</p>

<p>至少他们会在水坝安静的呆上一段日子。</p>

<p><img src="http://www.newtomato.me/images/1446377484270.jpg" alt="Alt text" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由周四事情引发的思考]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/01/you-zhou-si-shi-qing-yin-fa-de-si-kao"/>
    <updated>2015-11-01T17:06:47+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/01/you-zhou-si-shi-qing-yin-fa-de-si-kao</id>
    <content type="html"><![CDATA[<p>周四和团队中的一人有些小摩擦，当时被他一下子噎着了，不知道怎么说才好。事后为此郁闷满怀。心情大坏，甚至将此负能量传染给了周围的人。</p>

<p>此事的起因说到本质，便是我想让他能够讲责任负起来，做事能有效率有些，而他却并不以为意。当时的语气急躁了一些，语气便也急冲了起来，尤其当时看到他散漫不负责任的态度，让我更加有些急火攻心。类似这样的冲突发生了不止一次。可能大家也会遇到这样的情况，尤其是在创业团队，为了一个功能具体的细节的争吵，操作不当就会出现这样的情况。</p>

<!--more-->

<p>现在冷静下来想想，当时真是没有必要要那么冲动，什么问题不能够解决呢？自己当时那么做反而是最最下策的。在此我为这件事情做一个总结，也算是从以往那些争吵中学到些经验，促进自己的成长。</p>

<p>与人沟通什么最重要呢，能够让彼此都理解和明白怎么去解决问题？是目的最重要吗，直接了当的说了自己的需求和对方的需求，就可以了？还是聊天时候的态度最重要，如春风般温暖的微笑就能够让对方理解你的想法么？我试过前者，也用过后者，但是毕竟自己是个性子急躁的人，做得这些像是束缚了自己的想法，也像是在哄着别人，时间久了自己也觉得辛苦。找到合适自己的沟通方法才是最重要的.尤其是在团队里面，若能稍微培养一些察言观色的本事，那自然再好不过了，知道说什么，该做什么，与人沟通无非就是一个心理交流，如果能够让对方心悦诚服的和你合作，且合作愉快，那才是沟通的最高境界。可是如果这种本事没有培养起来的时候，怎么办呢？那就记住一条，我们沟通的目的是解决问题，不是将问题升级化。所以以此为念，态度自然便朝着解决问题的方向去了。</p>

<p>其次如果到时真的不可避免的争吵起来了，那么切记要给对方留有空间余地，切不要把争吵带到死胡同中，否则彼此都会拼命反击，会生出更多问题出来。适可而止的争吵既可以发泄当时的怒火又不会伤及彼此的感情。待下次大家都冷静了再找时间沟通便可。</p>

<p>再者，如果有些问题是自己出错了就不要强撑着自己不认错。总会有人在某处比你更厉害，看的更深，研究的更认真，那就应该向这样的人学习。自己愚蠢些没有关系，整个团队能够向前走并且和谐融洽才是最为重要的。</p>

<p>曾经有个出租车司机和我讲过一个道理，他说不要小瞧了这个世界，付出总会有回报，你付出的越多得到的也会越多。你选择了这份工作，可以不去热爱它，但是你要为他负责，不仅仅要知道它能够给你带来好处，快乐，用处，还会给你带来痛苦，折磨，压抑，不公。所有的东西都有两面性，这样想来，一切都便释怀了。什么事情都不是问题。只要记得自己当初创业的热情和期许，这之间总会遇到不同的人，总会发生不满的事情，总会有超出预期的问题，但是不忘初心放得始终，不遭此磨难便用不知道自己能否真的成才。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lua基础知识-语法]]></title>
    <link href="http://www.newtomato.me/blog/2015/11/01/lua-basic"/>
    <updated>2015-11-01T16:51:31+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/11/01/lua-basic</id>
    <content type="html"><![CDATA[<p>lua是一门脚本语言，他是以c语言的标准编写而成，因此天生能够和c语言无缝合作。并且在所有的脚本引擎中，lua是速度最快的。</p>

<p>lua语言非常的简单，可能你看完这一篇文章，就可以自己编写自己的lua文件了。基本用不了30分钟<br />
<!--more--><br />
首先我们讲到运行。怎么运行lua文件呢? 但是的运行一个lua文件，需要一个编译器。请到lua的<a href="http://www.lua.org/download.html">官方网站</a>下载最新的lua编译器.<br />
下载之后是一个zip文件，解压缩之后，里面有一个doc文档目录，src源码目录还有一个ReadME文件和makefile文件。makefile是用来执行make命令。<br />
为了安装我们可以查看他的帮助文档，在doc/readme.html<br />
或者直接在命令行中输入<code>make</code>，他们将支持的平台显示出来给你看。我使用的是苹果电脑。所以我在命令行中输入<code>make macosx</code>，之后make就开始工作，安装lua，并且把他放到了我们的环境变量下，这样我们在命令行中可以直接输入<code>lua</code>来调用lua。</p>

<p>在命令行中输入lua，会出现如下的样子<br />
<img src="http://www.newtomato.me/images/1446367451271.png" alt="Alt text" /></p>

<p>是不是和python或者metlab有点像呢？</p>

<p>此时在lua命令行模式下面，我们输入<code>print("abc")</code> ,看它能够很快的给我一个反馈<br />
<img src="http://www.newtomato.me/images/1446367541807.png" alt="Alt text" /></p>

<p>或者我们不安装lua, 那么可以通过官方提供的一个<a href="http://www.lua.org/cgi-bin/demo">简单的demo</a>来运行我们想要的结果.</p>

<p>此处还提供了一个默认的打印函数，可以打印复杂的数据结构</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="lua"><span class="line"><span class="kd">local</span> <span class="n">seen</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">
</span><span class="line"><span class="k">function</span> <span class="nf">dump</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">	<span class="n">seen</span><span class="p">[</span><span class="n">t</span><span class="p">]</span><span class="o">=</span><span class="kc">true</span>
</span><span class="line">	<span class="kd">local</span> <span class="n">s</span><span class="o">=</span><span class="p">{}</span>
</span><span class="line">	<span class="kd">local</span> <span class="n">n</span><span class="o">=</span><span class="mi">0</span>
</span><span class="line">	<span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">		<span class="n">n</span><span class="o">=</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span> <span class="n">s</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="n">k</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line">	<span class="nb">table.sort</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">	<span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="k">in</span> <span class="nb">ipairs</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">		<span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>
</span><span class="line">		<span class="n">v</span><span class="o">=</span><span class="n">t</span><span class="p">[</span><span class="n">v</span><span class="p">]</span>
</span><span class="line">		<span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="o">==</span><span class="s2">&quot;</span><span class="s">table&quot;</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">seen</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="k">then</span>
</span><span class="line">			<span class="n">dump</span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">i</span><span class="o">..</span><span class="s2">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class="line">		<span class="k">end</span>
</span><span class="line">	<span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们在输入框中接着输入</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="lua"><span class="line"><span class="kd">local</span> <span class="n">userData</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">nick&quot;</span><span class="p">,</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">}</span>
</span><span class="line"><span class="n">dump</span><span class="p">(</span><span class="n">userData</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行之后即可以看到这个userData的数据结构。</p>

<p>和dump相比起来，print就是最轻量级别的。<br />
我们可以用print来打印最基本的数据结构，比如字串，数字等。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="lua"><span class="line"><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">i am a developer &quot;</span><span class="p">)</span>
</span><span class="line"><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">this is a number &quot;</span> <span class="o">..</span> <span class="mi">30</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看，对于此处打印这样是不是非常的简单？只有两个函数就可以搞定所有的一切。那么为什么lua这么简单呢？<br />
这是因为lua的数据结构就非常的简单，他没有其他语言那么多的东西，他可以完全的把所有的东西都打印给你看。所有的一切你都可以看成是一张表格。或者说是字典。我称之为万能的table。</p>

<p>至此，安装lua就已经完成。如果你顺利走到这一步，那么就离成功就差一点点的距离了。</p>

<p>接下来我们简单的介绍一下lua的基本数据结构。和其他语言一样，lua自身也支持基本的数据结构。主要number， boolean,,string,nil, userdata, function, thread, table。</p>

<ol>
  <li>number。是的，就是浮点数。它没有int类型，用浮点的number可以帮助我们处理一切与数字相关的操作。</li>
  <li>bool类型，true or false。唯一需要注意的就是在lua里面0为真。只有nil和false才为假。</li>
  <li>String类型，即字串。字串有不少API可以使用。字串的查找，替换，比较，分割。长度，大小写转换等，与字串相关的就是格式化输出某些字串。比如输出i am %{张三}，i am from %{北京} 。 如果是字符串拼接，就是如下的操作<br />
str = “i am “..张三 .. “,i am from” .. 北京<br />
但是如果使用格式化输出，就显得很好看，易懂 。<br />
str = string.format(i am %s,i am from %s, 张三,北京)</li>
</ol>

<p>看这样，是不是方便了很多？</p>

<ol>
  <li>Nil类型，用来检测一个变量是否可以用。比如一边量声明了后，但是没有赋值，那么此变量在使用的时候就要慎重。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="lua"><span class="line"><span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">nil</span><span class="p">)</span> <span class="k">then</span>
</span><span class="line">	<span class="k">return</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>table类型。在lua中table是一个非常普遍的要使用的结构，他的语法如下<br />
local a = {}<br />
a[“name”] = “aaaa”<br />
a[“age”] = 11<br />
这和java语言中的字典数据结构很像，但是有不同，在lua中table可以当成数组使用，比如上面的a可以是一个数组进行for循环。</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="lua"><span class="line"><span class="k">for</span> <span class="n">key</span><span class="p">,</span><span class="n">value</span> <span class="k">in</span> <span class="nb">pairs</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">do</span>
</span><span class="line">	<span class="nb">print</span><span class="p">(</span><span class="nb">string.format</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">key is %s,vaue is %s&quot;</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">))</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以删除table的某一个key，语法 <code>a["age"] = nil</code> , 这样就非常方便的将一个键置空，此变量就不存在了。</p>

<p>上面的a并非一个标准的table，标准的table即他们key不是string类型而是number类型，且number保持连续。<br />
local a = {}<br />
a[1] = “xxx”<br />
a[2] = “xxx”<br />
a[3] = “xxx”<br />
table.insert(a, “bbbb”)<br />
table.insert(a,1,”ccc”)<br />
table.remove(a,3)<br />
这样我们可以简单的向a插入数据，像一个正常的数组那样去操作a。lua还提供了另一个for循环使用的api专门给予这样标准的table，即ipairs。他的功能和上面的pairs一样。但是必须是标准的table。</p>

<p>table可以嵌套。table中有table，可以理解成多维数组。</p>

<ol>
  <li>Function类型。即函数类型。<br />
函数可以当成一个变量来使用。也可以作为参数传递给别的函数调用。<br />
简单的函数结构如下</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="lua"><span class="line"><span class="kd">local</span> <span class="n">myfunc</span> <span class="o">=</span> <span class="k">function</span><span class="p">()</span>
</span><span class="line">	<span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">i am function&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此处的定义就是一个局域函数，即只能够在定义他的范围域内使用。不能作为全局函数使用，那么怎么才能作为全局函数呢？<br />
注意到他前面的local了没？我上面定义的变量也有这一个修饰词，有他就表示后面定义的都是局部的，不作为全局。去掉，那么就是全局的函数了。</p>

<ol>
  <li>userdata类型，顾名思义就是用户的数据结构，最常用的情况就是我们将lua和c进行绑定，可以使用c定义的很多数据结构，那些c定义的数据结构怎么告诉lua呢？让lua来调用，就是将他们转换成了userdata类型。lua才能够顺利的调用他们。具体是怎么转换的呢？那就涉及到lua运行时候的绑定，具体的函数如下</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="lua"><span class="line"><span class="n">LUA_API</span> <span class="n">void</span> <span class="n">lua_pushlightuserdata</span> <span class="p">(</span><span class="n">lua_State</span> <span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="n">void</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">  <span class="n">lua_lock</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
</span><span class="line">  <span class="n">setpvalue</span><span class="p">(</span><span class="n">L</span><span class="o">-&gt;</span><span class="n">top</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
</span><span class="line">  <span class="n">api_incr_top</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
</span><span class="line">  <span class="n">lua_unlock</span><span class="p">(</span><span class="n">L</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>此段涉及到比较深的内容，以后我们在深入细讲。</p>

<ol>
  <li>Thread 类型， 即线程。lua的线程不是真正的线程。关于线程开发使用也是比较复杂的部分。可以放到以后在单开一张。</li>
</ol>

<p>我们平时用到的最后就是前6种类型。<br />
此时你是否觉得lua很简单? 是的，就是这么简单。尤其是在游戏开发过程中，为了达到能够自动更新的目的，大部分的项目都是使用lua，他简单灵活的语法和较少的限制对于我们的开发简直就是格外的贴心。剩下的就是他提供的集中API，比如如何操作table，如何将字串和数字进行转换。这些都是具体的API，用得到的时候查看帮助文档就能够很快查阅得到。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GIT常用方法]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/30/git-basic"/>
    <updated>2015-10-30T10:58:35+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/30/git-basic</id>
    <content type="html"><![CDATA[<p>使用Git作为代码管理的工具，是一种常见的方式。相对于其他的代码管理工具，Git灵活，易切换。而且很方便和别人交互。<br />
简单地介绍一下GIT的工作流程<br />
<!--more--><br />
首先，创建我们自己的代码仓库。前提是我们自己的电脑上已经安装过了git。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"> <span class="n">git</span> <span class="n">init</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后新增一个文件。随便写点什么，比如readMe</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">echo</span> <span class="n">hello</span><span class="p">,</span><span class="n">world</span><span class="o">&gt;</span> <span class="n">README</span>
</span><span class="line"><span class="n">git</span> <span class="n">add</span> <span class="n">README</span>
</span><span class="line"><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span><span class="s">&quot;first commit &quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>配置git的用户信息</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="s">&quot;Example Surname&quot;</span>
</span><span class="line"><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="s">&quot;your.email@gmail.com&quot;</span>
</span><span class="line"><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="k">global</span> <span class="n">push</span><span class="o">.</span><span class="n">default</span> <span class="s">&quot;matching&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>到此我们就可以在自己本地的仓库上做任何的事情了。但是只是在本地仓库并未能够和其他人合作。那么我们需要一个服务器做中转，这样我们提交过去，别人也可以在那里获取到最新的代码。<br />
因此我们需要到github或者bitbucket或者其他的提供git服务的网站上，申请一个仓库的链接。<br />
比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span><span class="nd">@github.com</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">your_name</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">your_res_name</span><span class="p">}</span><span class="o">.</span><span class="n">git</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们要做的就是将自己的代码仓库和这个地址联系起来。使用如下命令就可以达到我们的目的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin</span> <span class="n">git</span><span class="nd">@github.com</span><span class="p">:</span><span class="err">$</span><span class="p">{</span><span class="n">your_name</span><span class="p">}</span><span class="o">/</span><span class="err">$</span><span class="p">{</span><span class="n">your_res_name</span><span class="p">}</span><span class="o">.</span><span class="n">git</span>
</span><span class="line"><span class="n">git</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么接下来我们还能够做什么呢？我们能够做更多地事情。<br />
&gt; 创建分支</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">b</span> <span class="n">new_branch_name</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>以master为准创建一个分支，名字是new_branch_name<br />
&gt; 删除分支</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">d</span>  <span class="n">new_branch_name</span>
</span><span class="line"><span class="c">#彻底删除</span>
</span><span class="line"><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">D</span>  <span class="n">new_branch_name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<blockquote>
  <p>分支重新命名</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"> <span class="n">git</span> <span class="n">branch</span> <span class="p">(</span><span class="o">-</span><span class="n">m</span> <span class="o">|</span> <span class="o">-</span><span class="n">M</span><span class="p">)</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">oldbranch</span><span class="o">&gt;</span><span class="p">]</span> <span class="o">&lt;</span><span class="n">newbranch</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将oldbranch改名为newbranch</p>

<blockquote>
  <p>提交代码<br />
我们在自己的工作区，写了部分的代码之后，需要提交。但是提交有两种含义。一种是本地提交。一种是远端提交。本地提交只有自己看得见。但是远端提交则就是提到了服务器上。大家都可以看得到。</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#将自己的修改都添加到本地仓库</span>
</span><span class="line"><span class="n">git</span> <span class="n">add</span> <span class="n">xxx</span>
</span><span class="line"><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span><span class="s">&quot;我的修改&quot;</span>
</span><span class="line"><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">new_branch_name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>git commit实现的就是本地提交。git push实现的就是远端提交。</p>

<blockquote>
  <p>更新仓库<br />
更新仓库就是将远端的东西都拿下来。简单地命令如下</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">pull</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>即是更新当前分支与远端分支保持一致。<br />
但是这种方式相当于将远端分支的所有提交fetch 下来，然后做merge操作。类似如下的操作</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span><span class="o">/</span><span class="n">new_branch_name</span>
</span><span class="line"><span class="n">git</span> <span class="n">merge</span> <span class="n">origin</span><span class="o">/</span><span class="n">new_branch_name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这种方式简单，但是会让提交的显得混乱。还有另一种方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span><span class="o">/</span><span class="n">new_branch_name</span>
</span><span class="line"><span class="n">git</span> <span class="n">rebase</span> <span class="n">origin</span><span class="o">/</span><span class="n">new_branch_name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>merge和rebase的不同之处在于，rebase是new_branch_name的本地提交，以远端仓库的最后一次提交为准，挨个的增长上去。提交就显得很有序。</p>

<blockquote>
  <p>检查提交记录</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="n">format</span><span class="p">:</span><span class="s">&#39;%Cred</span><span class="si">%h%</span><span class="s">Creset -%C(yellow)</span><span class="si">%d</span><span class="s">%Creset </span><span class="si">%s</span><span class="s"> %Cgreen(</span><span class="si">%c</span><span class="s">r)%Creset&#39;</span> <span class="o">--</span><span class="n">abbrev</span><span class="o">-</span><span class="n">commit</span> <span class="o">--</span><span class="n">date</span><span class="o">=</span><span class="n">relative</span> <span class="o">--</span><span class="n">name</span><span class="o">-</span><span class="n">status</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们可以通过<code>gitk&amp;</code> 的方式查看文件的日志。有些时候我们也可以通过命令行更为直观的看到提交日志。<br />
如同上面的命令。在命令行中直接回车，你会看到意外地惊喜。</p>

<blockquote>
  <p>修改提交记录<br />
这里的修改指的是提交到本地仓库没有提交到远端。如果已经提交到了远端，一般是改不了的。</p>
</blockquote>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">rebase</span> <span class="o">-</span><span class="n">i</span> <span class="n">head</span><span class="o">~</span><span class="n">n</span>
</span><span class="line">
</span><span class="line"><span class="c"># Commands:</span>
</span><span class="line"><span class="c"># p, pick = use commit （使用本次提交）</span>
</span><span class="line"><span class="c"># r, reword = use commit, but edit the commit message（使用本次提交，但是要修改提交的message）</span>
</span><span class="line"><span class="c"># e, edit = use commit, but stop for amending（使用本次提交，但是禁止追加操作）</span>
</span><span class="line"><span class="c"># s, squash = use commit, but meld into previous commit（使用本次提交，但是要合并到上一次）</span>
</span><span class="line"><span class="c"># f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message（和squash一样，但是不使用本次的提交信息）</span>
</span><span class="line"><span class="c"># x, exec = run command (the rest of the line) using python（运行python命令）</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上面的命令可以讲从head到第head-n次的提交修改进行修改。比如修改commit的信息和将几个提交合并在一次。</p>

<blockquote>
  <p>git补丁的创建及应用<br />
创建补丁的方式有两种，一个是git diff，另一个git format-patch </p>
</blockquote>

<p>git format-patch的命令方法:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#将当前分支超前master的commit做成补丁</span>
</span><span class="line"><span class="n">git</span> <span class="n">format</span><span class="o">-</span><span class="n">patch</span> <span class="o">-</span><span class="n">M</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#hashcode之前n个提交做成补丁，hashcode不写，默认是head</span>
</span><span class="line"><span class="n">git</span> <span class="n">format</span><span class="o">-</span><span class="n">patch</span> <span class="err">–</span><span class="n">n</span> <span class="n">hashcode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#检查补丁是否可以成功打上</span>
</span><span class="line"><span class="n">git</span> <span class="nb">apply</span> <span class="o">--</span><span class="n">check</span> <span class="mo">0001</span><span class="o">-</span><span class="n">xxxx</span><span class="o">.</span><span class="n">patch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#开始打补丁</span>
</span><span class="line"><span class="n">git</span> <span class="n">am</span> <span class="mo">0001</span><span class="o">-</span><span class="n">xxxx</span><span class="o">.</span><span class="n">patch</span>
</span><span class="line"><span class="n">git</span> <span class="n">am</span> <span class="mo">0002</span><span class="o">-</span><span class="n">xxxx</span><span class="o">.</span><span class="n">patch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>git diff的命令方法</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">diff</span> <span class="n">SHA1</span> <span class="n">SHA2</span> <span class="o">&gt;</span> <span class="n">diff</span><span class="o">.</span><span class="n">patch</span>
</span><span class="line"><span class="n">git</span> <span class="nb">apply</span> <span class="n">diff</span><span class="o">.</span><span class="n">patch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GenyMotion的安装]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/17/genymotionde-an-zhuang"/>
    <updated>2015-10-17T22:28:11+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/17/genymotionde-an-zhuang</id>
    <content type="html"><![CDATA[<ol>
  <li>先安装虚拟机<a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></li>
  <li>在下载  <a href="http://www.genymotion.cn/#theme=download">GenyMotion</a>,但是他还需要注册，才能继续使用</li>
  <li>主界面的 Settings 按钮，可以用来设置 VirtualBox 及 ADB 路径等信息。</li>
  <li>虚拟机的配置<a href="http://pan.baidu.com/s/1o68yMGM">下载</a></li>
  <li>打上ARM–&gt;x86补丁：只要将Genymotion-ARM-Translation_v1.1.zip拖入安卓虚拟机即可。此时会提示“File Transfer in Progress”，在弹出的窗口中点击【OK】以完成更新。</li>
  <li><img src="http://www.newtomato.me/images/1428929730092.png" alt="Alt text" /></li>
  <li>
    <p>重启虚拟机（关闭窗口，然后再次启动运行就好）</p>
  </li>
  <li>VirtualBox：<a href="https://www.virtualbox.org/wiki/Downloads">官網下載</a></li>
  <li>Genymotion：<a href="https://cloud.genymotion.com/page/launchpad/download/">註冊&amp;下載</a></li>
  <li>Android SDK：<a href="https://cloud.genymotion.com/page/launchpad/download/">官網下載</a></li>
  <li>ARM Translation Installer：v1.1<a href="http://forum.xda-developers.com/showthread.php?t=2528952">下載</a><br />
5	.Google Play：4.3版 | <a href="http://wiki.rootzwiki.com/Google_Apps#Universal_Packages_2">所有版本</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls命令行排序]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/17/lsming-ling-xing-pai-xu"/>
    <updated>2015-10-17T22:26:44+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/17/lsming-ling-xing-pai-xu</id>
    <content type="html"><![CDATA[<p>按文件大小降序排列</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> ls -lSr </span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查看当前电脑上硬盘的使用情况</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">df -lh</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是按兆（M）来排序</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> du -sh * |sort -rm</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>选出排在前面的10个</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">du -sh * | sort -rm | head</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>选出排在后面的10个</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> du -sh * | sort -rm | tail</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim使用-颜色]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/17/vimshi-yong-yan-se"/>
    <updated>2015-10-17T22:19:24+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/17/vimshi-yong-yan-se</id>
    <content type="html"><![CDATA[<ol>
  <li>首先将Solarized的配色库download下来</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">clone</span> <span class="n">git</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">altercation</span><span class="o">/</span><span class="n">solarized</span><span class="o">.</span><span class="n">git</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>将solarized.vim文件copy 到 ~/.vim/colors/  文件夹下面</li>
  <li>配置.vimrc</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">syntax</span> <span class="n">on</span>
</span><span class="line"><span class="nb">set</span> <span class="n">t_Co</span><span class="o">=</span><span class="mi">256</span>
</span><span class="line"><span class="n">let</span> <span class="n">g</span><span class="p">:</span><span class="n">solarized_termcolors</span><span class="o">=</span><span class="mi">256</span>
</span><span class="line"><span class="nb">set</span> <span class="n">background</span><span class="o">=</span><span class="n">dark</span>
</span><span class="line"><span class="n">colorscheme</span> <span class="n">solarized</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>**有两处配置颜色的地方，一处在/usr/share/vim/colors/,一处在~/.vim/colors。前一处是给所有user使用的，后一处仅仅是给当前登录的用户使用的配色 **</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目管理心得]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/17/xiang-mu-guan-li-xin-de"/>
    <updated>2015-10-17T22:14:06+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/17/xiang-mu-guan-li-xin-de</id>
    <content type="html"><![CDATA[<p>项目管理执行力最为重要，其次是需求细节的敲定，将细度调整到每一个像素，是对产品的认真，是对品质的追求。</p>

<p>谈及团队执行，很多人会推荐scrum，他人性化，由开发人员自己估算需要的时间，然后master对这个时间进行管理跟踪，在相关的节点时间开始验收产品，很多人认为这样的管理能够发挥员工主动积极性，因为我自己估算了时间怎么会完不成呢？可是，你是否也会想过这样是否这个srcum就真的没有问题了呢？他是否是适合所有的团队？对于我们这样有些松散的，开发经验并不足够的小团队而言，并且开发任务也很繁重，是否也是适合的呢？<br />
<!--more--><br />
我不否定scrum的作用和他给某些团队带来的便利性，但是我在运用他的时候，往往心有力而力不足，譬如我们有一批任务，这些任务并不涉及太多的技术，有的仅仅是怎么去替换一下本地化的语言。起初我并没有分下去，而是让团队自己去领取任务。然后对任务做好预估的时间。这样一devday结束之后，自己做了多少任务是有数的。我也欢天喜地的认为我们很快就会讲这些小问题解决掉，但事实并不如此。</p>

<p>任务池中的任务下降的速度远不如我的预期。我们在一个周期内解决的问题并不多。在验收产品的时候，我们已经resolve的任务又会被打开。有些又要重回任务池。这样下一个循环开始，周而复始我们的效率也没有提高，而团队里面反而出现了松散的现象，本来很重的任务，其他人好像都感受不深。压力都攒在了我这里。</p>

<p>于是我改变了策略，从每天让他们领任务到现在我给他们发任务并且规定每天完成的数量，可以完不成，但是需要说明什么阻碍了你。我会尽力去为他们清理阻碍。如此坚持几个周期，开发效率提升不小，尽管任务很多，但是合理的安排和计划时间便可以达到在规定的时间内做完，有的时候我们甚至会提前完成。</p>

<p>从此事中，可以看出不是所有的团队，所有的阶段都要组固定的套路，我们应该灵活的变通自己的思路，scrum仅仅是一个工具，工具不顺手，我们应该考虑换别的工具，项目按时完成才是我们最终的目标。不可为此做耽误。待以后团队成熟之后，或者可以在考虑使用scrum。</p>

<p>另一个问题便是对产品的需求的敲定，尤其是那些模糊和待讨论的需求，在初期，开发上手之前，应该让需求方和开发坐在一起，讨论一下这个需求会涉及到什么东西，比如最为简单的问题，文字字体颜色变化，必然在金币“足够”的时候是一种字体，在“不足”的时候，显示另一种颜色，那么这个需求是仅仅放在这一处，还是所有用到金币的体的地方，足够是怎样的量级限定呢？换哪种颜色的字体？如果使用嵌入字体，就需要提供字体。我举的这个例子已经很细节，可是开发中我们往往面对的都是这些细节，如果不敲定这些问题，开发出来总是不对的。</p>

<p>我想每一个前端工程师都曾觉得美术或者UX或者产品经理他们不可理喻，设计出来一个拖拉机的图纸，却希望开发出来卡迪拉克！每当如此，鸡同鸭讲。互相都是不理解的。来来回回无处次修改，有的需求修改甚至可以推到以前的设计，这让以严谨著称的程序员么简直要抓狂，代码是可以灵活多变的，是可以独立的，是可以有各种设计模式帮助我们做出更好的系统，但是每每此刻你会知道哪些东西在需求变化了之后什么都是不重要了，再修身养性的程序员都看破红尘了！</p>

<p>说及以上，大家可以理解讲需求敲定下来是多么重要的啊！因此每当开功能开发的kick off的时候，我们都会讲讲自己的对这个功能的理解，有问题及时拿出来讨论，然后落实到邮件里，便于后面查询。而且最好master能够在程序动手之前让策划美术讲相关的资料先做出来，至少有一个时间节点，做好他们的甘特图才能够做好程序的甘特图。</p>

<p>团队管理不仅仅只有上述两条，还有团队文化，团队默契培养，团队奖罚制度等,剩下的问题待以后遇到在做体会，再拿出来和大家分享。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git命令行总结-rebase]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/17/gitming-ling-xing-zong-jie-rebase"/>
    <updated>2015-10-17T22:11:24+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/17/gitming-ling-xing-zong-jie-rebase</id>
    <content type="html"><![CDATA[<p><a href="http://git-scm.com/book/zh/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E8%A1%8D%E5%90%88">原文</a></p>

<p>使用git rebase的有一条不能去违背的rule，那就是已经提交的commit，不要做rebase操作。</p>

<p>rebase，就是衍合，就是将一个已经committed的commit重新在另一处做提交。它的意义在于将提交记录显得清晰，有条理，切整洁。这是他和merge最大的区别。</p>

<p>##rebase的命令格式如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">rebase</span> <span class="p">[</span><span class="o">-</span><span class="n">i</span> <span class="o">|</span> <span class="o">--</span><span class="n">interactive</span><span class="p">]</span> <span class="p">[</span><span class="n">options</span><span class="p">][</span><span class="o">--</span><span class="k">exec</span> <span class="o">&lt;</span><span class="n">cmd</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">--</span><span class="n">onto</span> <span class="o">&lt;</span><span class="n">newbase</span><span class="o">&gt;</span><span class="p">][</span><span class="o">&lt;</span><span class="n">upstream</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">[</span><span class="o">&lt;</span><span class="n">branch</span><span class="o">&gt;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们的开发分支dev_branch从master开出来，那么rebase的命令如下：<code>git rebase master dev_branch</code><br />
它的工作原理：从dev_branch和master的共同祖先开始，后续所有在dev_branch上面的提交都将以master当前最新的提交为新的基准点再次挨个提交。这是重新生成新的提交而非做合并。你会发现在dev_branch上的同样的commit在master上的SHA1校验码是不一样的。</p>

<p>此外rebase还可以做很多别的有意思的操作，假设如下的一种情况，我们有一个dev1分支，dev1-1分支，和master分支。dev1来源于master的A点，它上面有B，C，D三处提交，dev1-1则是来源于dev1的B点，它上面有E，F两处提交。当我们要将dev1－1 提交到master，而不提交dev1的时候，应该如何使用rebase呢？<br />
我们用到的命令就是｀git rebase –onto master dev1 dev1-1`。这个命令就是从dev1-1和dev1的共同祖先开始之后的所有提交依次重新提交到master分支上。因此我们就跳过了dev1，直接将dev1-1合并回到master。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git命令行总结-log]]></title>
    <link href="http://www.newtomato.me/blog/2015/10/17/gitming-ling-xing-zong-jie-log"/>
    <updated>2015-10-17T22:08:49+08:00</updated>
    <id>http://www.newtomato.me/blog/2015/10/17/gitming-ling-xing-zong-jie-log</id>
    <content type="html"><![CDATA[<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">name</span><span class="o">-</span><span class="n">only</span> <span class="o">--</span><span class="n">oneline</span> <span class="mi">8692</span><span class="n">a53f1</span><span class="o">..</span><span class="n">HEAD</span><span class="o">|</span> <span class="n">grep</span> <span class="o">-</span><span class="n">v</span> <span class="s">&#39;.{7} &#39;</span>  <span class="o">|</span> <span class="n">uniq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>##格式化文件输出</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">graph</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="n">format</span><span class="p">:</span><span class="s">&#39;%Cred</span><span class="si">%h%</span><span class="s">Creset -%C(yellow)</span><span class="si">%d</span><span class="s">%Creset </span><span class="si">%s</span><span class="s"> %Cgreen(</span><span class="si">%c</span><span class="s">r)%Creset&#39;</span> <span class="o">--</span><span class="n">abbrev</span><span class="o">-</span><span class="n">commit</span> <span class="o">--</span><span class="n">date</span><span class="o">=</span><span class="n">relative</span> <span class="o">--</span><span class="n">name</span><span class="o">-</span><span class="n">status</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>##将某一个commit之后的提交做成patch</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">format</span><span class="o">-</span><span class="n">patch</span> <span class="o">-</span><span class="n">M</span> <span class="n">HEAD</span><span class="o">~</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>##将patch打到我们的开发分支</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">am</span> <span class="n">xxx</span><span class="o">.</span><span class="n">patch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>##vim中格式化json</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="p">:</span><span class="o">%</span><span class="err">!</span><span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">json</span><span class="o">.</span><span class="n">tool</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
</feed>
